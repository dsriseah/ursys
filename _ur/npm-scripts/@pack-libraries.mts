/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  NODE CLI TOOL - PACK TARBALL FOR LOCAL PACKAGE TESTING
  using the _out directory for the tarball. This is referred to in the
  package.json dependencies as "core-node": "file:../_ur/_tgz/core-node.tgz"
  
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/

import { GetRootDirs } from '../node-server/file.mts';
import PROMPTS from '../common/util-prompts.ts';
import FSE from 'fs-extra';
import path from 'path';
import { exec, execSync } from 'child_process';

/// CONSTANTS AND DECLARATIONS ///////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const DBG = false;
const LOG = PROMPTS.TerminalLog('PackLibs', 'TagBlue');
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const { ROOT, DIR_UR_OUT } = GetRootDirs();
const DIR_UR_DIST = path.join(ROOT, '_ur/_dist');
const TEMP = path.join(ROOT, '_temp_package');
const DIR_SNA_DIST = path.join(TEMP, '_dist/');

/// HELPERS //////////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
const u_short = p => {
  if (p.startsWith(ROOT)) return p.slice(ROOT.length + 1); // +1 for the slash
  return p; // return path as is if not in ROOT
};
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
let PKG_INFO;
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function u_PackageInfo() {
  if (PKG_INFO) return PKG_INFO;
  const pkgPath = path.join(ROOT, '_ur/package.json');
  if (!FSE.existsSync(pkgPath)) {
    LOG('Package.json not found at', pkgPath);
    return { error: 'root package.json not found' };
  }
  try {
    PKG_INFO = JSON.parse(FSE.readFileSync(pkgPath, 'utf-8'));
  } catch (err) {
    LOG('Error reading package.json:', err);
    return;
  }
  return PKG_INFO;
}

/// PACK METHOD /////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** copy files from exports/_out/core- to exports/core */
async function UpdateDistributionFiles() {
  FSE.ensureDir(path.join(DIR_UR_DIST, 'core'));
  FSE.emptyDirSync(path.join(DIR_UR_DIST, 'core'));
  FSE.copySync(DIR_UR_OUT, path.join(DIR_UR_DIST, 'core'), {
    filter: src => {
      if (!src.includes('.')) return true; // it's a directory
      return src.includes('core-');
    },
    overwrite: true
  });

  // copy files from exports/_out/sna- to tmp/_dist/
  FSE.ensureDir(path.join(DIR_UR_DIST, 'sna'));
  FSE.copySync(DIR_UR_OUT, DIR_SNA_DIST, {
    filter: src => {
      if (!src.includes('.')) return true; // it's a directory
      return src.includes('sna-');
    },
    overwrite: true
  });
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** copy files from exports/_out/cli- to exports/cli */
async function PackCore() {
  // get the package name and version from package.json
  let { error, name, version } = u_PackageInfo();
  const filename = `${name}-${version}.tgz`;
  LOG(`Packing "${filename}" ...`);

  // pack the core library
  const urTgzDir = path.join(ROOT, '_ur/_tgz');
  if (!FSE.existsSync(urTgzDir)) {
    LOG('Creating tgz directory at', urTgzDir);
    FSE.mkdirSync(urTgzDir, { recursive: true });
  }
  execSync(`npm pack ${ROOT}/_ur`, {
    cwd: urTgzDir,
    stdio: 'inherit'
  });
  LOG(`Packed "${filename}" to "${u_short(urTgzDir)}"`);
}
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
/** copy files from exports/_out/cli-  to exports/cli */
async function PackSNA() {
  // get the package name and version from package.json
  let { error, version } = u_PackageInfo();
  // we're using the same version as the core library
  const name = 'sna';
  const filename = `${name}-${version}.tgz`;
  LOG(`Packing "${filename}" ...`);

  // write the sna package.json
  const snaPkg = {
    name,
    version,
    'description':
      'autogenerated export-only package.json for SNA packaging. see @pack-libraries.mts',
    'repository': {
      'type': 'git',
      'url': 'https://github.com/dsriseah/ursys'
    },
    'private': true,
    'type': 'module',
    'exports': {
      './server': {
        'import': './_dist/sna-node.mjs',
        'require': './_dist/sna-node.cjs'
      },
      './client': {
        'import': './_dist/sna-web-esm.js',
        'require': './_dist/sna-web-cjs.js'
      }
    }
  };
  const snaPkgPath = path.join(TEMP, 'package.json');
  LOG('Writing sna package.json to', snaPkgPath);
  FSE.writeFileSync(snaPkgPath, JSON.stringify(snaPkg, null, 2));

  // now pack the sna library and copy to _ur/_tgz
  // which is the same as the core library tarball directory
  const urTgzDir = path.join(ROOT, '_ur/_tgz');
  if (!FSE.existsSync(urTgzDir)) {
    LOG('Creating tgz directory at', urTgzDir);
    FSE.mkdirSync(urTgzDir, { recursive: true });
  }
  execSync(`npm pack ${TEMP}`, {
    cwd: urTgzDir,
    stdio: 'inherit'
  });
  LOG(`Packed "${filename}" to "${u_short(urTgzDir)}"`);
}

/// RUNTIME ///////////////////////////////////////////////////////////////////
/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(async () => {
  console.log('');
  LOG('Copying files to dist ...');
  UpdateDistributionFiles();
  LOG('Packing CORE ...');
  PackCore();
  // currently packaging sna indepndently
  // console.log('');
  // LOG('Packing SNA ...');
  // PackSNA();
  console.log('');
})();
