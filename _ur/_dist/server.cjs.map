{
  "version": 3,
  "sources": ["../common/declare-console.js", "../common/util-prompts.js", "../common/declare-async.js", "../common/declare-errors.js", "../common/util-error-mgr.js", "../common/util-text.js", "../node-server/@server.mts", "../node-server/ur-addon-mgr.mts", "../node-server/files.mts", "../node-server/class-urmodule.mts", "../node-server/env-node.mts", "../node-server/appserver.mts", "../node-server/processes.mts", "../common/class-op-seq.ts", "../common/class-state-mgr.ts"],
  "sourcesContent": ["/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Console colors for both browser and terminal environments\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\n/// COLORS BY NAME ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst COLOR_NAMES = [\n  'Black',\n  'White',\n  'Red',\n  'Orange',\n  'Yellow',\n  'Green',\n  'Cyan',\n  'Blue',\n  'Purple',\n  'Pink',\n  'Gray'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM_COLORS = {\n  // TOUT = makeTerminalOut(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Orange: '\\x1b[38;5;202m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Purple: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgGray: '\\x1b[100m',\n  BgWhite: '\\x1b[47m',\n  BgRed: '\\x1b[41m',\n  BgOrange: '\\x1b[48;5;202m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgPink: '\\x1b[105m',\n\n  // FORMATS\n  TagBlack: '\\x1b[30;1m',\n  TagWhite: '\\x1b[37;1m',\n  TagRed: '\\x1b[41;37m',\n  TagOrange: '\\x1b[43;37m',\n  TagYellow: '\\x1b[43;30m',\n  TagGreen: '\\x1b[42;30m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[44;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[105;1m',\n  TagGray: '\\x1b[100;37m',\n  TagNull: '\\x1b[2;37m'\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CSS_COMMON = 'padding:3px 5px;border-radius:2px;';\nconst CSS_COLORS = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Orange: 'color:orange',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  Pink: 'color:pink',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_COMMON}`,\n  TagOrange: `color:#000;background-color:#fa4;${CSS_COMMON}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_COMMON}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_COMMON}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_COMMON}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_COMMON}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_COMMON}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_COMMON}`,\n  TagGray: `color:#fff;background-color:#999;${CSS_COMMON}`,\n  TagNull: `color:#999;border:1px solid #ddd;${CSS_COMMON}`,\n  // COLOR BACKGROUND DARK (BROWSER ONLY)\n  TagDkRed: `color:white;background-color:maroon;${CSS_COMMON}`,\n  TagDkOrange: `color:white;background-color:burntorange;${CSS_COMMON}`,\n  TagDkYellow: `color:white;background-color:brown;${CSS_COMMON}`,\n  TagDkGreen: `color:white;background-color:forestgreen;${CSS_COMMON}`,\n  TagDkCyan: `color:white;background-color:cerulean;${CSS_COMMON}`,\n  TagDkBlue: `color:white;background-color:darkblue;${CSS_COMMON}`,\n  TagDkPurple: `color:white;background-color:indigo;${CSS_COMMON}`,\n  TagDkPink: `color:white;background-color:fuchsia;${CSS_COMMON}`\n};\n\n/// COLORS BY MEANING /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SEMANTIC_FORMATS = [\n  'Build',\n  'Error',\n  'Alert',\n  'Test',\n  // system startup and components\n  'System',\n  'Server',\n  'Database',\n  'Network',\n  // urnet framework\n  'UR',\n  'URNET',\n  'URMOD',\n  // application\n  'AppMain',\n  'AppModule',\n  'AppState',\n  'AppCore',\n  'DataCore',\n  // user interface\n  'UI',\n  // events\n  'Phase',\n  'Event',\n  'Stream'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTERM_COLORS.TagBuild = TERM_COLORS.TagGray;\nTERM_COLORS.TagError = TERM_COLORS.TagRed;\nTERM_COLORS.TagAlert = TERM_COLORS.TagOrange;\nTERM_COLORS.TagTest = TERM_COLORS.TagRed;\n//\nTERM_COLORS.TagSystem = TERM_COLORS.TagGray;\nTERM_COLORS.TagServer = TERM_COLORS.TagGray;\nTERM_COLORS.TagDatabase = TERM_COLORS.TagCyan;\nTERM_COLORS.TagNetwork = TERM_COLORS.TagCyan;\n//\nTERM_COLORS.TagUR = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURNET = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURMOD = TERM_COLORS.TagBlue;\n//\nTERM_COLORS.TagAppMain = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppModule = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppState = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppCore = TERM_COLORS.TagGreen;\nTERM_COLORS.TagDataCore = TERM_COLORS.TagGreen;\n//\nTERM_COLORS.TagUI = TERM_COLORS.TagPurple;\n//\nTERM_COLORS.TagPhase = TERM_COLORS.TagPink;\nTERM_COLORS.TagEvent = TERM_COLORS.TagPink;\nTERM_COLORS.TagStream = TERM_COLORS.TagPink;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCSS_COLORS.TagDebug = `color:#fff;background-color:IndianRed;${CSS_COMMON}`;\nCSS_COLORS.TagWarning = `color:#fff;background:linear-gradient(\n  -45deg,\n  rgb(29,161,242),\n  rgb(184,107,107),\n  rgb(76,158,135)\n);${CSS_COMMON}`;\nCSS_COLORS.TagTest = CSS_COLORS.TagRed;\n//\nCSS_COLORS.TagSystem = CSS_COLORS.TagGray;\nCSS_COLORS.TagServer = CSS_COLORS.TagGray;\nCSS_COLORS.TagDatabase = CSS_COLORS.TagCyan;\nCSS_COLORS.TagNetwork = CSS_COLORS.TagCyan;\n//\nCSS_COLORS.TagUR = `color:CornflowerBlue;border:1px solid CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURNET = `color:#fff;background-color:MediumSlateBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURMOD = `color:#fff;background:linear-gradient(\n  -45deg,\n  CornflowerBlue 0%,\n  LightSkyBlue 25%,\n  RoyalBlue 100%\n);${CSS_COMMON}`;\nCSS_COLORS.TagAppMain = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppModule = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppState = `color:#fff;background-color:Navy;${CSS_COMMON}`;\nCSS_COLORS.TagUI = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagEvent = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagStream = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagPhase = `color:#fff;background-color:MediumVioletRed;${CSS_COMMON}`;\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM_COLORS,\n  CSS_COLORS\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\nconst IS_NODE = typeof window === 'undefined';\nconst IS_MOBILE =\n  !IS_NODE &&\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\nconst D_CONSOLE = require('./declare-console.js');\nconst { TERM_COLORS, CSS_COLORS } = D_CONSOLE;\n\nconst DEFAULT_PADDING = IS_NODE\n  ? 10 // nodejs\n  : 8; // not nodejs\nconst DEFAULT_SPACE = IS_NODE\n  ? ' '.padStart(DEFAULT_PADDING, ' ')\n  : ' '.padStart(DEFAULT_PADDING + 4, ' ');\n\nconst DEFAULT_COLOR = 'TagNull';\n\n// div console\nconst HTCONSOLES = {};\n\n/// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** define\n */\nconst SHOW = true;\nconst HIDE = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  'UR': [SHOW, 'TagRed'],\n  // SERVERS\n  'APPSRV': [SHOW, 'Yellow'],\n  'GEMSRV': [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\nfunction padString(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  const nbsp = String.fromCharCode(0x00a0); // unicode non-break space\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`;\n  // must be non-node environment, so do dynamic string adjust\n  if (padding === 0) return `${str}`;\n  // if this far, then we're truncating\n  if (len >= padding) str = str.substr(0, padding);\n  else str = str.padEnd(padding, nbsp);\n  return `${str}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a color to the PROMPT_DICT for a particular PREFIX */\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) colorTable = IS_NODE ? CSS_COLORS : TERM_COLORS;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor)\n    throw Error(`prompt color ${color} is not defined in either table`);\n  // turn on color prompt\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an array suitable for destructuring inside console.log() in\n *  either Node or the browser with color\n */\nfunction m_MakeColorArray(prompt, colorName) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, colorName);\n  // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n  if (!(dbg || IS_NODE)) return [];\n  return IS_NODE\n    ? [`${color}${padString(prompt)}${reset}   `] // server\n    : [`%c${padString(prompt)}%c `, color, reset]; // browser\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an environment-specific color wrapper function suitable for use\n *  in debug output. Use m_MakeColorArray() for browser output.\n */\nfunction m_MakeColorPromptFunction(prompt, colorName, opt = {}) {\n  const textColor = opt.color || 'Reset';\n  const dim = opt.dim || false;\n  return IS_NODE\n    ? (str, ...args) => {\n        if (args === undefined) args = '';\n        let TAG = TERM_COLORS[colorName];\n        let TEXT = TERM_COLORS[textColor];\n        let RST = TERM_COLORS.Reset;\n        let PR = padString(prompt);\n        if (dim) TEXT += TERM_COLORS.Dim;\n        console.log(`${RST}${TAG}${PR}${RST}${TEXT}    ${str}`, ...args);\n      }\n    : (str, ...args) => {\n        if (args === undefined) args = '';\n        let TEXT = TERM_COLORS[textColor];\n        let RST = CSS_COLORS.Reset;\n        let PR = padString(prompt);\n        console.log(`%c${PR}%c%c ${str}`, RST, TEXT, ...args);\n      };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_GetDivText(id) {\n  const el = document.getElementById(id);\n  if (!el) {\n    console.log(`GetDivText: element ${id} does not exist`);\n    return undefined;\n  }\n  const text = el.textContent;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return {};\n  }\n  el.style.whiteSpace = 'pre';\n  el.style.fontFamily = 'monospace';\n  return { element: el, text };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextJumpRow(row, lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (text === undefined) return lineBuffer;\n  // convert content to line buffer\n  if (lineBuffer.length === 0) {\n    console.log(`initializing linebuffer from element id='${id}'`);\n    lineBuffer = text.split('\\n'); // creates a NEW array\n  }\n  // handle line underflow in buffer if row exceeds line buffer\n  if (row > lineBuffer.length - 1) {\n    const count = row + 1 - lineBuffer.length;\n    for (let i = count; i > 0; i--) lineBuffer.push('');\n  }\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextPrint(str = '', lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (!text) return lineBuffer;\n  // append text\n  lineBuffer.push(str);\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Function to modify the text area of a passed HTML element. Always return\n *  lineBuffer so we can reassign the reference, as the array often changes.\n */\nfunction m_HTMLTextPlot(str = '', lineBuffer, id, row = 0, col = 0) {\n  const { element, text } = m_GetDivText(id);\n  if (!element) return lineBuffer;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return lineBuffer;\n  }\n  // ensure row exists\n  lineBuffer = m_HTMLTextJumpRow(row, lineBuffer, id);\n  // fetch line\n  let line = lineBuffer[row];\n  if (line === undefined) {\n    console.log(`HTMLTextOut: unexpected line error for line ${row}`);\n    return lineBuffer;\n  }\n  // handle column underflow in line if col exceeds line length\n  if (col + str.length > line.length + str.length) {\n    for (let i = 0; i < col + str.length - line.length; i++) line += ' ';\n  }\n  // insert str into line\n  let p1 = line.substr(0, col);\n  let p3 = line.substr(col + str.length, line.length - (col + str.length));\n  lineBuffer[row] = `${p1}${str}${p3}`;\n  // write buffer back out\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log(). This is supported\n *  in Chrome and Safari (somewhat), but not in Firefox as of last testing.\n *\n *  To create the function, provide a short PROMPT. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all PROMPTS in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allow modification of the PROMPT_DICT\n */\nfunction makeStyleFormatter(prompt, tagColor) {\n  if (prompt.startsWith('UR') && tagColor === undefined) tagColor = 'TagUR';\n  let outArray = m_MakeColorArray(prompt, tagColor);\n  if (outArray.length === 0) return () => [];\n  if (IS_MOBILE) outArray = [`${prompt}:`];\n  const f = (str, ...args) => [...outArray, str, ...args];\n  f._ = `\\n${DEFAULT_SPACE}`;\n  return f;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeErrorFormatter(pr = '') {\n  const bg = 'rgba(255,0,0,1)';\n  const bga = 'rgba(255,0,0,0.15)';\n  pr = `ERROR ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeWarningFormatter(pr = '') {\n  const bg = 'rgba(255,150,0,1)';\n  const bga = 'rgba(255,150,0,0.15)';\n  pr = `WARN ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use like console.log(...debugFormatter('prompt'), 'la la la'); */\nfunction dbgPrint(pr, bg = 'MediumVioletRed') {\n  return [\n    `%c${pr}%c`,\n    `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n    'color:auto;background-color:auto'\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction colorTagString(str, tagColor) {\n  return m_MakeColorArray(str, tagColor);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to directly print to console instead of returning an array.\n *  This works better for NodeJS since the empty [] still results in output\n *  unlike the browser. Use makeStyleFormatter for browsers\n */\nfunction makeTerminalOut(prompt, tagColor = DEFAULT_COLOR) {\n  const wrap = m_MakeColorPromptFunction(prompt, tagColor);\n  wrap.warn = m_MakeColorPromptFunction(prompt, 'TagYellow', { color: 'Yellow' });\n  wrap.error = m_MakeColorPromptFunction(prompt, 'TagRed', { color: 'Red' });\n  wrap.fail = m_MakeColorPromptFunction(prompt, 'Red', { color: 'Red' });\n  wrap.pass = m_MakeColorPromptFunction(prompt, 'Green', { color: 'Green' });\n  wrap.info = m_MakeColorPromptFunction(prompt, 'TagGray', { dim: true });\n  wrap.DIM = '\\x1b[2m'; // dim text\n  wrap.BRI = '\\x1b[1m'; // bright text\n  wrap.RST = '\\x1b[0m'; // reset text\n  return wrap;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to print a string, given a DIV id and optional row/column.\n */\nfunction makeHTMLConsole(divId, row = 0, col = 0) {\n  const ERP = makeStyleFormatter('makeHTMLConsole', 'Red');\n  let buffer = [];\n  if (typeof divId !== 'string') throw Error('bad id');\n  if (!document.getElementById(divId)) {\n    console.warn(...ERP(`id '${divId}' doesn't exist`));\n    return {\n      print: () => {},\n      plot: () => {},\n      clear: () => {},\n      gotoRow: () => {}\n    };\n  }\n  let hcon;\n  if (HTCONSOLES[divId]) {\n    hcon = HTCONSOLES[divId];\n  } else {\n    hcon = {\n      buffer: [],\n      plot: (str, y = row, x = col) => {\n        buffer = m_HTMLTextPlot(str, buffer, divId, y, x);\n      },\n      print: str => {\n        buffer = m_HTMLTextPrint(str, buffer, divId);\n      },\n      clear: (startRow = 0, endRow = buffer.length) => {\n        buffer.splice(startRow, endRow);\n      },\n      gotoRow: row => {\n        buffer = m_HTMLTextJumpRow(row, buffer, divId);\n      }\n    };\n    HTCONSOLES[divId] = hcon;\n  }\n  return hcon;\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Print all Tag Colors\n */\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE\n      ? [`${padString(out)} - (node) ${color}${key}${reset}`]\n      : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n}\n\n/// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  padString,\n  makeStyleFormatter,\n  makeErrorFormatter,\n  makeWarningFormatter,\n  dbgPrint,\n  makeTerminalOut,\n  makeHTMLConsole,\n  printTagColors,\n  colorTagString\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  All declare modules are dependency-free so can be imported by anyone\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\n/// MAIN LIFECYCLE EVENTS /////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// This is a standardized lifecycle for our applications. These are\n/// the lifecycle events that fire and can be hooked by interested modules\nconst APP_LIFECYCLE = {\n  SETUP: [\n    'INITIALIZE', // module data structure init\n    'NETWORK', // connected to network\n    'CONNECT', // connected as registered UR application\n    'LOAD', // load any external data, make connections\n    'CONFIG', // configure runtime data structures\n    'ALLOCATE' // alloca\n  ],\n  RUN: [\n    'READY', // when viewsystem has completely composed\n    'START', // start normal execution run\n    'RUN', // system starts running\n    'UPDATE', // system is running (periodic call w/ time)\n    'STATUS', // system status message\n    'STOP' // system wants to stop current rons\n  ],\n  ASYNC: [\n    'FREEZE', // system wants to pause run\n    'UNFREEZE' // system has paused (periodic call w/ time)\n  ],\n  SHUTDOWN: [\n    'DEALLOCATE', // release memory resourcesun\n    'UNLOAD', // system releases any connecti\n    'SHUTDOWN', // system is shutting down\n    'ZOMBIE', // system is dead and needs to reinitialize\n    'EXIT' // system has ended\n  ],\n  EXCEPTION: [\n    'DISCONNECT', // unisys server has gone offline\n    'RECONNECT', // unisys server has reconnected\n    'NETWORK_LOST', // network connection lost\n    'APP_HALT' // system and thrown an error\n  ]\n};\n\n/// CHILD STATUS EVENTS ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// These are events emitted by a UR-format command module The key ones are\n/// MESSAGE and STOP or EXIT.\nconst UR_EVENTS = {\n  // dataex module events appear in {dataex,data} message object\n  DATAEX: [\n    // UrModule initial handshake\n    '_CONFIG_REQ', // Receive UrModule setup data\n    '_CONFIG_ACK', // on configuration, return config data to UrModule instance\n    // upstream module messages to downstream module\n    'DATA', // data: chunk from upstream module\n    'RESPONSE', // control: response from upstream module\n    // downstream module messages to upstream module\n    'initialize', // status: downstream module init\n    'start', // status:about to start\n    'run', // status: has started running\n    'status', // status: periodic update\n    'error', // status: process-terminating error, w status\n    'stop', // status: process stoppeed\n    'exit', // status: process terminated w/ errcode\n    'result', // data: result of operation\n    'request' // control: request upstream RESPONSE\n  ]\n};\n\n/// NODEJS EVENT EMITTER //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// these\nconst EMITTER = {\n  addListener: (event, listener) => {},\n  emit: (event, [...args]) => {},\n  eventNames: () => {},\n  getMaxListeners: () => {},\n  listenerCount: eventName => {},\n  listeners: eventName => {},\n  off: (eventName, listener) => {},\n  on: (eventName, listener) => {},\n  once: (eventName, listener) => {},\n  prependListener: (eventName, listener) => {},\n  prependOnceListener: (eventName, listener) => {},\n  removeAllListeners: ([eventName]) => {},\n  removeListener: (eventName, listener) => {},\n  setMaxListeners: n => {},\n  rawListeners: eventName => {}\n};\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  APP_LIFECYCLE,\n  UR_EVENTS\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  description\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst EXIT_CODES = {\n  ERR_UR: 444 // ur runner general error\n};\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  EXIT_CODES\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  description\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst { EXIT_CODES } = require('./declare-errors');\nconst { ERR_UR } = EXIT_CODES;\nconst PROMPTS = require('./util-prompts');\nconst { makeTerminalOut } = PROMPTS;\nconst ERROUT = makeTerminalOut('ERR', 'TagRed');\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DIE = (...args) => {\n  Error.stackTraceLimit = 20;\n  let errs = new Error(`UR Process Terminated (${ERR_UR})`).stack.split('\\n');\n  let myErrs = errs\n    .filter(line => {\n      if (line.includes('at Module.')) return false;\n      if (line.includes('at require ')) return false;\n      return true;\n    })\n    .join('\\n');\n  ERROUT(`\\x1b[93m${args.join(' ')}\\x1b[0m`);\n  ERROUT(myErrs);\n  process.exit(ERR_UR);\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst NewConsoleError = (label = '_ERR_', tagColor = 'TagRed') => {\n  const fn = 'NewConsoleError';\n  if (typeof label !== 'string') DIE(fn, `arg must be a string`);\n  const OUT = makeTerminalOut(label, tagColor);\n  return OUT;\n};\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  DIE,\n  NewConsoleError\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  description\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/// PARSER INPUT NORMALIZER ////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** This function takes a multi-line string and performs the following operations:\n *  - Makes sure all newline types with '\\n'\n *  - Removes all tab characters\n *  - Processes comma and colon delimited sequences in each line:\n *  - Removes whitespace around each delimiter except when inside quotes\n *  - Collapses all internal whitespace to a single space\n *  - Ensures that there is a trailing newline\n * (written, with effort, by ChatGPT4)\n * @param {string} str - The input string to be normalized.\n * @return {string} - The normalized string.\n */\nfunction PreprocessDataText(str) {\n  let normalizedStr = str.replace(/\\r\\n|\\r/g, '\\n'); // conform newlines\n  normalizedStr = normalizedStr // remove trailing/preserve leading whitespace\n    .split('\\n')\n    .map(line => line.replace(/\\s+$/, '')) // remove trailing\n    .map(line => line.replace(/^\\s+/, '')) // remove leading\n    .join('\\n');\n  normalizedStr = normalizedStr.replace(/\\t/g, '  '); // replace tabs with 2 spaces\n  let lines = normalizedStr.split('\\n'); // split string into lines\n  /** process whitespace around delimiters */\n  const processDelimited = (line, delimiter) => {\n    let parts = line.split(delimiter); // split lines based on delimiter\n    for (let i = 0; i < parts.length; i++) {\n      parts[i] = parts[i].trim();\n      parts[i] = parts[i].replace(/\\s+/g, ' ');\n    }\n    return parts.join(delimiter);\n  };\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = processDelimited(lines[i], ',', { preserve: true });\n    lines[i] = processDelimited(lines[i], ':', { preserve: true });\n  }\n  normalizedStr = lines.join('\\n').trim();\n  return normalizedStr + '\\n';\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  PreprocessDataText\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  entrypoint for server\n\n  when making live changes, make sure that the ur builder is also running and\n  users of this library are watching for changes to the ur library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\nimport * as ADDONMGR from './ur-addon-mgr.mts';\nimport * as APPSERV from './appserver.mts';\nimport * as ENV from './env-node.mts';\nimport * as FILE from './files.mts';\nimport * as PROC from './processes.mts';\n// cjs-style modules\nimport TEXT from '../common/util-text.js';\nimport PROMPTS from '../common/util-prompts.js';\n// typescript classes\nimport UrModule from './class-urmodule.mts';\nimport OpSequencer from '../common/class-op-seq.ts';\nimport StateMgr from '../common/class-state-mgr.ts';\nconst { makeTerminalOut } = PROMPTS;\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CLASS = {\n  OpSequencer,\n  StateMgr,\n  UrModule\n};\n\n/// RUNTIME API ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** first time initialization */\nfunction Initialize(options: UR_InitOptions): void {\n  const { rootDir } = options;\n  ENV.SetRootPaths(rootDir);\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst { makeStyleFormatter } = PROMPTS;\nexport {\n  // URSYS CONTROL\n  Initialize,\n  // MAIN MODULES\n  APPSERV, // application server\n  ADDONMGR, // ur module manager\n  CLASS,\n  ENV, // environment utilities and constants\n  FILE, // file utilities\n  PROC, // interprocess communication utils\n  // UTILITIES\n  TEXT,\n  // COMMON UTILS\n  makeTerminalOut as PR // prompt style formatter\n};\n", "#!/usr/bin/env node\n/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  UR PROCESS\n\n  a forked module or an imported module that implements our version of\n  streaming data communcations\n\n  UR_Fork() - returns an UrModule instance of type 'fork'\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { fork } from 'node:child_process';\nimport { join } from 'node:path';\n// MTS\nimport { DirExists, Files } from './files.mts';\nimport UrModule from './class-urmodule.mts';\nimport { DIR_UR_ADDS, ShortPath as u_short } from './env-node.mts';\n// JS imports are assumed to be CJS and cannot be destructured\nimport ERROR from '../common/util-error-mgr.js';\nimport PROMPT from '../common/util-prompts.js';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = PROMPT.makeTerminalOut(' UPROC', 'TagCyan');\nconst DBG = true;\nconst { DIE } = ERROR;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LAUNCH_PREFIX = '@';\nlet URDIR = '';\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\\\n/** API: fork a module and setup its IPC\n *  @param {string} modname \"moduleDir/@entryFile\"\n *  @param input input file or stream\n *  @param output output file or stream\n *  @returns {object} input, output, options props if found\n */\nasync function UR_Fork(modname, opt = {}) {\n  const fn = `UR_Fork ${modname}:`;\n  LOG(fn, 'starting');\n  let child; // hold ur module instance\n  //\n  const { input, output, cwd } = m_ParseOptions(opt);\n  if (cwd) URDIR = cwd;\n  if (URDIR.endsWith('/')) URDIR = URDIR.slice(0, -1);\n  let { modpath, entry } = m_ParseModulePathString(modname, fn);\n  let forkPath = `${URDIR}/${modpath}`;\n  if (DBG) LOG('searching', u_short(forkPath), 'for modules');\n  const entryFiles = m_ReadModuleEntryFiles(modpath);\n  if (DBG) LOG('found entryfiles', entryFiles);\n  if (entry) {\n    if (!entryFiles.includes(entry))\n      DIE(fn, `error: %{entry} is not in ${URDIR}${modpath}`);\n    /* SUCCESS */\n    if (DBG) LOG(`launching '${u_short(forkPath)}/${entry}'`);\n    child = fork(entry, { cwd: forkPath });\n    return child;\n  }\n  if (entryFiles.length === 0)\n    DIE(fn, `error: no @entry modules found in ${URDIR}${modpath}`);\n\n  /* SUCCESS */\n  entry = entryFiles[0];\n  if (DBG) LOG(`launching '${modpath}/${entry}'`);\n  child = fork(entry, { cwd: `${URDIR}${modpath}/` });\n  const urmod = new UrModule(child, { name: `${modpath}/${entry}` });\n  return urmod;\n}\n\n/// SUPPORT FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Used by UR_Fork: given a variable number of args, return all the\n *  possibilities the order is input stream, output stream, options. throws\n *  error and exits process on error\n *  @param {array} args 0,1,2,3 arguments to parse\n *  @returns {object} input, output, cwd if defined\n */\nfunction m_ParseOptions(opt) {\n  const fn = 'm_ParseOptions';\n  let { input, output, cwd = '' } = opt;\n  if (input) {\n    if (!(input instanceof UrModule))\n      throw new Error(`${fn}: input must be UrModule instance or undefined`);\n  }\n  if (output) {\n    if (!(output instanceof UrModule))\n      throw new Error(`${fn}: output must be UrModule instance or undefined`);\n  }\n  if (cwd) {\n    if (typeof cwd !== 'string')\n      throw new Error(`${fn}: cwd must be string or undefined`);\n  } else {\n    cwd = DIR_UR_ADDS;\n  }\n  return {\n    input,\n    output,\n    cwd\n  };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** (unused)\n *  parses variable number of arguments for (input,output,options,...extra)\n *  replace by m_ParseOptions() then variable args was replaced with options\n *  object to simplify logic, but retained because it's an interesting bit of\n *  code for this style of call.\n */\nfunction m_ParseArgumentVariations(args) {\n  const fn = 'm_ParseArgumentVariations';\n  const argCount = args.reduce((ac, cv) => (cv !== undefined ? ac + 1 : ac), 0);\n\n  let [a, b, c, ...d] = args;\n\n  const parsed = {\n    input: undefined,\n    output: undefined,\n    options: undefined,\n    extra: undefined\n  };\n  switch (argCount) {\n    case 0:\n      break;\n    case 1:\n      if (u_argType(a).stream) parsed.input = a;\n      else if (u_argType(a).options) parsed.options = a;\n      break;\n    case 2: // input, [ output | options ]\n      // arg1\n      if (u_argType(a).options) DIE(fn, `(2 args) arg1 must be urstream`);\n      if (u_argType(a).stream) parsed.input = a;\n      // arg2\n      if (u_argType(b).stream) parsed.output = b;\n      else if (u_argType(b).options) parsed.options = b;\n      break;\n    case 3: // input, output, options\n      // arg1\n      if (u_argType(a).options) DIE(fn, `(3 args) arg1 must be urstream`);\n      if (u_argType(a).stream) parsed.input = a;\n      // arg2\n      if (u_argType(b).options) DIE(fn, `(3 args) arg2 must be urstream`);\n      if (u_argType(b).stream) parsed.output = b;\n      // arg3\n      if (u_argType(c).options) parsed.options = c;\n      else DIE(fn, `(3 args) arg3 must be an options object`);\n      break;\n    default:\n      DIE(fn, `error: too many arguments`);\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Used by UR_Fork: given a module path string, parse into a module path\n *  and an entry file if it is present.\n *  @param {string} modpath path relative to _ur directory\n *  @returns {object} modpath, entry\n */\nfunction m_ParseModulePathString(modname, fn = 'm_ParseModulePathString') {\n  let modpath, entry;\n  // required argument\n  if (typeof modname !== 'string')\n    DIE(fn, 'error: arg1 must be a string path not', typeof modname);\n  // handle modname and modname/@entry\n  const pathbits = modname.split('/');\n  if (pathbits.length === 2) {\n    modpath = pathbits[0];\n    entry = pathbits[1];\n  } else if (pathbits.length === 1) {\n    modpath = modname;\n  } else DIE(fn, 'error: arg1 syntax path too deep');\n  // make sure entryJS is a string or undefined\n  if (entry !== undefined && typeof entry !== 'string')\n    DIE(fn, 'error: bad module entry');\n  // double-check entry has leading @ if it's a string\n  if (entry && !entry.startsWith('@'))\n    DIE(fn, `error: entrypoint '${entry}' must begin with @`);\n\n  // success\n  return { modpath, entry };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** look for files beginning with @ in the module directory modname.\n *  If an explicit entryFile is part of the path, that is returned,\n *  otherwise the first file found is returned.\n *  @param {string} modname format \"moduleDir/[@entryFile]\"\n *  @returns {string} path to the entryFile\n */\nfunction m_ReadModuleEntryFiles(modname) {\n  const fn = 'm_ReadModuleEntryFiles:';\n  const modulePath = join(URDIR, modname);\n  // if (DBG) LOG(fn, 'searching', u_short(modulePath), 'for entry files');\n  if (!DirExists(modulePath)) {\n    console.log('error', modulePath);\n    DIE(fn, 'error:', modname, `not found in ${URDIR} directory`);\n  }\n  const files = Files(modulePath);\n  const entryFiles = files.filter(file => file.startsWith(LAUNCH_PREFIX));\n  // if (DBG) LOG(fn, 'found entry files', entryFiles);\n  return entryFiles;\n}\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst u_isUrStream = obj => typeof obj.on === 'function';\nconst u_isOptions = obj => {\n  if (typeof obj !== 'object') return false;\n  if (typeof obj.on === 'function') return false;\n  return true;\n};\nconst u_argType = arg => {\n  const fn = 'u_argType:';\n  let test = {\n    stream: undefined,\n    options: undefined\n  };\n  if (u_isUrStream(arg)) test.stream = arg;\n  else if (u_isOptions(arg)) test.options = arg;\n  else DIE(fn, `arg must be an urStream or options object`);\n  //\n  return test;\n};\n\nfunction ProcTest() {\n  console.log('proc test');\n}\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport { UR_Fork, ProcTest };\n", "/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Base File System Helpers\n\n  note: this has not been extensively bullet-proofed\n\n  TODO: ensure that most routines are synchronous, and label async functions\n  as such\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\n/// SYSTEM LIBRARIES //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport NDIR from 'node-dir';\nimport FSE from 'fs-extra';\nimport PATH from 'node:path';\nimport PROMPT from '../common/util-prompts.js';\nimport { ShortPath } from '@ursys/core';\nimport * as url from 'url';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return the directory name of the current module */\nfunction m_Dirname() {\n  if (import.meta) return url.fileURLToPath(new URL('.', import.meta.url));\n  return __dirname;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** scan for parent directory that contains a file that uniquely appears in the\n *  root directory of the project. It defaults to `.nvmrc`\n */\nfunction DetectedRootDir(rootfile: string = '.nvmrc'): string {\n  if (typeof DETECTED_DIR === 'string') return DETECTED_DIR;\n  let currentDir = m_Dirname();\n  const check_dir = dir => FSE.existsSync(PATH.join(dir, rootfile));\n  // walk through parent directories until root is reached\n  while (currentDir !== PATH.parse(currentDir).root) {\n    if (check_dir(currentDir)) {\n      DETECTED_DIR = currentDir;\n      return DETECTED_DIR;\n    }\n    currentDir = PATH.resolve(currentDir, '..');\n  }\n  // If reached root and file not found by loop\n  return undefined;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = PROMPT.makeTerminalOut(' FILE', 'TagGreen');\nlet DETECTED_DIR; // cached value of DetectedRootDir\nconst ERR_UR = 444;\nconst DBG = false;\n\n/// SYNCHRONOUS FILE METHODS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction FileExists(filepath): boolean {\n  try {\n    // accessSync only throws an error; doesn't return a value\n    FSE.accessSync(filepath);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction DirExists(dirpath): boolean {\n  try {\n    const stat = FSE.statSync(dirpath);\n    if (stat.isFile()) {\n      LOG(`DirExists: ${dirpath} is a file, not a directory`);\n      return false;\n    }\n    return stat.isDirectory();\n  } catch {\n    return false;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsDir(dirpath): boolean {\n  try {\n    const stat = FSE.statSync(dirpath);\n    if (stat.isDirectory()) return true;\n    return false;\n  } catch (e) {\n    LOG(`IsDir: ${dirpath} does not exist`);\n    return false;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsFile(filepath): boolean {\n  try {\n    const stat = FSE.statSync(filepath);\n    if (stat.isFile()) return true;\n    return false;\n  } catch (e) {\n    LOG(`IsFile: ${filepath} does not exist`);\n    return false;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction EnsureDir(dirpath) {\n  try {\n    FSE.ensureDirSync(dirpath);\n    return true;\n  } catch (err) {\n    LOG(`EnsureDir: <${dirpath}> failed w/ error ${err}`);\n    throw new Error(err);\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction RemoveDir(dirpath): boolean {\n  try {\n    if (IsDir(dirpath)) FSE.removeSync(dirpath);\n    return true;\n  } catch (err) {\n    LOG(`EnsureDir: <${dirpath}> failed w/ error ${err}`);\n    throw new Error(err);\n  }\n}\n//\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Make a string relative to the project root, returning a normalized path */\nfunction AbsLocalPath(subdir: string): string {\n  const root = DetectedRootDir();\n  if (!root) throw Error('AbsLocalPath: could not find project root');\n  return PATH.normalize(PATH.join(root, subdir));\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Make a string that removes the DetectedRootDir() portion of the path */\nfunction RelLocalPath(subdir: string): string {\n  const root = DetectedRootDir();\n  if (!root) throw Error('AbsLocalPath: could not find project root');\n  const path = PATH.normalize(PATH.join(root, subdir));\n  return path.slice(root.length);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return the short path name with project root removed */\nfunction ShortPath(path: string): string {\n  const root = DetectedRootDir();\n  if (!root) throw Error('ShortPath: could not find project root');\n  return path.slice(root.length);\n}\n\n/// ASYNC DIRECTORY METHODS ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return array of filenames */\nfunction GetDirContent(dirpath) {\n  if (!DirExists(dirpath)) {\n    const err = `${dirpath} is not a directory`;\n    console.warn(err);\n    return undefined;\n  }\n  const filenames = FSE.readdirSync(dirpath);\n  const files = [];\n  const dirs = [];\n  for (let name of filenames) {\n    let path = PATH.join(dirpath, name);\n    const stat = FSE.lstatSync(path);\n    // eslint-disable-next-line no-continue\n    if (stat.isDirectory()) dirs.push(name);\n    else files.push(name);\n  }\n  return { files, dirs };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a dirpath, return all files. optional match extension */\nfunction Files(dirpath, opt = {}): string[] {\n  const result = GetDirContent(dirpath);\n  if (!result) return undefined;\n  const basenames = result.files.map(p => PATH.basename(p));\n  if (DBG) LOG(`found ${basenames.length} files in ${dirpath}`);\n  return basenames;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction Subdirs(dirpath): string[] {\n  const result = GetDirContent(dirpath);\n  if (!result) return undefined;\n  return result.dirs;\n}\n\n/// FILE READING //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction ReadFile(filepath, opt?) {\n  opt = opt || {};\n  opt.encoding = opt.encoding || 'utf8';\n  return FSE.readFileSync(filepath, opt);\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function AsyncReadFile(filepath, opt?) {\n  opt = opt || {};\n  opt.encoding = opt.encoding || 'utf8';\n  try {\n    return await FSE.readFile(filepath, opt);\n  } catch (err) {\n    LOG(`AsyncReadFile: <${filepath}> failed w/ error ${err}`);\n    throw new Error(err);\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function UnsafeWriteFile(filepath, rawdata) {\n  let file = FSE.createWriteStream(filepath, { emitClose: true });\n  file.write(rawdata);\n  file.on('error', () => LOG('error on write'));\n  file.end(); // if this is missing, close event will never fire.\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function AsyncReadJSON(filepath) {\n  const rawdata = (await AsyncReadFile(filepath)) as any;\n  return JSON.parse(rawdata);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function AsyncWriteJSON(filepath, obj) {\n  if (typeof obj !== 'string') obj = JSON.stringify(obj, null, 2);\n  await UnsafeWriteFile(filepath, obj);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function UnlinkFile(filepath) {\n  try {\n    FSE.unlinkSync(filepath);\n    return true;\n  } catch (err) {\n    if (err.code === 'ENOENT') return false;\n    console.log(err.code);\n  }\n}\n\n/// SYNCHRONOUS TESTS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction Test() {\n  const files = Files(__dirname);\n  if (files.length && files.length > 0) LOG('FM.Files: success');\n  else LOG('Files: fail');\n  LOG(`found ${files.length} files`);\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  FileExists,\n  DirExists,\n  IsDir,\n  IsFile,\n  EnsureDir,\n  RemoveDir,\n  DetectedRootDir,\n  AbsLocalPath,\n  RelLocalPath,\n  ShortPath,\n  Files,\n  Subdirs,\n  //\n  ReadFile,\n  AsyncReadFile,\n  UnsafeWriteFile,\n  AsyncReadJSON,\n  AsyncWriteJSON,\n  //\n  UnlinkFile,\n  //\n  Test\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  All declare modules are dependency-free so can be imported by anyone\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { EventEmitter } from 'node:events';\nimport { Readable, Writable, Duplex, Transform } from 'node:stream';\nimport D_ASYNC from '../common/declare-async.js';\nconst { URDEX } = D_ASYNC.UR_EVENTS;\nimport { ChildProcess } from 'node:child_process';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport { makeTerminalOut } from '../common/util-prompts.js';\nconst LOG = makeTerminalOut(' URMOD', 'TagYellow');\nconst DBG = true;\n\n/// CLASS UR MODULE ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** standardized interface for modules that are capable of\n *  chaining stream-style operations as well as providing an API interface\n */\nclass UrModule {\n  //\n  id = undefined;\n  modObj = undefined; // the wrapped module\n  modName = ''; // descriptive name (optional)\n  modType = ''; // modType of module object implementation\n  modIn = undefined; // instance of UrModule\n  modOut = undefined; // instance of UrModule\n  //\n  protocol = undefined;\n  inputBuffer = [];\n  outputBuffer = [];\n  error = '';\n  //\n  static modtype_enum = ['null', 'event', 'fork', 'stream', 'urnet'];\n  static buffer_size = 100;\n  static id_counter = 100;\n\n  /** constructor\n   *  this class wraps the provided object with a standardized interface,\n   *  supporting the types defined in this.modtype_enum. It performs a runtime\n   *  check to determine the modType of the provided object.\n   *  @param {object} obj an eventEmitter, process, or stream\n   *  @param {object} modIn instance of UrModule\n   *  @param {object} modOut instance of UrModule\n   */\n  constructor(mobj, opt) {\n    this.protocol = undefined;\n    this.modType = UrModule.modtype_enum[0];\n    this.id = UrModule.id_counter++;\n    this.manageFork = this.manageFork.bind(this);\n    const { input, output, name } = opt || {};\n    if (typeof name === 'string') this.setName(name);\n    //\n    LOG(`UrModule '${u_modname(this)}' constructing`);\n    //\n    if (mobj instanceof ChildProcess) {\n      this.modType = 'fork';\n      this.modObj = mobj;\n      this.manageFork();\n    } else if (u_is_stream(mobj)) {\n      // placeholder test for stream\n      this.modType = 'stream';\n    } else if (mobj.HandleMessage && mobj.Call) {\n      // placeholder test for ur messager\n      this.modType = 'urnet';\n    } else if (mobj instanceof EventEmitter) {\n      // placeholder test for eventEmitters\n      this.modType = 'event';\n    } else {\n      this.error = 'UrModule(): not an eventEmitter, process, or stream';\n      console.log(this.error);\n      throw new Error(this.error);\n    }\n    LOG('linking');\n    this.linkModules(input, output);\n    LOG('*** TODO *** process running goes here');\n  }\n\n  /** set the name of the module */\n  setName(name) {\n    if (typeof name !== 'string')\n      throw new Error('UrModule.setName(): name must be a string');\n    this.modName = name;\n  }\n\n  /** set up the handler for a child process that is compatible with\n   *  the UrModule interface.\n   */\n  manageFork() {\n    if (this.modObj === undefined) throw new Error('manageFork(): modObj undefined');\n    // (1) set up message handler\n    this.modObj.on('message', msg => {\n      LOG(`[${u_modname(this)}] DATAEX:`, msg);\n\n      const { dataex, data } = msg;\n      if (dataex === '_CONFIG_ACK') {\n        const { protocol } = data;\n        if (typeof protocol === 'string') {\n          this.protocol = protocol;\n          // activate connections set on startup\n          this.activateInput();\n          this.activateOutput();\n        }\n      }\n    });\n    // initiate configuration\n    this.modObj.send({ dataex: '_CONFIG_REQ', data: {} });\n  }\n\n  /** initializes datalink for connected modules. it's called\n   *  by the constructor implictly.\n   */\n  linkModules(modIn, modOut) {\n    if (this.modIn !== undefined || this.modOut !== undefined) {\n      this.error = 'UrModule.linkModules(): already linked';\n      throw new Error(this.error);\n    }\n    if (modIn !== undefined) {\n      if (modIn instanceof UrModule) {\n        this.modIn = modIn;\n      } else {\n        this.error = 'UrModule.connect(): invalid modIn';\n        throw new Error(this.error);\n      }\n    }\n    if (modOut !== undefined) {\n      if (modOut instanceof UrModule) {\n        this.modOut = modOut;\n      } else {\n        this.error = 'UrModule.connect(): invalid modOut';\n        throw new Error(this.error);\n      }\n    }\n  }\n\n  /** the input modules are a data source, so we expect to\n   *  receive data messages as well as handshake information.\n   *  Uses URDEX protocol: expects 'DATA' message\n   */\n  activateInput() {\n    this.modIn.on('message', msg => {\n      const { dataex, data } = msg;\n      // handler of data and control messages from upstream module\n      switch (dataex) {\n        case 'DATA':\n          this.bufferInput(data);\n          break;\n        default:\n          LOG('unhandled input dataex:', dataex);\n          break;\n      }\n    });\n    LOG('awaiting input');\n  }\n\n  /** the output modules will communicate their status back\n   *  to this module, providing events to signal what's going\n   *  on.\n   *  Uses URDEX protocol\n   */\n  activateOutput() {\n    LOG('connecting to output module');\n\n    // handler of control messages from downstream module\n    // note difference between stream and child process events\n    // child uses 'message'\n    this.modOut.on('message', msg => {\n      const { dataex, data } = msg;\n      switch (dataex) {\n        case 'exit':\n          break;\n        default:\n          LOG('unknown output dataex:', dataex);\n          break;\n      }\n    });\n  }\n\n  /** URDEX PROTOCOL *********************************************************/\n\n  /** used to buffer input data as it is received, but not processed. Each\n   *  chunk of data is of whatever modType is to be expected from the upstream\n   *  module.\n   *  @param {object} data the data to be buffered\n   */\n  bufferInput(data = {}) {\n    this.inputBuffer.push(data);\n    if (this.inputBuffer.length > UrModule.buffer_size) {\n      this.error = 'overflow';\n    }\n  }\n  /** retrieve buffered data one chunk at a time */\n  getInputData() {\n    if (this.inputBuffer.length === 0) {\n      this.error = 'underflow';\n      return undefined;\n    }\n    this.error = '';\n    return this.inputBuffer.shift();\n  }\n}\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst u_is_stream = obj =>\n  obj instanceof Readable ||\n  obj instanceof Writable ||\n  obj instanceof Duplex ||\n  obj instanceof Transform;\n\nconst u_modname = instance => instance.modName || instance.id;\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default UrModule;\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  node server environment is mirror of node builder environment, and is \n  designed to be initialized by @server.mts\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { join, normalize } from 'node:path';\nimport { DirExists } from './files.mts';\n\n/// CONSTANTS /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - -\nconst DBG = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  - - - -\nlet ROOT: string = ''; // root of the project\nlet DIR_PUBLIC: string; // path to PUBLIC directory for webapp\nlet DIR_UR: string; // path to _ur directory\nlet DIR_UR_DIST: string; // path to browser client code\nlet DIR_BDL_BROWSER: string; // path to node server code\nlet DIR_BDL_NODE: string; // path to _ur/dist directory for library out\nlet DIR_UR_ADDS: string; // path to _ur_mod directory\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an absolute path string from root-relative path */\nconst u_path = (path = '') => {\n  if (ROOT === '') throw new Error('SetRoot() must be called');\n  if (path.length === 0) return ROOT;\n  path = normalize(join(ROOT, path));\n  if (path.endsWith('/')) path = path.slice(0, -1);\n  return path;\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** remove ROOT prefix to return shortname */\nconst u_short = path => {\n  if (path.startsWith(ROOT)) return path.slice(ROOT.length);\n  return path;\n};\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Because we can't use __dirname in ESM or or conditionally run code without\n *  esbuild complaining about it, require external setting from the native\n *  environment.\n */\nfunction SetRootPaths(path: string) {\n  if (ROOT.length > 0) return GetPaths();\n  if (DirExists(path)) {\n    ROOT = path;\n    DIR_PUBLIC = u_path('/public');\n    DIR_UR = u_path('/_ur');\n    DIR_UR_DIST = u_path('/_ur/_dist');\n    DIR_BDL_BROWSER = u_path('/_ur/browser-client');\n    DIR_BDL_NODE = u_path('/_ur/node-server');\n    DIR_UR_ADDS = u_path('/_ur_addons');\n    if (DBG) {\n      console.log(DIR_PUBLIC);\n      console.log(DIR_UR);\n      console.log(DIR_UR_DIST);\n      console.log(DIR_BDL_BROWSER);\n      console.log(DIR_BDL_NODE);\n      console.log(DIR_UR_ADDS);\n    }\n    return GetPaths();\n  }\n  console.log(`SetRoot: ${path} does not exist`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return object with all current paths defined */\nfunction GetPaths() {\n  if (ROOT === '') throw new Error('GetPath: SetRoot() has to be called prior');\n  return {\n    ROOT,\n    DIR_PUBLIC,\n    DIR_UR,\n    DIR_BDL_BROWSER,\n    DIR_BDL_NODE,\n    DIR_UR_DIST,\n    DIR_UR_ADDS\n  };\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // API METHODS\n  SetRootPaths,\n  GetPaths,\n  // UTILITY METHODS\n  DirExists,\n  u_path as MakePath,\n  u_short as ShortPath,\n  // CONSTANTS\n  ROOT,\n  DIR_PUBLIC,\n  DIR_UR,\n  DIR_BDL_BROWSER,\n  DIR_BDL_NODE,\n  DIR_UR_DIST,\n  DIR_UR_ADDS\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  placeholder appserver library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { watch } from 'chokidar';\nimport express from 'express';\nimport { makeTerminalOut } from '../common/util-prompts.js';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM = makeTerminalOut('UR', 'TagBlue');\n\n/// WEBSERVER STUFF ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet APP_OUT = [];\nconst GetAppOut = () => APP_OUT.join('\\n');\nconst WriteAppOut = msg => APP_OUT.push(msg);\nconst ClearAppOut = () => (APP_OUT = []);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction StartAppServer() {\n  const app = express();\n  app.get('/', (req, res) => {\n    let text = GetAppOut();\n    res.send(`<pre>${text}</pre>`);\n  });\n  const server = app.listen(3000, () => {\n    TERM('Example app listening on port 3000!');\n  });\n  // close express app on process exit\n  process.on('exit', () => {\n    TERM('exiting express app');\n    server.close();\n  });\n  // close express app on ctrl-c event\n  process.on('SIGINT', () => {\n    console.log('exiting express app');\n    server.close(err => {\n      if (err) {\n        TERM.error(err);\n        process.exit(1);\n      }\n      process.exit();\n    });\n  });\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction Watch() {\n  /** watch for changes to path **/\n  const watcher = watch('./_ur/**');\n  watcher.on('change', path => {\n    TERM('watcher: path changed', path);\n    // proc_peggy.send('test');\n  });\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nexport {\n  StartAppServer,\n  Watch,\n  //\n  GetAppOut,\n  WriteAppOut,\n  ClearAppOut\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  UR PROCESS UTILITIES\n\n  command line utilities for managing ur processes\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport { makeTerminalOut } from '../common/util-prompts.js';\nimport process from 'node:process';\nimport PATH from 'node:path';\nconst LOG = makeTerminalOut('PROCESS', 'TagGreen');\nimport * as FILE from './files.mts';\n\n/// SUPPORT METHODS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** break string of form 'addon' or 'addon/@entry' into parts\n *  addonName and entryName (no extension)\n */\nfunction m_DecodeAddonName(shortPath: string): UR_ResObj {\n  let addonName, entryName;\n  // required argument\n  if (typeof shortPath !== 'string') {\n    LOG('error: arg must be a string path not', typeof shortPath);\n    return {};\n  }\n  // handle modname and modname/@entry\n  const pathbits = shortPath.split('@');\n  if (pathbits.length === 2) {\n    addonName = pathbits[0];\n    entryName = pathbits[1];\n  } else if (pathbits.length === 1) {\n    addonName = shortPath;\n  } else return { err: `error: '${shortPath}' has too many '@'` };\n\n  // make sure entryJS is a string or undefined\n  if (entryName !== undefined && typeof entryName !== 'string')\n    return { err: `error: can't parse @entryname` };\n\n  // double-check entry has leading @ if it's a string\n  if (entryName) {\n    if (entryName.indexOf('.') !== -1)\n      return { err: `error: entryName '${entryName}' must not contain '.'` };\n  }\n  // restore @ sign to entryName\n  if (entryName !== undefined) entryName = `@${entryName}`;\n  // return found addon\n  return { addonName, entryName };\n}\n\n/// ADDON METHODS /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** decode the addon arguments into useful names\n *  context: called from the addon script forked by launcher, so the\n *  arguments are different from the ones used by ValidateAddon()\n */\nfunction DecodeAddonArgs(argv: string[]): string[] {\n  let [\n    ,\n    a_enp, // abs path to entry script (e.g. launched entrypoint)\n    addonName, // passed addon name from launcher script\n    ...args // passed parameters from launcher script\n  ] = argv || process.argv; // default to process.argv if no args provided\n  //\n  const addonScript = PATH.basename(a_enp, PATH.extname(a_enp));\n  return [\n    addonScript, // script name of entry point\n    addonName, // passed addon name (e.g. 'net')\n    ...args // passed arguments\n  ];\n}\n\n/// URCLI METHODS /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given an addonName or addonName/@entryName, return an object with\n *  addonName, entryName, and entryFile and reconcile with addon directory\n *  context: called from the urcli launcher script\n */\nfunction ValidateAddon(addon: string): UR_ResObj {\n  const ADDONS = PATH.join(FILE.DetectedRootDir(), '_ur_addons');\n  if (!FILE.DirExists(ADDONS)) {\n    return { err: `directory ${ADDONS} does not exist` };\n  }\n  // get list of valid addon subdirs\n  const f_dir = item => !(item.startsWith('_') || item === 'node_modules');\n  const a_dirs = FILE.Subdirs(ADDONS).filter(f_dir);\n  // parse the addon name\n  let { addonName, entryName, err } = m_DecodeAddonName(addon);\n  if (err) return { err };\n\n  if (!a_dirs.includes(addonName))\n    return {\n      err: `error: addon '${addonName}' not found in ${ADDONS} directory`\n    };\n\n  // scan for selected add on entry files\n  const addon_dir = PATH.join(ADDONS, addonName);\n  const a_files = FILE.Files(addon_dir);\n  if (!a_files) {\n    return { err: `error: addon '${addonName}' directory has no files` };\n  }\n  const entryFiles = a_files.filter(item => item.startsWith('@'));\n  if (entryFiles.length === 0) {\n    return { err: `error: addon '${addonName}' has no @entryfiles` };\n  }\n  let entryFile;\n  // 1. was it just the addon name provided?\n  if (!entryName) {\n    if (entryFiles.length > 0) {\n      entryFile = entryFiles[0];\n      entryName = PATH.basename(entryFile, PATH.extname(entryFile));\n      return {\n        addonName,\n        entryName,\n        entryFile,\n        entryFiles\n      };\n    }\n    return { err: `addon '${addonName}' has no @entry files` };\n  }\n  // 2. was an entryName provided? Check that it exists\n  const regex = new RegExp(`${entryName}\\\\.[^\\\\.]+$`, 'i');\n  entryFile = entryFiles.find(filename => regex.test(filename));\n  if (!entryFile) {\n    return { err: `error: entry '${entryName}' not found in '${addonName}' addon` };\n  }\n  return {\n    addonName,\n    entryName,\n    entryFile,\n    entryFiles\n  };\n}\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  DecodeAddonArgs, // given process.argv, return useful names\n  ValidateAddon // given an addon name, return addonName, entryName, entryFile\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Operation Sequencer\n\n  A simple sequencer that is initialized with TOpNode objects:\n  { name, data? } one after the other with addOp(). \n\n  The sequencer can be started, stopped, and moved forward and backward, \n  and can notify subscribers when the current operation changes.\n\n  usage:\n\n  const sequencer = new OpSequencer('MY SEQUENCER'); // unique UC name\n  sequencer.addOp('op1', { ... });\n  sequencer.addOp('op2', { ... });\n  sequencer.subscribe('op1', (newOp, oldOp) => { ... });\n  const op = sequencer.start();\n  while (op) op = sequencer.next();\n  sequencer.dispose();\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES /////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TOpSeqMap = Map<string, OpSequencer>;\ntype TOpChangeFunc = (newOp: TOpNode, oldOp: TOpNode, ops?: OpSequencer) => void;\ntype TDataObj = { [key: string]: any };\ntype TOpNode = {\n  data: TDataObj;\n  _seqName?: string;\n  _opName?: string;\n  _opIndex?: number;\n};\ntype TNodeOptions = {\n  mutable?: boolean; // data is frozen by default\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst OPSEQS: TOpSeqMap = new Map(); // lookup table of operation sequencers\n\n/// HELPER FUNCTIONS //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateSeqName(sn: string) {\n  const fn = 'm_ValidateSeqName';\n  const pcErr = 'name must be PascalCase string';\n  if (sn === '') throw Error(`${fn}: ${pcErr}`);\n  if (sn === undefined) throw Error(`${fn}: ${pcErr}`);\n  if (typeof sn !== 'string') throw Error(`${fn}: ${pcErr}`);\n  if (sn !== sn[0].toUpperCase() + sn.slice(1)) throw Error(`${fn}: ${pcErr}`);\n  if (sn.trim() !== sn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateActiveSeq(seq: OpSequencer) {\n  if (seq instanceof OpSequencer) {\n    if (seq._disposed) throw Error(`sequencer ${seq.seqName} is disposed`);\n    else return;\n  }\n  throw Error('not a sequence instance or undefined');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateNodeName(nn: string) {\n  const fn = 'm_ValidateNodeName';\n  if (nn === '') throw Error(`${fn}: name must be lc string`);\n  if (nn === undefined) throw Error(`${fn}: name must be lc string`);\n  if (typeof nn !== 'string') throw Error(`${fn}: name must be lc string`);\n  if (nn !== nn.toLowerCase()) throw Error(`${fn}: name must be lc`);\n  if (nn.trim() !== nn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass OpSequencer {\n  ops: TOpNode[]; // array of operations\n  seqName: string; // sequencer name\n  lastOp: TOpNode; // last operation\n  currentOp: TOpNode; // current operation\n  opIndex: number; // current operation index\n  opsMap: Map<string, number>; // map opname to index in ops array\n  subs: Map<string, Set<TOpChangeFunc>>; // map opname to set of subscribers\n  _disposed: boolean; // true if disposed\n\n  constructor(seqName: string) {\n    m_ValidateSeqName(seqName);\n    seqName = seqName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (OPSEQS.has(seqName)) {\n      console.warn(\n        `(not an error) '${seqName}' construction duplicate, returning existing instance`\n      );\n      return OPSEQS.get(seqName);\n    }\n    // otherwise, create a new instance and save it\n    this.seqName = seqName;\n    this.ops = [];\n    this.opsMap = new Map();\n    this.opIndex = -1;\n    this.currentOp = null;\n    this.lastOp = null;\n    this.subs = new Map();\n    this._disposed = false;\n    OPSEQS.set(seqName, this);\n  }\n\n  /* --- add nodes --- */\n\n  /** given nodeName and a source TOpNode, add a clone of the source node to the sequencer */\n  addOp(name: string, data: TDataObj, opt?: TNodeOptions): TOpNode {\n    const fn = 'addOp';\n    //\n    if (data === undefined) throw Error(`${fn}: arg2 must be TOpNode`);\n    if (typeof name !== 'string') throw Error(`${fn}: arg1 must be name:string`);\n    if (typeof data._name === 'string') throw Error(`${fn}: node ${name} reused`);\n    if (data._index !== undefined) throw Error(`${fn}: node ${name} reused`);\n    //\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    //\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.hasOp(name)) throw Error(`${fn}: node '${name}' already exists`);\n    //\n    const index = this.ops.length;\n    this.opsMap.set(name, index); // save lookup index by name\n    const newData = { ...data }; // copy of user data\n    if (opt?.mutable) Object.freeze(newData); // default is frozen\n    const newNode: TOpNode = {\n      _opIndex: index,\n      _seqName: this.seqName,\n      _opName: name,\n      data: newData\n    };\n    this.ops.push(newNode);\n    return newNode;\n  }\n\n  deleteOp(name: string): void {\n    const fn = 'deleteOp';\n    console.error(`${fn}: not implemented by design`);\n  }\n\n  /* --- access operations --- */\n\n  data(key?: string): TDataObj {\n    m_ValidateActiveSeq(this);\n    if (typeof key === 'string') return this.currentOp.data[key];\n    return this.currentOp.data;\n  }\n\n  length(): number {\n    m_ValidateActiveSeq(this);\n    return this.ops.length;\n  }\n\n  /* --- sequencer operations --- */\n\n  start(): TOpNode {\n    const fn = 'start';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.ops.length === 0) throw Error(`${fn}: no operations to run`);\n    this.opIndex = 0;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  current(): TOpNode {\n    const fn = 'current';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  stop(): TOpNode {\n    const fn = 'stop';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error('stop: sequencer not started');\n    this.opIndex = -1;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  next(): TOpNode {\n    const fn = 'next';\n    if (this.opIndex === -1) return this.start();\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === this.ops.length - 1) return undefined;\n    ++this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  previous(): TOpNode {\n    const fn = 'previous';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    if (this.opIndex === 0) return undefined;\n    --this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  /* --- node events --- */\n\n  subscribe(opName: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    if (!this.subs.has(opName)) this.subs.set(opName, new Set());\n    this.subs.get(opName).add(subf);\n  }\n\n  unsubscribe(name: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    if (!this.hasOp(name)) throw Error(`${fn}: node '${name}' does not exist`);\n    const subs = this.subs.get(name);\n    if (subs.has(subf)) subs.delete(subf);\n  }\n\n  _update() {\n    const fn = '_update';\n    m_ValidateActiveSeq(this);\n    this.lastOp = this.currentOp;\n    this.currentOp = this.ops[this.opIndex];\n  }\n\n  _notifyChange(): void {\n    const fn = '_notifyChange';\n    m_ValidateActiveSeq(this);\n    const subs = this.subs.get(this.currentOp._opName);\n    if (subs) subs.forEach(subf => subf(this.currentOp, this.lastOp, this));\n  }\n\n  /* --- node utilities --- */\n\n  hasOp(opName: string): boolean {\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    return this.ops.some(op => op._opName === opName);\n  }\n\n  matchOp(opName: string): boolean {\n    const fn = 'matchOp';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    return opName === this.ops[this.opIndex]._opName;\n  }\n\n  /** remove all nodes and subscribers */\n  dispose(): void {\n    OpSequencer.DeleteSequencer(this.seqName);\n  }\n\n  /* --- static utilities --- */\n\n  static GetSequencer(seqName: string): OpSequencer {\n    m_ValidateSeqName(seqName);\n    return OPSEQS.get(seqName);\n  }\n\n  static DeleteSequencer(seqName: string): void {\n    const seq = OpSequencer.GetSequencer(seqName);\n    seq.opsMap.clear();\n    seq.subs.forEach(subs => subs.clear());\n    seq.ops.length = 0;\n    seq._disposed = true;\n    OPSEQS.delete(seqName);\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default OpSequencer;\nexport type { TOpNode, TOpChangeFunc };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS State Manager Class\n  ported from GEMSTEP circa 2021\n\n  For use by modular application core features that require a centralized\n  state object that can be shared between modules. It manages named groups\n  of flattened state (react compatible) that are not allowed to have\n  overlapping property names across any group. This is to prevent lazy\n  reuse of property names in different parts of the app.\n\n  In general, methods that begin with _ are the tricky ones that are used\n  internally by an \"appcore\" module that is the single source of initialization\n  and truth. \n\n  DATA STRUCTURES\n\n  * vmStateEvent is an object with event-specific properties. When sent\n    to subscribers, it contains a groupName property matching the name of\n    the StateManager instance (e.g. LOCALE). This is not required (or even\n    settable) when using SendState( vmStateEvent )\n  * The difference between vmStateEvent and vmState is that the latter is\n    the complete state object, whereas the event has the same shape but\n    only includes the changed properties\n\n  SIMPLE EXAMPLE\n\n  // in managing appcore module\n  const STORE = new StateMgr('ScriptWizard');\n  STORE._initializeState({\n    prop1: 'value1',\n    prop2: 'value2'\n  });\n  const { prop1, prop2 } = STORE.State();\n\n  // in read-only module\n  const OTHER = StatMgr.GetStateManager('ScriptWizard');\n  const { prop1, prop2 } = OTHER.State();\n  \n  API REFERENCE\n\n  State: groupName => TStateObj;\n  SendState: TStateObj => void;\n  subscribeState: TStateChangeFunc => void;\n  unsubscribeState: TStateChangeFunc => void;\n  queueEffect: TEffectFunc => void;\n\n  INTERNAL API for APPCORE MANAGERS ONLY\n\n  _initializeState: TStateObj => void;\n  _setState: TStateObj => void;\n  _insertStateEvent: (TStateObj, TEffectFunc) => void;\n  _interceptState: TTapFunc => void;\n  _isValidState: TStateObj => boolean;\n  _mergeState: TStateObj => TStateObj;\n  _notifySubs: TStateObj => void;\n  _enqueue: TQueuedAction => void;\n  _dequeue: void => void;\n  _doEffect: void => void;\n\n  STATIC API\n  \n  GetStateManager: groupName => StateMgr;\n  GetStateData: groupName => TStateObj;\n  GetInstance: groupName => StateMgr;\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TStateObj = { [key: string]: any };\ntype TGroupName = string; // must be uppercase\ntype TPropName = string; // must be lowercase\ntype TGroupMap = Map<TGroupName, StateMgr>; // group name --> class instance\ntype TUsedProps = Map<TPropName, TGroupName>; // unique prop --> owning group\ntype TStateChangeFunc = (newState: TStateObj, curState: TStateObj) => void;\ntype TEffectFunc = () => void;\ntype TTapFunc = (state: TStateObj) => void;\ntype TQueuedAction = { stateEvent: TStateObj; callback: Function };\ninterface IStateMgr {\n  State: (key: string) => TStateObj;\n  SendState: (vmStateEvent: TStateObj, callback: Function) => void;\n  subscribeState: (subFunc: TStateChangeFunc) => void;\n  unsubscribeState: (subFunc: TStateChangeFunc) => void;\n  queueEffect: (effectFunc: TEffectFunc) => void;\n  _initializeState: (stateObj: TStateObj) => void;\n  _setState: (vmState: TStateObj) => void;\n  _interceptState: (tapFunc: TTapFunc) => void;\n  _insertStateEvent: (stateEvent: TStateObj, callback: TEffectFunc) => void;\n  _isValidState: (stateObj: TStateObj) => boolean;\n  _mergeState: (stateObj: TStateObj) => TStateObj;\n  _notifySubs: (stateObj: TStateObj) => void;\n  _enqueue: (action: TQueuedAction) => void;\n  _dequeue: () => void;\n  _doEffect: () => void;\n}\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst VM_STATE: TStateObj = {}; // global viewstate\nconst GROUPS: TGroupMap = new Map(); // lookup table of state managers\nconst USED_PROPS: TUsedProps = new Map(); // owner of registered properties\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass StateMgr {\n  name: string; // the name of this state group\n  init: boolean; // true if _initializeState has been called\n  subs: Set<TStateChangeFunc>;\n  queue: any[]; // queued state changes\n  taps: TTapFunc[]; // queued state interceptor hooks\n  effects: TEffectFunc[]; // queued side effects\n\n  /// CONSTRUCTOR /////////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  constructor(groupName: TGroupName) {\n    if (typeof groupName !== 'string') throw Error('groupName must be a string');\n    groupName = groupName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (GROUPS.has(groupName)) {\n      console.warn(\n        `(not an error) '${groupName}' construction duplicate, returning existing instance`\n      );\n      return GROUPS.get(groupName);\n    }\n    // otherwise create a new instance and save it\n    this.name = groupName;\n    this.init = false;\n    this.subs = new Set();\n    this.queue = [];\n    this.taps = [];\n    this.effects = [];\n    VM_STATE[this.name] = {};\n    // bind 'this' for use with async code\n    // if you don't do this, events will probably not have instance context\n    this.state = this.state.bind(this);\n    this.sendState = this.sendState.bind(this);\n    this.subscribeState = this.subscribeState.bind(this);\n    this.unsubscribeState = this.unsubscribeState.bind(this);\n    this.queueEffect = this.queueEffect.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this._setState = this._setState.bind(this);\n    this._insertStateEvent = this._insertStateEvent.bind(this);\n    this._interceptState = this._interceptState.bind(this);\n    this._isValidState = this._isValidState.bind(this);\n    this._mergeState = this._mergeState.bind(this);\n    this._notifySubs = this._notifySubs.bind(this);\n    this._enqueue = this._enqueue.bind(this);\n    this._dequeue = this._dequeue.bind(this);\n    this._doEffect = this._doEffect.bind(this);\n    // save the instance\n    GROUPS.set(this.name, this);\n  }\n\n  /// MAIN CLASS METHODS //////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a COPY of the current clonedEvent */\n  state(key: string): TStateObj {\n    // const state = { ...VM_STATE[this.name] };\n    const state = this._derefProps({ ...VM_STATE[this.name] });\n    if (typeof key === 'string' && key.length > 0) return state[key];\n    return state;\n  }\n\n  /** Handle a clonedEvent update from a subscribing module. The incoming\n   *  vmstateEvent is checked against the master state object to ensure it\n   *  contains valid keys. Any filter functions are allowed to mutate a copy of\n   *  the incoming state event.\n   *  @param {object} vmStateEvent - object with group-specific props\n   */\n  sendState(vmStateEvent: TStateObj, callback: Function) {\n    if (this._isValidState(vmStateEvent)) {\n      const clonedEvent = this._cloneStateObject(vmStateEvent);\n      this.taps.forEach(tap => tap(clonedEvent));\n      // queue the action for processing\n      const action = { stateEvent: clonedEvent, callback };\n      this._enqueue(action);\n    } else throw Error('SendState: invalid vmState update received, got:');\n  }\n\n  /** Subscribe to state. The subscriber function looks like:\n   *  ( vmStateEvent, currentState ) => void\n   */\n  subscribeState(subFunc: TStateChangeFunc) {\n    if (typeof subFunc !== 'function') throw Error('subscriber must be function');\n    if (this.subs.has(subFunc)) console.warn('duplicate subscriber function');\n    this.subs.add(subFunc);\n  }\n\n  /** Unsubscribe state */\n  unsubscribeState(subFunc: TStateChangeFunc) {\n    if (!this.subs.delete(subFunc))\n      console.warn('function not subscribed for', this.name);\n  }\n\n  /** When executing a side effect from a component, use this method to\n   *  hold it until after all state updates have completed, so the DOM\n   *  is stable\n   */\n  queueEffect(effectFunc: TEffectFunc) {\n    if (typeof effectFunc !== 'function') throw Error('effect must be a function');\n    this.effects.push(effectFunc);\n    this._doEffect();\n  }\n\n  /// CLASS HELPER METHODS ////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Set the state object directly. used to initialize the state from within\n   *  an appcore module. skips state validation because the VM_STATE entry\n   *  is an empty object\n   */\n  _initializeState(stateObj: TStateObj) {\n    // only allow this once per instance\n    if (this.init)\n      throw Error(`_initializeState: store '${this.name}' already initialized`);\n    // validate stateObj\n    Object.keys(stateObj).forEach(k => {\n      // must be all lowercase\n      if (k.toLowerCase() !== k)\n        throw Error(`_initializeState: props must be lowercase, not '${k}'`);\n      // must not contain undefined keys\n      if (stateObj[k] === undefined)\n        throw Error(\n          `_initializeState: prop '${k}' value can't be undefined (use null instead)`\n        );\n    });\n    // check that VM_STATE entry is valid (should be created by constructor)\n    if (VM_STATE[this.name]) {\n      Object.keys(stateObj).forEach(k => {\n        // skip the viewStateEvent key\n        if (k === '_group') return;\n        // check for duplicate keys. they must be unique across ALL state groups\n        const assTo = USED_PROPS.get(k);\n        if (assTo !== undefined) throw Error(`${k} already assigned to ${assTo}`);\n        // register the property name so it can't be used by another manager\n        USED_PROPS.set(k, this.name);\n      });\n      VM_STATE[this.name] = stateObj; // initialize!\n      this.init = true;\n    } else throw Error(`${this.name} does't exist in VM_STATE`);\n  }\n\n  /** In some cases, we want to update state but not trigger subscribers\n   *  related to it. Alias for _mergeState()\n   */\n  _setState(vmState: TStateObj) {\n    this._mergeState(vmState);\n  }\n\n  /** When SendState() is invoked, give the instance manager a change to\n   *  inspect the incoming state and do a side-effect and/or a filter.\n   *  They will run in order of interceptor registration\n   *  @param {function} tapFunc - receive stateEvent to mutate or act-on\n   */\n  _interceptState(tapFunc: TTapFunc) {\n    if (typeof tapFunc !== 'function') throw Error(`'${tapFunc}' is not a function`);\n    this.taps.push(tapFunc);\n  }\n\n  /** Allow synthesis of a state event by adding to queue without\n   *  immediately executing it. For use by _interceptState only.\n   *  Creates an action { stateObj, callback }\n   */\n  _insertStateEvent(stateEvent: TStateObj, callback: TEffectFunc) {\n    this._enqueue({ stateEvent, callback });\n  }\n\n  /** Return true if the event object conforms to expectations (see below) */\n  _isValidState(stateObj: TStateObj) {\n    // test 1 - is this event handled this manager instance?\n    // const grp = stateObj._group.trim().toUpperCase();\n    // if (grp !== this.name) return false;\n\n    // test 2 - any keys must already be defined in the store to\n    // avoid typo-based errors and other such crapiness\n    const curState = VM_STATE[this.name];\n    let keysOk = true;\n    Object.keys(stateObj).forEach(k => {\n      const keyTest = keysOk && curState[k] !== undefined;\n      if (keyTest === false) console.warn(`isValidState: '${k}' not a valid key`);\n      keysOk = keysOk && keyTest;\n    });\n    return keysOk;\n  }\n\n  /** Scan the object properties for arrays, and mutate with a new array.\n   *  In the case of an array containing references, the references will still\n   *  be the same but the array itself will be different\n   */\n  _derefProps(stateObj: TStateObj) {\n    Object.keys(stateObj).forEach(k => {\n      if (Array.isArray(stateObj[k])) stateObj[k] = [...stateObj[k]];\n    });\n    return stateObj;\n  }\n\n  /** Utility method to clone state event. It handles array cloning as well but\n   *  is otherwise a shallow clone\n   */\n  _cloneStateObject(stateObj: TStateObj) {\n    const clone = this._derefProps({ ...stateObj });\n    return clone;\n  }\n\n  /** Take a clonedEvent event object and update the VM_STATE entry with\n   *  its property values. This creates an entirely new state object\n   */\n  _mergeState(stateObj: TStateObj) {\n    if (!this._isValidState(stateObj)) return undefined;\n    // first make a new state object with copies of arrays\n    const newState = this._derefProps({\n      ...VM_STATE[this.name],\n      ...stateObj\n    });\n    // set the state\n    VM_STATE[this.name] = newState;\n    // also return the new state object\n    return newState;\n  }\n\n  /** Forward the event to everyone. The vmStateEvent object contains\n   *  properties that changed only, appending a 'stateGroup' identifier\n   *  that tells you who sent it. Sends a read-only copy.\n   */\n  _notifySubs(stateObj: TStateObj) {\n    // fire notification in the next event cycle to make sure\n    // that prior unsubscribes took effect\n    setTimeout(() => {\n      const subs = [...this.subs.values()];\n      stateObj.stateGroup = this.name; // mixed-case names reserved by system\n      // also include the total state\n      const currentState = this._derefProps({ ...VM_STATE[this.name] });\n      subs.forEach(sub => sub(stateObj, currentState));\n    });\n  }\n\n  /** Placeholder queueing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _enqueue(action: TQueuedAction) {\n    const { stateEvent, callback } = action;\n    if (!this._isValidState(stateEvent)) {\n      console.warn('bad vmStateEvent', stateEvent);\n      return;\n    }\n    if (callback && typeof callback !== 'function') {\n      console.warn('call must be function, not', typeof callback, callback);\n      return;\n    }\n    this.queue.push(action);\n    // placeholder processes immediately\n    this._dequeue();\n  }\n\n  /** Placeholder dequeing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _dequeue() {\n    const callbacks = [];\n    // iterate over all actions in queue\n    let action = this.queue.shift();\n    while (action !== undefined) {\n      const { vmStateEvent, callback } = action;\n      this._mergeState(vmStateEvent); // merge partial state into state\n      this._notifySubs(vmStateEvent); // send partial state to subs\n      if (typeof callback === 'function') callbacks.push(callback);\n      // get next action in queue\n      action = this.queue.shift();\n    }\n    // issues callbacks after ALL actions have completed\n    callbacks.forEach(f => f());\n    this._doEffect();\n  }\n\n  /** execute effect functions that have been queued, generally if there\n   *  are no pending state changes\n   */\n  _doEffect() {\n    if (this.queue.length > 0) return;\n    setTimeout(() => {\n      let effect = this.effects.shift();\n      while (effect !== undefined) {\n        effect();\n        effect = this.effects.shift();\n      }\n    });\n  }\n\n  /// STATIC METHODS //////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a state manager instance if it exists, undefined if not. Throws\n   *  errors if there are issues with the name */\n  static GetStateManager(groupName: string): StateMgr {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    return GROUPS[bucket];\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a locked copy of the state of a particular named state group.\n   *  Unlike GetStateManager, this returns just the data object.\n   */\n  static GetStateData(groupName: string) {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    const state = VM_STATE[bucket];\n    if (!state) throw Error(`stateGroup ${bucket} is not defined`);\n\n    // create a read-only copy of state and set all its properties to\n    // unwriteable\n    const readOnlyState = { ...state };\n    for (const prop of Object.keys(readOnlyState)) {\n      Object.defineProperty(readOnlyState, prop, {\n        writable: false\n      });\n    }\n    return readOnlyState;\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a Stage Manager instance. This just hides the new operator that\n   *  purposefully always returns an instance of an existing group if it\n   *  already exists\n   */\n  static GetInstance(groupName: string) {\n    return new StateMgr(groupName);\n  }\n}\n\n/// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return a READ-ONLY object containing state for a particular group */\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default StateMgr;\nexport type { TStateObj, TGroupName, TStateChangeFunc, TEffectFunc };\nexport type { IStateMgr };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,2CAAAA,SAAA;AAyBA,QAAM,cAAc;AAAA;AAAA,MAElaAAa;AACnB,QAAM,aAAa;AAAA,MACjB,OAAO;AAAA;AAAA,MAEP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA;AAAA,MAEN,QAAQ,oCAAoC,UAAU;AAAA,MACtD,WAAW,oCAAoC,UAAU;AAAA,MACzD,WAAW,oCAAoC,UAAU;AAAA,MACzD,UAAU,oCAAoC,UAAU;AAAA,MACxD,SAAS,oCAAoC,UAAU;AAAA,MACvD,SAAS,oCAAoC,UAAU;AAAA,MACvD,WAAW,oCAAoC,UAAU;AAAA,MACzD,SAAS,oCAAoC,UAAU;AAAA,MACvD,SAAS,oCAAoC,UAAU;AAAA,MACvD,SAAS,oCAAoC,UAAU;AAAA;AAAA,MAEvD,UAAU,uCAAuC,UAAU;AAAA,MAC3D,aAAa,4CAA4C,UAAU;AAAA,MACnE,aAAa,sCAAsC,UAAU;AAAA,MAC7D,YAAY,4CAA4C,UAAU;AAAA,MAClE,WAAW,yCAAyC,UAAU;AAAA,MAC9D,WAAW,yCAAyC,UAAU;AAAA,MAC9D,aAAa,uCAAuC,UAAU;AAAA,MAC9D,WAAW,wCAAwC,UAAU;AAAA,IAC/D;AAgCA,gBAAY,WAAW,YAAY;AACnC,gBAAY,WAAW,YAAY;AACnC,gBAAY,WAAW,YAAY;AACnC,gBAAY,UAAU,YAAY;AAElC,gBAAY,YAAY,YAAY;AACpC,gBAAY,YAAY,YAAY;AACpC,gBAAY,cAAc,YAAY;AACtC,gBAAY,aAAa,YAAY;AAErC,gBAAY,QAAQ,YAAY;AAChC,gBAAY,WAAW,YAAY;AACnC,gBAAY,WAAW,YAAY;AAEnC,gBAAY,aAAa,YAAY;AACrC,gBAAY,eAAe,YAAY;AACvC,gBAAY,cAAc,YAAY;AACtC,gBAAY,aAAa,YAAY;AACrC,gBAAY,cAAc,YAAY;AAEtC,gBAAY,QAAQ,YAAY;AAEhC,gBAAY,WAAW,YAAY;AACnC,gBAAY,WAAW,YAAY;AACnC,gBAAY,YAAY,YAAY;AAEpC,eAAW,WAAW,yCAAyC,UAAU;AACzE,eAAW,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,IAKpB,UAAU;AACd,eAAW,UAAU,WAAW;AAEhC,eAAW,YAAY,WAAW;AAClC,eAAW,YAAY,WAAW;AAClC,eAAW,cAAc,WAAW;AACpC,eAAW,aAAa,WAAW;AAEnC,eAAW,QAAQ,wDAAwD,UAAU;AACrF,eAAW,WAAW,+CAA+C,UAAU;AAC/E,eAAW,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,IAKlB,UAAU;AACd,eAAW,aAAa,WAAW;AACnC,eAAW,eAAe,WAAW;AACrC,eAAW,cAAc,oCAAoC,UAAU;AACvE,eAAW,QAAQ,WAAW;AAC9B,eAAW,WAAW,WAAW;AACjC,eAAW,YAAY,WAAW;AAClC,eAAW,WAAW,+CAA+C,UAAU;AAI/E,IAAAA,QAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACvMA;AAAA,wCAAAC,SAAA;AASA,QAAM,UAAU,OAAO,WAAW;AAClC,QAAM,YACJ,CAAC,WACD,iEAAiE;AAAA,MAC/D,UAAU;AAAA,IACZ;AACF,QAAM,YAAY;AAClB,QAAM,EAAE,aAAa,WAAW,IAAI;AAEpC,QAAM,kBAAkB,UACpB,KACA;AACJ,QAAM,gBAAgB,UAClB,IAAI,SAAS,iBAAiB,GAAG,IACjC,IAAI,SAAS,kBAAkB,GAAG,GAAG;AAEzC,QAAM,gBAAgB;AAGtB,QAAM,aAAa,CAAC;AAMpB,QAAM,OAAO;AAGb,QAAM,cAAc;AAAA;AAAA,MAElB,MAAM,CAAC,MAAM,QAAQ;AAAA;AAAA,MAErB,UAAU,CAAC,MAAM,QAAQ;AAAA,MACzB,UAAU,CAAC,MAAM,QAAQ;AAAA;AAAA,MAEzB,KAAK,CAAC,MAAM,SAAS;AAAA,IACvB;AAKA,aAAS,UAAU,KAAK,UAAU,iBAAiB;AACjD,UAAI,MAAM,IAAI;AACd,YAAM,OAAO,OAAO,aAAa,GAAM;AACvC,UAAI;AAAS,eAAO,GAAG,IAAI,OAAO,SAAS,GAAG,CAAC;AAE/C,UAAI,YAAY;AAAG,eAAO,GAAG,GAAG;AAEhC,UAAI,OAAO;AAAS,cAAM,IAAI,OAAO,GAAG,OAAO;AAAA;AAC1C,cAAM,IAAI,OAAO,SAAS,IAAI;AACnC,aAAO,GAAG,GAAG;AAAA,IACf;AAGA,aAAS,kBAAkB,OAAO,QAAQ,eAAe;AACvD,UAAI,OAAO,UAAU;AAAU,cAAM,MAAM,6BAA6B;AACxE,cAAQ,MAAM,KAAK;AACnB,UAAI,UAAU;AAAI,cAAM,MAAM,8BAA8B;AAC5D,UAAI,aAAa,UAAU,cAAc;AACzC,UAAI,aAAa;AACjB,mBAAa,WAAW,KAAK,MAAM;AACnC,UAAI,CAAC;AAAY,qBAAa,UAAU,aAAa;AACrD,mBAAa,WAAW,KAAK,MAAM;AACnC,UAAI,CAAC;AACH,cAAM,MAAM,gBAAgB,KAAK,iCAAiC;AAEpE,kBAAY,KAAK,IAAI,CAAC,MAAM,KAAK;AACjC,aAAO;AAAA,IACT;AAQA,aAAS,cAAc,QAAQ,UAAU;AACvC,YAAM,aAAa,kBAAkB,QAAQ,QAAQ;AACrD,YAAM,CAAC,UAAU,MAAM,IAAI,YAAY,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,aAAa;AAC7E,YAAM,SAAS,WAAW,QAAQ;AAClC,YAAM,SAAS,WAAW,MAAM;AAChC,YAAM,QAAQ,UAAU;AACxB,YAAM,QAAQ,WAAW;AACzB,aAAO,CAAC,UAAU,OAAO,KAAK;AAAA,IAChC;AAKA,aAAS,iBAAiB,QAAQ,WAAW;AAC3C,YAAM,CAAC,KAAK,OAAO,KAAK,IAAI,cAAc,QAAQ,SAAS;AAG3D,UAAI,EAAE,OAAO;AAAU,eAAO,CAAC;AAC/B,aAAO,UACH,CAAC,GAAG,KAAK,GAAG,UAAU,MAAM,CAAC,GAAG,KAAK,KAAK,IAC1C,CAAC,KAAK,UAAU,MAAM,CAAC,OAAO,OAAO,KAAK;AAAA,IAChD;AAKA,aAAS,0BAA0B,QAAQ,WAAW,MAAM,CAAC,GAAG;AAC9D,YAAM,YAAY,IAAI,SAAS;AAC/B,YAAM,MAAM,IAAI,OAAO;AACvB,aAAO,UACH,CAAC,QAAQ,SAAS;AAChB,YAAI,SAAS;AAAW,iBAAO;AAC/B,YAAI,MAAM,YAAY,SAAS;AAC/B,YAAIC,QAAO,YAAY,SAAS;AAChC,YAAI,MAAM,YAAY;AACtB,YAAI,KAAK,UAAU,MAAM;AACzB,YAAI;AAAK,UAAAA,SAAQ,YAAY;AAC7B,gBAAQ,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAI,OAAO,GAAG,IAAI,GAAG,IAAI;AAAA,MACjE,IACA,CAAC,QAAQ,SAAS;AAChB,YAAI,SAAS;AAAW,iBAAO;AAC/B,YAAIA,QAAO,YAAY,SAAS;AAChC,YAAI,MAAM,WAAW;AACrB,YAAI,KAAK,UAAU,MAAM;AACzB,gBAAQ,IAAI,KAAK,EAAE,QAAQ,GAAG,IAAI,KAAKA,OAAM,GAAG,IAAI;AAAA,MACtD;AAAA,IACN;AAEA,aAAS,aAAa,IAAI;AACxB,YAAM,KAAK,SAAS,eAAe,EAAE;AACrC,UAAI,CAAC,IAAI;AACP,gBAAQ,IAAI,uBAAuB,EAAE,iBAAiB;AACtD,eAAO;AAAA,MACT;AACA,YAAM,OAAO,GAAG;AAChB,UAAI,SAAS,QAAW;AACtB,gBAAQ,IAAI,wBAAwB,EAAE,4BAA4B;AAClE,eAAO,CAAC;AAAA,MACV;AACA,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,aAAa;AACtB,aAAO,EAAE,SAAS,IAAI,KAAK;AAAA,IAC7B;AAEA,aAAS,kBAAkB,KAAK,YAAY,IAAI;AAC9C,YAAM,EAAE,SAAS,KAAK,IAAI,aAAa,EAAE;AACzC,UAAI,SAAS;AAAW,eAAO;AAE/B,UAAI,WAAW,WAAW,GAAG;AAC3B,gBAAQ,IAAI,4CAA4C,EAAE,GAAG;AAC7D,qBAAa,KAAK,MAAM,IAAI;AAAA,MAC9B;AAEA,UAAI,MAAM,WAAW,SAAS,GAAG;AAC/B,cAAM,QAAQ,MAAM,IAAI,WAAW;AACnC,iBAAS,IAAI,OAAO,IAAI,GAAG;AAAK,qBAAW,KAAK,EAAE;AAAA,MACpD;AACA,aAAO;AAAA,IACT;AAEA,aAAS,gBAAgB,MAAM,IAAI,YAAY,IAAI;AACjD,YAAM,EAAE,SAAS,KAAK,IAAI,aAAa,EAAE;AACzC,UAAI,CAAC;AAAM,eAAO;AAElB,iBAAW,KAAK,GAAG;AACnB,cAAQ,cAAc,WAAW,KAAK,IAAI;AAC1C,aAAO;AAAA,IACT;AAKA,aAAS,eAAe,MAAM,IAAI,YAAY,IAAI,MAAM,GAAG,MAAM,GAAG;AAClE,YAAM,EAAE,SAAS,KAAK,IAAI,aAAa,EAAE;AACzC,UAAI,CAAC;AAAS,eAAO;AACrB,UAAI,SAAS,QAAW;AACtB,gBAAQ,IAAI,wBAAwB,EAAE,4BAA4B;AAClE,eAAO;AAAA,MACT;AAEA,mBAAa,kBAAkB,KAAK,YAAY,EAAE;AAElD,UAAI,OAAO,WAAW,GAAG;AACzB,UAAI,SAAS,QAAW;AACtB,gBAAQ,IAAI,+CAA+C,GAAG,EAAE;AAChE,eAAO;AAAA,MACT;AAEA,UAAI,MAAM,IAAI,SAAS,KAAK,SAAS,IAAI,QAAQ;AAC/C,iBAAS,IAAI,GAAG,IAAI,MAAM,IAAI,SAAS,KAAK,QAAQ;AAAK,kBAAQ;AAAA,MACnE;AAEA,UAAI,KAAK,KAAK,OAAO,GAAG,GAAG;AAC3B,UAAI,KAAK,KAAK,OAAO,MAAM,IAAI,QAAQ,KAAK,UAAU,MAAM,IAAI,OAAO;AACvE,iBAAW,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE;AAElC,cAAQ,cAAc,WAAW,KAAK,IAAI;AAC1C,aAAO;AAAA,IACT;AAyBA,aAASC,oBAAmB,QAAQ,UAAU;AAC5C,UAAI,OAAO,WAAW,IAAI,KAAK,aAAa;AAAW,mBAAW;AAClE,UAAI,WAAW,iBAAiB,QAAQ,QAAQ;AAChD,UAAI,SAAS,WAAW;AAAG,eAAO,MAAM,CAAC;AACzC,UAAI;AAAW,mBAAW,CAAC,GAAG,MAAM,GAAG;AACvC,YAAM,IAAI,CAAC,QAAQ,SAAS,CAAC,GAAG,UAAU,KAAK,GAAG,IAAI;AACtD,QAAE,IAAI;AAAA,EAAK,aAAa;AACxB,aAAO;AAAA,IACT;AAGA,aAAS,mBAAmB,KAAK,IAAI;AACnC,YAAM,KAAK;AACX,YAAM,MAAM;AACZ,WAAK,SAAS,EAAE,GAAG,KAAK;AACxB,aAAO,CAAC,QAAQ,SAAS;AAAA,QACvB,KAAK,EAAE,KAAK,GAAG;AAAA,QACf,+BAA+B,EAAE;AAAA,QACjC,SAAS,EAAE,qBAAqB,GAAG;AAAA,QACnC,GAAG;AAAA,MACL;AAAA,IACF;AAGA,aAAS,qBAAqB,KAAK,IAAI;AACrC,YAAM,KAAK;AACX,YAAM,MAAM;AACZ,WAAK,QAAQ,EAAE,GAAG,KAAK;AACvB,aAAO,CAAC,QAAQ,SAAS;AAAA,QACvB,KAAK,EAAE,KAAK,GAAG;AAAA,QACf,+BAA+B,EAAE;AAAA,QACjC,SAAS,EAAE,qBAAqB,GAAG;AAAA,QACnC,GAAG;AAAA,MACL;AAAA,IACF;AAGA,aAAS,SAAS,IAAI,KAAK,mBAAmB;AAC5C,aAAO;AAAA,QACL,KAAK,EAAE;AAAA,QACP,+BAA+B,EAAE;AAAA,QACjC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,eAAe,KAAK,UAAU;AACrC,aAAO,iBAAiB,KAAK,QAAQ;AAAA,IACvC;AAMA,aAASC,iBAAgB,QAAQ,WAAW,eAAe;AACzD,YAAM,OAAO,0BAA0B,QAAQ,QAAQ;AACvD,WAAK,OAAO,0BAA0B,QAAQ,aAAa,EAAE,OAAO,SAAS,CAAC;AAC9E,WAAK,QAAQ,0BAA0B,QAAQ,UAAU,EAAE,OAAO,MAAM,CAAC;AACzE,WAAK,OAAO,0BAA0B,QAAQ,OAAO,EAAE,OAAO,MAAM,CAAC;AACrE,WAAK,OAAO,0BAA0B,QAAQ,SAAS,EAAE,OAAO,QAAQ,CAAC;AACzE,WAAK,OAAO,0BAA0B,QAAQ,WAAW,EAAE,KAAK,KAAK,CAAC;AACtE,WAAK,MAAM;AACX,WAAK,MAAM;AACX,WAAK,MAAM;AACX,aAAO;AAAA,IACT;AAIA,aAAS,gBAAgB,OAAO,MAAM,GAAG,MAAM,GAAG;AAChD,YAAM,MAAMD,oBAAmB,mBAAmB,KAAK;AACvD,UAAI,SAAS,CAAC;AACd,UAAI,OAAO,UAAU;AAAU,cAAM,MAAM,QAAQ;AACnD,UAAI,CAAC,SAAS,eAAe,KAAK,GAAG;AACnC,gBAAQ,KAAK,GAAG,IAAI,OAAO,KAAK,iBAAiB,CAAC;AAClD,eAAO;AAAA,UACL,OAAO,MAAM;AAAA,UAAC;AAAA,UACd,MAAM,MAAM;AAAA,UAAC;AAAA,UACb,OAAO,MAAM;AAAA,UAAC;AAAA,UACd,SAAS,MAAM;AAAA,UAAC;AAAA,QAClB;AAAA,MACF;AACA,UAAI;AACJ,UAAI,WAAW,KAAK,GAAG;AACrB,eAAO,WAAW,KAAK;AAAA,MACzB,OAAO;AACL,eAAO;AAAA,UACL,QAAQ,CAAC;AAAA,UACT,MAAM,CAAC,KAAK,IAAI,KAAK,IAAI,QAAQ;AAC/B,qBAAS,eAAe,KAAK,QAAQ,OAAO,GAAG,CAAC;AAAA,UAClD;AAAA,UACA,OAAO,SAAO;AACZ,qBAAS,gBAAgB,KAAK,QAAQ,KAAK;AAAA,UAC7C;AAAA,UACA,OAAO,CAAC,WAAW,GAAG,SAAS,OAAO,WAAW;AAC/C,mBAAO,OAAO,UAAU,MAAM;AAAA,UAChC;AAAA,UACA,SAAS,CAAAE,SAAO;AACd,qBAAS,kBAAkBA,MAAK,QAAQ,KAAK;AAAA,UAC/C;AAAA,QACF;AACA,mBAAW,KAAK,IAAI;AAAA,MACtB;AACA,aAAO;AAAA,IACT;AAKA,aAAS,iBAAiB;AACxB,YAAM,aAAa,UAAU,cAAc;AAC3C,YAAM,SAAS,OAAO,KAAK,UAAU,EAAE,OAAO,aAAW,QAAQ,SAAS,KAAK,CAAC;AAChF,YAAM,QAAQ,WAAW;AACzB,YAAM,MAAM;AACZ,UAAI,CAAC;AAAS,gBAAQ,eAAe,GAAG;AACxC,aAAO,QAAQ,SAAO;AACpB,cAAM,QAAQ,WAAW,GAAG;AAC5B,cAAM,QAAQ,UACV,CAAC,GAAG,UAAU,GAAG,CAAC,aAAa,KAAK,GAAG,GAAG,GAAG,KAAK,EAAE,IACpD,CAAC,eAAe,GAAG,MAAM,OAAO,KAAK;AACzC,gBAAQ,IAAI,GAAG,KAAK;AAAA,MACtB,CAAC;AACD,UAAI,CAAC;AAAS,gBAAQ,SAAS;AAAA,IACjC;AAIA,IAAAJ,QAAO,UAAU;AAAA,MACf,MAAM;AAAA,MACN,KAAK;AAAA,MACL;AAAA,MACA,oBAAAE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,iBAAAC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC9WA;AAAA,yCAAAE,SAAA;AAaA,QAAM,gBAAgB;AAAA,MACphB,QAAQ;AAAA;AAAA,QAEN;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA;AAAA,QAEA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,QACA;AAAA;AAAA,MACF;AAAA,IACF;AAyBA,IAAAA,QAAO,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;ACrGA;AAAA,0CAAAC,SAAA;AAQA,QAAM,aAAa;AAAA,MACjB,QAAQ;AAAA;AAAA,IACV;AAIA,IAAAA,QAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;AChBA;AAAA,0CAAAC,SAAA;AAQA,QAAM,EAAE,WAAW,IAAI;AACvB,QAAM,EAAE,OAAO,IAAI;AACnB,QAAMC,WAAU;AAChB,QAAM,EAAE,iBAAAC,iBAAgB,IAAID;AAC5B,QAAM,SAASC,iBAAgB,OAAO,QAAQ;AAI9C,QAAMC,OAAM,IAAI,SAAS;AACvB,YAAM,kBAAkB;AACxB,UAAI,OAAO,IAAI,MAAM,0BAA0B,MAAM,GAAG,EAAE,MAAM,MAAM,IAAI;AAC1E,UAAI,SAAS,KACV,OAAO,UAAQ;AACd,YAAI,KAAK,SAAS,YAAY;AAAG,iBAAO;AACxC,YAAI,KAAK,SAAS,aAAa;AAAG,iBAAO;AACzC,eAAO;AAAA,MACT,CAAC,EACA,KAAK,IAAI;AACZ,aAAO,WAAW,KAAK,KAAK,GAAG,CAAC,SAAS;AACzC,aAAO,MAAM;AACb,cAAQ,KAAK,MAAM;AAAA,IACrB;AAEA,QAAM,kBAAkB,CAAC,QAAQ,SAAS,WAAW,aAAa;AAChE,YAAM,KAAK;AACX,UAAI,OAAO,UAAU;AAAU,QAAAA,KAAI,IAAI,sBAAsB;AAC7D,YAAM,MAAMD,iBAAgB,OAAO,QAAQ;AAC3C,aAAO;AAAA,IACT;AAIA,IAAAF,QAAO,UAAU;AAAA,MACf,KAAAG;AAAA,MACA;AAAA,IACF;AAAA;AAAA;;;AC3CA;AAAA,qCAAAC,SAAA;AAsBA,aAAS,mBAAmB,KAAK;AAC/B,UAAI,gBAAgB,IAAI,QAAQ,YAAY,IAAI;AAChD,sBAAgB,cACb,MAAM,IAAI,EACV,IAAI,UAAQ,KAAK,QAAQ,QAAQ,EAAE,CAAC,EACpC,IAAI,UAAQ,KAAK,QAAQ,QAAQ,EAAE,CAAC,EACpC,KAAK,IAAI;AACZ,sBAAgB,cAAc,QAAQ,OAAO,IAAI;AACjD,UAAI,QAAQ,cAAc,MAAM,IAAI;AAEpC,YAAM,mBAAmB,CAAC,MAAM,cAAc;AAC5C,YAAI,QAAQ,KAAK,MAAM,SAAS;AAChC,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAM,CAAC,IAAI,MAAM,CAAC,EAAE,KAAK;AACzB,gBAAM,CAAC,IAAI,MAAM,CAAC,EAAE,QAAQ,QAAQ,GAAG;AAAA,QACzC;AACA,eAAO,MAAM,KAAK,SAAS;AAAA,MAC7B;AACA,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,cAAM,CAAC,IAAI,iBAAiB,MAAM,CAAC,GAAG,KAAK,EAAE,UAAU,KAAK,CAAC;AAC7D,cAAM,CAAC,IAAI,iBAAiB,MAAM,CAAC,GAAG,KAAK,EAAE,UAAU,KAAK,CAAC;AAAA,MAC/D;AACA,sBAAgB,MAAM,KAAK,IAAI,EAAE,KAAK;AACtC,aAAO,gBAAgB;AAAA,IACzB;AAIA,IAAAA,QAAO,UAAU;AAAA,MACf;AAAA,IACF;AAAA;AAAA;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAAC;AAAA,EAAA;AAAA,+BAAAC;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAYA,IAAAC,6BAAqB;AACrB,IAAAC,oBAAqB;;;ACbrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,sBAAgB;AAChB,uBAAiB;AACjB,0BAAmB;AAEnB,UAAqB;AArBrB;AA0BA,SAAS,YAAY;AACnB,MAAI;AAAa,WAAW,kBAAc,IAAI,IAAI,KAAK,YAAY,GAAG,CAAC;AACvE,SAAO;AACT;AAKA,SAAS,gBAAgB,WAAmB,UAAkB;AAC5D,MAAI,OAAO,iBAAiB;AAAU,WAAO;AAC7C,MAAI,aAAa,UAAU;AAC3B,QAAM,YAAY,SAAO,gBAAAC,QAAI,WAAW,iBAAAC,QAAK,KAAK,KAAK,QAAQ,CAAC;AAEhE,SAAO,eAAe,iBAAAA,QAAK,MAAM,UAAU,EAAE,MAAM;AACjD,QAAI,UAAU,UAAU,GAAG;AACzB,qBAAe;AACf,aAAO;AAAA,IACT;AACA,iBAAa,iBAAAA,QAAK,QAAQ,YAAY,IAAI;AAAA,EAC5C;AAEA,SAAO;AACT;AAEA,IAAM,MAAM,oBAAAC,QAAO,gBAAgB,SAAS,UAAU;AACtD,IAAI;AAEJ,IAAM,MAAM;AAIZ,SAAS,WAAW,UAAmB;AACrC,MAAI;AAEF,oBAAAC,QAAI,WAAW,QAAQ;AACvB,WAAO;AAAA,EACT,SAAS,GAAG;AACV,WAAO;AAAA,EACT;AACF;AAEA,SAAS,UAAU,SAAkB;AACnC,MAAI;AACF,UAAM,OAAO,gBAAAA,QAAI,SAAS,OAAO;AACjC,QAAI,KAAK,OAAO,GAAG;AACjB,UAAI,cAAc,OAAO,6BAA6B;AACtD,aAAO;AAAA,IACT;AACA,WAAO,KAAK,YAAY;AAAA,EAC1B,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AAEA,SAAS,MAAM,SAAkB;AAC/B,MAAI;AACF,UAAM,OAAO,gBAAAA,QAAI,SAAS,OAAO;AACjC,QAAI,KAAK,YAAY;AAAG,aAAO;AAC/B,WAAO;AAAA,EACT,SAAS,GAAG;AACV,QAAI,UAAU,OAAO,iBAAiB;AACtC,WAAO;AAAA,EACT;AACF;AAEA,SAAS,OAAO,UAAmB;AACjC,MAAI;AACF,UAAM,OAAO,gBAAAA,QAAI,SAAS,QAAQ;AAClC,QAAI,KAAK,OAAO;AAAG,aAAO;AAC1B,WAAO;AAAA,EACT,SAAS,GAAG;AACV,QAAI,WAAW,QAAQ,iBAAiB;AACxC,WAAO;AAAA,EACT;AACF;AAEA,SAAS,UAAU,SAAS;AAC1B,MAAI;AACF,oBAAAA,QAAI,cAAc,OAAO;AACzB,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,QAAI,eAAe,OAAO,qBAAqB,GAAG,EAAE;AACpD,UAAM,IAAI,MAAM,GAAG;AAAA,EACrB;AACF;AAEA,SAAS,UAAU,SAAkB;AACnC,MAAI;AACF,QAAI,MAAM,OAAO;AAAG,sBAAAA,QAAI,WAAW,OAAO;AAC1C,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,QAAI,eAAe,OAAO,qBAAqB,GAAG,EAAE;AACpD,UAAM,IAAI,MAAM,GAAG;AAAA,EACrB;AACF;AAIA,SAAS,aAAa,QAAwB;AAC5C,QAAM,OAAO,gBAAgB;AAC7B,MAAI,CAAC;AAAM,UAAM,MAAM,2CAA2C;AAClE,SAAO,iBAAAC,QAAK,UAAU,iBAAAA,QAAK,KAAK,MAAM,MAAM,CAAC;AAC/C;AAGA,SAAS,aAAa,QAAwB;AAC5C,QAAM,OAAO,gBAAgB;AAC7B,MAAI,CAAC;AAAM,UAAM,MAAM,2CAA2C;AAClE,QAAM,OAAO,iBAAAA,QAAK,UAAU,iBAAAA,QAAK,KAAK,MAAM,MAAM,CAAC;AACnD,SAAO,KAAK,MAAM,KAAK,MAAM;AAC/B;AAGA,SAAS,UAAU,MAAsB;AACvC,QAAM,OAAO,gBAAgB;AAC7B,MAAI,CAAC;AAAM,UAAM,MAAM,wCAAwC;AAC/D,SAAO,KAAK,MAAM,KAAK,MAAM;AAC/B;AAKA,SAAS,cAAc,SAAS;AAC9B,MAAI,CAAC,UAAU,OAAO,GAAG;AACvB,UAAM,MAAM,GAAG,OAAO;AACtB,YAAQ,KAAK,GAAG;AAChB,WAAO;AAAA,EACT;AACA,QAAM,YAAY,gBAAAD,QAAI,YAAY,OAAO;AACzC,QAAM,QAAQ,CAAC;AACf,QAAM,OAAO,CAAC;AACd,WAAS,QAAQ,WAAW;AAC1B,QAAI,OAAO,iBAAAC,QAAK,KAAK,SAAS,IAAI;AAClC,UAAM,OAAO,gBAAAD,QAAI,UAAU,IAAI;AAE/B,QAAI,KAAK,YAAY;AAAG,WAAK,KAAK,IAAI;AAAA;AACjC,YAAM,KAAK,IAAI;AAAA,EACtB;AACA,SAAO,EAAE,OAAO,KAAK;AACvB;AAGA,SAAS,MAAM,SAAS,MAAM,CAAC,GAAa;AAC1C,QAAM,SAAS,cAAc,OAAO;AACpC,MAAI,CAAC;AAAQ,WAAO;AACpB,QAAM,YAAY,OAAO,MAAM,IAAI,OAAK,iBAAAC,QAAK,SAAS,CAAC,CAAC;AACxD,MAAI;AAAK,QAAI,SAAS,UAAU,MAAM,aAAa,OAAO,EAAE;AAC5D,SAAO;AACT;AAEA,SAAS,QAAQ,SAAmB;AAClC,QAAM,SAAS,cAAc,OAAO;AACpC,MAAI,CAAC;AAAQ,WAAO;AACpB,SAAO,OAAO;AAChB;AAIA,SAAS,SAAS,UAAU,KAAM;AAChC,QAAM,OAAO,CAAC;AACd,MAAI,WAAW,IAAI,YAAY;AAC/B,SAAO,gBAAAD,QAAI,aAAa,UAAU,GAAG;AACvC;AAGA,eAAe,cAAc,UAAU,KAAM;AAC3C,QAAM,OAAO,CAAC;AACd,MAAI,WAAW,IAAI,YAAY;AAC/B,MAAI;AACF,WAAO,MAAM,gBAAAA,QAAI,SAAS,UAAU,GAAG;AAAA,EACzC,SAAS,KAAK;AACZ,QAAI,mBAAmB,QAAQ,qBAAqB,GAAG,EAAE;AACzD,UAAM,IAAI,MAAM,GAAG;AAAA,EACrB;AACF;AAEA,eAAe,gBAAgB,UAAU,SAAS;AAChD,MAAI,OAAO,gBAAAA,QAAI,kBAAkB,UAAU,EAAE,WAAW,KAAK,CAAC;AAC9D,OAAK,MAAM,OAAO;AAClB,OAAK,GAAG,SAAS,MAAM,IAAI,gBAAgB,CAAC;AAC5C,OAAK,IAAI;AACX;AAEA,eAAe,cAAc,UAAU;AACrC,QAAM,UAAW,MAAM,cAAc,QAAQ;AAC7C,SAAO,KAAK,MAAM,OAAO;AAC3B;AAEA,eAAe,eAAe,UAAU,KAAK;AAC3C,MAAI,OAAO,QAAQ;AAAU,UAAM,KAAK,UAAU,KAAK,MAAM,CAAC;AAC9D,QAAM,gBAAgB,UAAU,GAAG;AACrC;AAEA,eAAe,WAAW,UAAU;AAClC,MAAI;AACF,oBAAAA,QAAI,WAAW,QAAQ;AACvB,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,QAAI,IAAI,SAAS;AAAU,aAAO;AAClC,YAAQ,IAAI,IAAI,IAAI;AAAA,EACtB;AACF;AAIA,SAAS,OAAO;AACd,QAAM,QAAQ,MAAM,SAAS;AAC7B,MAAI,MAAM,UAAU,MAAM,SAAS;AAAG,QAAI,mBAAmB;AAAA;AACxD,QAAI,aAAa;AACtB,MAAI,SAAS,MAAM,MAAM,QAAQ;AACnC;;;ACtOA,yBAA6B;AAC7B,yBAAsD;AACtD,2BAAoB;AAEpB,gCAA6B;AAI7B,IAAAE,uBAAgC;AALhC,IAAM,EAAE,MAAM,IAAI,qBAAAC,QAAQ;AAM1B,IAAMC,WAAM,sCAAgB,UAAU,WAAW;AAQjD,IAAM,WAAN,MAAM,UAAS;AAAA;AAAA,EAEb,KAAK;AAAA,EACL,SAAS;AAAA;AAAA,EACT,UAAU;AAAA;AAAA,EACV,UAAU;AAAA;AAAA,EACV,QAAQ;AAAA;AAAA,EACR,SAAS;AAAA;AAAA;AAAA,EAET,WAAW;AAAA,EACX,cAAc,CAAC;AAAA,EACf,eAAe,CAAC;AAAA,EAChB,QAAQ;AAAA;AAAA,EAER,OAAO,eAAe,CAAC,QAAQ,SAAS,QAAQ,UAAU,OAAO;AAAA,EACjE,OAAO,cAAc;AAAA,EACrB,OAAO,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpB,YAAY,MAAM,KAAK;AACrB,SAAK,WAAW;AAChB,SAAK,UAAU,UAAS,aAAa,CAAC;AACtC,SAAK,KAAK,UAAS;AACnB,SAAK,aAAa,KAAK,WAAW,KAAK,IAAI;AAC3C,UAAM,EAAE,OAAO,QAAQ,KAAK,IAAI,OAAO,CAAC;AACxC,QAAI,OAAO,SAAS;AAAU,WAAK,QAAQ,IAAI;AAE/C,IAAAC,KAAI,aAAa,UAAU,IAAI,CAAC,gBAAgB;AAEhD,QAAI,gBAAgB,wCAAc;AAChC,WAAK,UAAU;AACf,WAAK,SAAS;AACd,WAAK,WAAW;AAAA,IAClB,WAAW,YAAY,IAAI,GAAG;AAE5B,WAAK,UAAU;AAAA,IACjB,WAAW,KAAK,iBAAiB,KAAK,MAAM;AAE1C,WAAK,UAAU;AAAA,IACjB,WAAW,gBAAgB,iCAAc;AAEvC,WAAK,UAAU;AAAA,IACjB,OAAO;AACL,WAAK,QAAQ;AACb,cAAQ,IAAI,KAAK,KAAK;AACtB,YAAM,IAAI,MAAM,KAAK,KAAK;AAAA,IAC5B;AACA,IAAAA,KAAI,SAAS;AACb,SAAK,YAAY,OAAO,MAAM;AAC9B,IAAAA,KAAI,wCAAwC;AAAA,EAC9C;AAAA;AAAA,EAGA,QAAQ,MAAM;AACZ,QAAI,OAAO,SAAS;AAClB,YAAM,IAAI,MAAM,2CAA2C;AAC7D,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACX,QAAI,KAAK,WAAW;AAAW,YAAM,IAAI,MAAM,gCAAgC;AAE/E,SAAK,OAAO,GAAG,WAAW,SAAO;AAC/B,MAAAA,KAAI,IAAI,UAAU,IAAI,CAAC,aAAa,GAAG;AAEvC,YAAM,EAAE,QAAQ,KAAK,IAAI;AACzB,UAAI,WAAW,eAAe;AAC5B,cAAM,EAAE,SAAS,IAAI;AACrB,YAAI,OAAO,aAAa,UAAU;AAChC,eAAK,WAAW;AAEhB,eAAK,cAAc;AACnB,eAAK,eAAe;AAAA,QACtB;AAAA,MACF;AAAA,IACF,CAAC;AAED,SAAK,OAAO,KAAK,EAAE,QAAQ,eAAe,MAAM,CAAC,EAAE,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,OAAO,QAAQ;AACzB,QAAI,KAAK,UAAU,UAAa,KAAK,WAAW,QAAW;AACzD,WAAK,QAAQ;AACb,YAAM,IAAI,MAAM,KAAK,KAAK;AAAA,IAC5B;AACA,QAAI,UAAU,QAAW;AACvB,UAAI,iBAAiB,WAAU;AAC7B,aAAK,QAAQ;AAAA,MACf,OAAO;AACL,aAAK,QAAQ;AACb,cAAM,IAAI,MAAM,KAAK,KAAK;AAAA,MAC5B;AAAA,IACF;AACA,QAAI,WAAW,QAAW;AACxB,UAAI,kBAAkB,WAAU;AAC9B,aAAK,SAAS;AAAA,MAChB,OAAO;AACL,aAAK,QAAQ;AACb,cAAM,IAAI,MAAM,KAAK,KAAK;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB;AACd,SAAK,MAAM,GAAG,WAAW,SAAO;AAC9B,YAAM,EAAE,QAAQ,KAAK,IAAI;AAEzB,cAAQ,QAAQ;AAAA,QACd,KAAK;AACH,eAAK,YAAY,IAAI;AACrB;AAAA,QACF;AACE,UAAAA,KAAI,2BAA2B,MAAM;AACrC;AAAA,MACJ;AAAA,IACF,CAAC;AACD,IAAAA,KAAI,gBAAgB;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACf,IAAAA,KAAI,6BAA6B;AAKjC,SAAK,OAAO,GAAG,WAAW,SAAO;AAC/B,YAAM,EAAE,QAAQ,KAAK,IAAI;AACzB,cAAQ,QAAQ;AAAA,QACd,KAAK;AACH;AAAA,QACF;AACE,UAAAA,KAAI,0BAA0B,MAAM;AACpC;AAAA,MACJ;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,OAAO,CAAC,GAAG;AACrB,SAAK,YAAY,KAAK,IAAI;AAC1B,QAAI,KAAK,YAAY,SAAS,UAAS,aAAa;AAClD,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA;AAAA,EAEA,eAAe;AACb,QAAI,KAAK,YAAY,WAAW,GAAG;AACjC,WAAK,QAAQ;AACb,aAAO;AAAA,IACT;AACA,SAAK,QAAQ;AACb,WAAO,KAAK,YAAY,MAAM;AAAA,EAChC;AACF;AAIA,IAAM,cAAc,SAClB,eAAe,+BACf,eAAe,+BACf,eAAe,6BACf,eAAe;AAEjB,IAAM,YAAY,cAAY,SAAS,WAAW,SAAS;AAI3D,IAAO,yBAAQ;;;AC1Nf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAAC,oBAAgC;AAKhC,IAAMC,OAAM;AAEZ,IAAI,OAAe;AACnB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAGJ,IAAM,SAAS,CAAC,OAAO,OAAO;AAC5B,MAAI,SAAS;AAAI,UAAM,IAAI,MAAM,0BAA0B;AAC3D,MAAI,KAAK,WAAW;AAAG,WAAO;AAC9B,aAAO,iCAAU,wBAAK,MAAM,IAAI,CAAC;AACjC,MAAI,KAAK,SAAS,GAAG;AAAG,WAAO,KAAK,MAAM,GAAG,EAAE;AAC/C,SAAO;AACT;AAGA,IAAM,UAAU,UAAQ;AACtB,MAAI,KAAK,WAAW,IAAI;AAAG,WAAO,KAAK,MAAM,KAAK,MAAM;AACxD,SAAO;AACT;AAQA,SAAS,aAAa,MAAc;AAClC,MAAI,KAAK,SAAS;AAAG,WAAO,SAAS;AACrC,MAAI,UAAU,IAAI,GAAG;AACnB,WAAO;AACP,iBAAa,OAAO,SAAS;AAC7B,aAAS,OAAO,MAAM;AACtB,kBAAc,OAAO,YAAY;AACjC,sBAAkB,OAAO,qBAAqB;AAC9C,mBAAe,OAAO,kBAAkB;AACxC,kBAAc,OAAO,aAAa;AAClC,QAAIA,MAAK;AACP,cAAQ,IAAI,UAAU;AACtB,cAAQ,IAAI,MAAM;AAClB,cAAQ,IAAI,WAAW;AACvB,cAAQ,IAAI,eAAe;AAC3B,cAAQ,IAAI,YAAY;AACxB,cAAQ,IAAI,WAAW;AAAA,IACzB;AACA,WAAO,SAAS;AAAA,EAClB;AACA,UAAQ,IAAI,YAAY,IAAI,iBAAiB;AAC/C;AAGA,SAAS,WAAW;AAClB,MAAI,SAAS;AAAI,UAAM,IAAI,MAAM,2CAA2C;AAC5E,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;AH3DA,4BAAkB;AAClB,IAAAC,uBAAmB;AAInB,IAAMC,OAAM,qBAAAC,QAAO,gBAAgB,UAAU,SAAS;AACtD,IAAMC,OAAM;AACZ,IAAM,EAAE,IAAI,IAAI,sBAAAC;AAEhB,IAAM,gBAAgB;AACtB,IAAI,QAAQ;AAUZ,eAAe,QAAQ,SAAS,MAAM,CAAC,GAAG;AACxC,QAAM,KAAK,WAAW,OAAO;AAC7B,EAAAH,KAAI,IAAI,UAAU;AAClB,MAAI;AAEJ,QAAM,EAAE,OAAO,QAAQ,IAAI,IAAI,eAAe,GAAG;AACjD,MAAI;AAAK,YAAQ;AACjB,MAAI,MAAM,SAAS,GAAG;AAAG,YAAQ,MAAM,MAAM,GAAG,EAAE;AAClD,MAAI,EAAE,SAAS,MAAM,IAAI,wBAAwB,SAAS,EAAE;AAC5D,MAAI,WAAW,GAAG,KAAK,IAAI,OAAO;AAClC,MAAIE;AAAK,IAAAF,KAAI,aAAa,QAAQ,QAAQ,GAAG,aAAa;AAC1D,QAAM,aAAa,uBAAuB,OAAO;AACjD,MAAIE;AAAK,IAAAF,KAAI,oBAAoB,UAAU;AAC3C,MAAI,OAAO;AACT,QAAI,CAAC,WAAW,SAAS,KAAK;AAC5B,UAAI,IAAI,6BAA6B,KAAK,GAAG,OAAO,EAAE;AAExD,QAAIE;AAAK,MAAAF,KAAI,cAAc,QAAQ,QAAQ,CAAC,IAAI,KAAK,GAAG;AACxD,gBAAQ,iCAAK,OAAO,EAAE,KAAK,SAAS,CAAC;AACrC,WAAO;AAAA,EACT;AACA,MAAI,WAAW,WAAW;AACxB,QAAI,IAAI,qCAAqC,KAAK,GAAG,OAAO,EAAE;AAGhE,UAAQ,WAAW,CAAC;AACpB,MAAIE;AAAK,IAAAF,KAAI,cAAc,OAAO,IAAI,KAAK,GAAG;AAC9C,cAAQ,iCAAK,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,OAAO,IAAI,CAAC;AAClD,QAAM,QAAQ,IAAI,uBAAS,OAAO,EAAE,MAAM,GAAG,OAAO,IAAI,KAAK,GAAG,CAAC;AACjE,SAAO;AACT;AAUA,SAAS,eAAe,KAAK;AAC3B,QAAM,KAAK;AACX,MAAI,EAAE,OAAO,QAAQ,MAAM,GAAG,IAAI;AAClC,MAAI,OAAO;AACT,QAAI,EAAE,iBAAiB;AACrB,YAAM,IAAI,MAAM,GAAG,EAAE,gDAAgD;AAAA,EACzE;AACA,MAAI,QAAQ;AACV,QAAI,EAAE,kBAAkB;AACtB,YAAM,IAAI,MAAM,GAAG,EAAE,iDAAiD;AAAA,EAC1E;AACA,MAAI,KAAK;AACP,QAAI,OAAO,QAAQ;AACjB,YAAM,IAAI,MAAM,GAAG,EAAE,mCAAmC;AAAA,EAC5D,OAAO;AACL,UAAM;AAAA,EACR;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAwDA,SAAS,wBAAwB,SAAS,KAAK,2BAA2B;AACxE,MAAI,SAAS;AAEb,MAAI,OAAO,YAAY;AACrB,QAAI,IAAI,yCAAyC,OAAO,OAAO;AAEjE,QAAM,WAAW,QAAQ,MAAM,GAAG;AAClC,MAAI,SAAS,WAAW,GAAG;AACzB,cAAU,SAAS,CAAC;AACpB,YAAQ,SAAS,CAAC;AAAA,EACpB,WAAW,SAAS,WAAW,GAAG;AAChC,cAAU;AAAA,EACZ;AAAO,QAAI,IAAI,kCAAkC;AAEjD,MAAI,UAAU,UAAa,OAAO,UAAU;AAC1C,QAAI,IAAI,yBAAyB;AAEnC,MAAI,SAAS,CAAC,MAAM,WAAW,GAAG;AAChC,QAAI,IAAI,sBAAsB,KAAK,qBAAqB;AAG1D,SAAO,EAAE,SAAS,MAAM;AAC1B;AAQA,SAAS,uBAAuB,SAAS;AACvC,QAAM,KAAK;AACX,QAAM,iBAAa,wBAAK,OAAO,OAAO;AAEtC,MAAI,CAAC,UAAU,UAAU,GAAG;AAC1B,YAAQ,IAAI,SAAS,UAAU;AAC/B,QAAI,IAAI,UAAU,SAAS,gBAAgB,KAAK,YAAY;AAAA,EAC9D;AACA,QAAM,QAAQ,MAAM,UAAU;AAC9B,QAAM,aAAa,MAAM,OAAO,UAAQ,KAAK,WAAW,aAAa,CAAC;AAEtE,SAAO;AACT;AAuBA,SAAS,WAAW;AAClB,UAAQ,IAAI,WAAW;AACzB;;;AIhOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,sBAAsB;AACtB,qBAAoB;AACpB,IAAAI,uBAAgC;AAIhC,IAAM,WAAO,sCAAgB,MAAM,SAAS;AAI5C,IAAI,UAAU,CAAC;AACf,IAAM,YAAY,MAAM,QAAQ,KAAK,IAAI;AACzC,IAAM,cAAc,SAAO,QAAQ,KAAK,GAAG;AAC3C,IAAM,cAAc,MAAO,UAAU,CAAC;AAEtC,SAAS,iBAAiB;AACxB,QAAM,UAAM,eAAAC,SAAQ;AACpB,MAAI,IAAI,KAAK,CAAC,KAAK,QAAQ;AACzB,QAAI,OAAO,UAAU;AACrB,QAAI,KAAK,QAAQ,IAAI,QAAQ;AAAA,EAC/B,CAAC;AACD,QAAM,SAAS,IAAI,OAAO,KAAM,MAAM;AACpC,SAAK,qCAAqC;AAAA,EAC5C,CAAC;AAED,UAAQ,GAAG,QAAQ,MAAM;AACvB,SAAK,qBAAqB;AAC1B,WAAO,MAAM;AAAA,EACf,CAAC;AAED,UAAQ,GAAG,UAAU,MAAM;AACzB,YAAQ,IAAI,qBAAqB;AACjC,WAAO,MAAM,SAAO;AAClB,UAAI,KAAK;AACP,aAAK,MAAM,GAAG;AACd,gBAAQ,KAAK,CAAC;AAAA,MAChB;AACA,cAAQ,KAAK;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AACH;AAEA,SAAS,QAAQ;AAEf,QAAM,cAAU,uBAAM,UAAU;AAChC,UAAQ,GAAG,UAAU,UAAQ;AAC3B,SAAK,yBAAyB,IAAI;AAAA,EAEpC,CAAC;AACH;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAUA,IAAAC,uBAAgC;AAChC,0BAAoB;AACpB,IAAAC,oBAAiB;AACjB,IAAMC,WAAM,sCAAgB,WAAW,UAAU;AAQjD,SAAS,kBAAkB,WAA8B;AACvD,MAAI,WAAW;AAEf,MAAI,OAAO,cAAc,UAAU;AACjC,IAAAA,KAAI,wCAAwC,OAAO,SAAS;AAC5D,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,WAAW,UAAU,MAAM,GAAG;AACpC,MAAI,SAAS,WAAW,GAAG;AACzB,gBAAY,SAAS,CAAC;AACtB,gBAAY,SAAS,CAAC;AAAA,EACxB,WAAW,SAAS,WAAW,GAAG;AAChC,gBAAY;AAAA,EACd;AAAO,WAAO,EAAE,KAAK,WAAW,SAAS,qBAAqB;AAG9D,MAAI,cAAc,UAAa,OAAO,cAAc;AAClD,WAAO,EAAE,KAAK,gCAAgC;AAGhD,MAAI,WAAW;AACb,QAAI,UAAU,QAAQ,GAAG,MAAM;AAC7B,aAAO,EAAE,KAAK,qBAAqB,SAAS,yBAAyB;AAAA,EACzE;AAEA,MAAI,cAAc;AAAW,gBAAY,IAAI,SAAS;AAEtD,SAAO,EAAE,WAAW,UAAU;AAChC;AAQA,SAAS,gBAAgB,MAA0B;AACjD,MAAI;AAAA,IACF;AAAA,IACA;AAAA;AAAA,IACA;AAAA;AAAA,IACA,GAAG;AAAA;AAAA,EACL,IAAI,QAAQ,oBAAAC,QAAQ;AAEpB,QAAM,cAAc,kBAAAC,QAAK,SAAS,OAAO,kBAAAA,QAAK,QAAQ,KAAK,CAAC;AAC5D,SAAO;AAAA,IACL;AAAA;AAAA,IACA;AAAA;AAAA,IACA,GAAG;AAAA;AAAA,EACL;AACF;AAQA,SAAS,cAAc,OAA0B;AAC/C,QAAM,SAAS,kBAAAA,QAAK,KAAU,gBAAgB,GAAG,YAAY;AAC7D,MAAI,CAAM,UAAU,MAAM,GAAG;AAC3B,WAAO,EAAE,KAAK,aAAa,MAAM,kBAAkB;AAAA,EACrD;AAEA,QAAM,QAAQ,UAAQ,EAAE,KAAK,WAAW,GAAG,KAAK,SAAS;AACzD,QAAM,SAAc,QAAQ,MAAM,EAAE,OAAO,KAAK;AAEhD,MAAI,EAAE,WAAW,WAAW,IAAI,IAAI,kBAAkB,KAAK;AAC3D,MAAI;AAAK,WAAO,EAAE,IAAI;AAEtB,MAAI,CAAC,OAAO,SAAS,SAAS;AAC5B,WAAO;AAAA,MACL,KAAK,iBAAiB,SAAS,kBAAkB,MAAM;AAAA,IACzD;AAGF,QAAM,YAAY,kBAAAA,QAAK,KAAK,QAAQ,SAAS;AAC7C,QAAM,UAAe,MAAM,SAAS;AACpC,MAAI,CAAC,SAAS;AACZ,WAAO,EAAE,KAAK,iBAAiB,SAAS,2BAA2B;AAAA,EACrE;AACA,QAAM,aAAa,QAAQ,OAAO,UAAQ,KAAK,WAAW,GAAG,CAAC;AAC9D,MAAI,WAAW,WAAW,GAAG;AAC3B,WAAO,EAAE,KAAK,iBAAiB,SAAS,uBAAuB;AAAA,EACjE;AACA,MAAI;AAEJ,MAAI,CAAC,WAAW;AACd,QAAI,WAAW,SAAS,GAAG;AACzB,kBAAY,WAAW,CAAC;AACxB,kBAAY,kBAAAA,QAAK,SAAS,WAAW,kBAAAA,QAAK,QAAQ,SAAS,CAAC;AAC5D,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,WAAO,EAAE,KAAK,UAAU,SAAS,wBAAwB;AAAA,EAC3D;AAEA,QAAM,QAAQ,IAAI,OAAO,GAAG,SAAS,eAAe,GAAG;AACvD,cAAY,WAAW,KAAK,cAAY,MAAM,KAAK,QAAQ,CAAC;AAC5D,MAAI,CAAC,WAAW;AACd,WAAO,EAAE,KAAK,iBAAiB,SAAS,mBAAmB,SAAS,UAAU;AAAA,EAChF;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ANpHA,uBAAiB;AACjB,IAAAC,uBAAoB;;;AOoBpB,IAAM,SAAoB,oBAAI,IAAI;AAIlC,SAAS,kBAAkB,IAAY;AACrC,QAAM,KAAK;AACX,QAAM,QAAQ;AACd,MAAI,OAAO;AAAI,UAAM,MAAM,GAAG,EAAE,KAAK,KAAK,EAAE;AAC5C,MAAI,OAAO;AAAW,UAAM,MAAM,GAAG,EAAE,KAAK,KAAK,EAAE;AACnD,MAAI,OAAO,OAAO;AAAU,UAAM,MAAM,GAAG,EAAE,KAAK,KAAK,EAAE;AACzD,MAAI,OAAO,GAAG,CAAC,EAAE,YAAY,IAAI,GAAG,MAAM,CAAC;AAAG,UAAM,MAAM,GAAG,EAAE,KAAK,KAAK,EAAE;AAC3E,MAAI,GAAG,KAAK,MAAM;AAChB,UAAM,MAAM,GAAG,EAAE,8CAA8C;AACnE;AAEA,SAAS,oBAAoB,KAAkB;AAC7C,MAAI,eAAe,aAAa;AAC9B,QAAI,IAAI;AAAW,YAAM,MAAM,aAAa,IAAI,OAAO,cAAc;AAAA;AAChE;AAAA,EACP;AACA,QAAM,MAAM,sCAAsC;AACpD;AAEA,SAAS,mBAAmB,IAAY;AACtC,QAAM,KAAK;AACX,MAAI,OAAO;AAAI,UAAM,MAAM,GAAG,EAAE,0BAA0B;AAC1D,MAAI,OAAO;AAAW,UAAM,MAAM,GAAG,EAAE,0BAA0B;AACjE,MAAI,OAAO,OAAO;AAAU,UAAM,MAAM,GAAG,EAAE,0BAA0B;AACvE,MAAI,OAAO,GAAG,YAAY;AAAG,UAAM,MAAM,GAAG,EAAE,mBAAmB;AACjE,MAAI,GAAG,KAAK,MAAM;AAChB,UAAM,MAAM,GAAG,EAAE,8CAA8C;AACnE;AAIA,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EAEA,YAAY,SAAiB;AAC3B,sBAAkB,OAAO;AACzB,cAAU,QAAQ,KAAK,EAAE,YAAY;AAErC,QAAI,OAAO,IAAI,OAAO,GAAG;AACvB,cAAQ;AAAA,QACN,mBAAmB,OAAO;AAAA,MAC5B;AACA,aAAO,OAAO,IAAI,OAAO;AAAA,IAC3B;AAEA,SAAK,UAAU;AACf,SAAK,MAAM,CAAC;AACZ,SAAK,SAAS,oBAAI,IAAI;AACtB,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,OAAO,oBAAI,IAAI;AACpB,SAAK,YAAY;AACjB,WAAO,IAAI,SAAS,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA,EAKA,MAAM,MAAc,MAAgB,KAA6B;AAC/D,UAAM,KAAK;AAEX,QAAI,SAAS;AAAW,YAAM,MAAM,GAAG,EAAE,wBAAwB;AACjE,QAAI,OAAO,SAAS;AAAU,YAAM,MAAM,GAAG,EAAE,4BAA4B;AAC3E,QAAI,OAAO,KAAK,UAAU;AAAU,YAAM,MAAM,GAAG,EAAE,UAAU,IAAI,SAAS;AAC5E,QAAI,KAAK,WAAW;AAAW,YAAM,MAAM,GAAG,EAAE,UAAU,IAAI,SAAS;AAEvE,wBAAoB,IAAI;AACxB,uBAAmB,IAAI;AAEvB,QAAI,KAAK,YAAY;AAAI,YAAM,MAAM,GAAG,EAAE,6BAA6B;AACvE,QAAI,KAAK,MAAM,IAAI;AAAG,YAAM,MAAM,GAAG,EAAE,WAAW,IAAI,kBAAkB;AAExE,UAAM,QAAQ,KAAK,IAAI;AACvB,SAAK,OAAO,IAAI,MAAM,KAAK;AAC3B,UAAM,UAAU,EAAE,GAAG,KAAK;AAC1B,QAAI,KAAK;AAAS,aAAO,OAAO,OAAO;AACvC,UAAM,UAAmB;AAAA,MACvB,UAAU;AAAA,MACV,UAAU,KAAK;AAAA,MACf,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AACA,SAAK,IAAI,KAAK,OAAO;AACrB,WAAO;AAAA,EACT;AAAA,EAEA,SAAS,MAAoB;AAC3B,UAAM,KAAK;AACX,YAAQ,MAAM,GAAG,EAAE,6BAA6B;AAAA,EAClD;AAAA;AAAA,EAIA,KAAK,KAAwB;AAC3B,wBAAoB,IAAI;AACxB,QAAI,OAAO,QAAQ;AAAU,aAAO,KAAK,UAAU,KAAK,GAAG;AAC3D,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAEA,SAAiB;AACf,wBAAoB,IAAI;AACxB,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA,EAIA,QAAiB;AACf,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,QAAI,KAAK,YAAY;AAAI,YAAM,MAAM,GAAG,EAAE,6BAA6B;AACvE,QAAI,KAAK,IAAI,WAAW;AAAG,YAAM,MAAM,GAAG,EAAE,wBAAwB;AACpE,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,WAAO,KAAK,IAAI,KAAK,OAAO;AAAA,EAC9B;AAAA,EAEA,UAAmB;AACjB,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,QAAI,KAAK,YAAY;AAAI,YAAM,MAAM,GAAG,EAAE,yBAAyB;AACnE,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,WAAO,KAAK,IAAI,KAAK,OAAO;AAAA,EAC9B;AAAA,EAEA,OAAgB;AACd,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,QAAI,KAAK,YAAY;AAAI,YAAM,MAAM,6BAA6B;AAClE,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,WAAO,KAAK,IAAI,KAAK,OAAO;AAAA,EAC9B;AAAA,EAEA,OAAgB;AACd,UAAM,KAAK;AACX,QAAI,KAAK,YAAY;AAAI,aAAO,KAAK,MAAM;AAC3C,wBAAoB,IAAI;AACxB,QAAI,KAAK,YAAY,KAAK,IAAI,SAAS;AAAG,aAAO;AACjD,MAAE,KAAK;AACP,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,WAAO,KAAK,IAAI,KAAK,OAAO;AAAA,EAC9B;AAAA,EAEA,WAAoB;AAClB,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,QAAI,KAAK,YAAY;AAAI,YAAM,MAAM,GAAG,EAAE,yBAAyB;AACnE,QAAI,KAAK,YAAY;AAAG,aAAO;AAC/B,MAAE,KAAK;AACP,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,WAAO,KAAK,IAAI,KAAK,OAAO;AAAA,EAC9B;AAAA;AAAA,EAIA,UAAU,QAAgB,MAA2B;AACnD,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,uBAAmB,MAAM;AACzB,QAAI,CAAC,KAAK,MAAM,MAAM;AAAG,YAAM,MAAM,GAAG,EAAE,WAAW,MAAM,kBAAkB;AAC7E,QAAI,CAAC,KAAK,KAAK,IAAI,MAAM;AAAG,WAAK,KAAK,IAAI,QAAQ,oBAAI,IAAI,CAAC;AAC3D,SAAK,KAAK,IAAI,MAAM,EAAE,IAAI,IAAI;AAAA,EAChC;AAAA,EAEA,YAAY,MAAc,MAA2B;AACnD,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,uBAAmB,IAAI;AACvB,QAAI,CAAC,KAAK,MAAM,IAAI;AAAG,YAAM,MAAM,GAAG,EAAE,WAAW,IAAI,kBAAkB;AACzE,UAAM,OAAO,KAAK,KAAK,IAAI,IAAI;AAC/B,QAAI,KAAK,IAAI,IAAI;AAAG,WAAK,OAAO,IAAI;AAAA,EACtC;AAAA,EAEA,UAAU;AACR,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,SAAK,SAAS,KAAK;AACnB,SAAK,YAAY,KAAK,IAAI,KAAK,OAAO;AAAA,EACxC;AAAA,EAEA,gBAAsB;AACpB,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,UAAM,OAAO,KAAK,KAAK,IAAI,KAAK,UAAU,OAAO;AACjD,QAAI;AAAM,WAAK,QAAQ,UAAQ,KAAK,KAAK,WAAW,KAAK,QAAQ,IAAI,CAAC;AAAA,EACxE;AAAA;AAAA,EAIA,MAAM,QAAyB;AAC7B,wBAAoB,IAAI;AACxB,uBAAmB,MAAM;AACzB,WAAO,KAAK,IAAI,KAAK,QAAM,GAAG,YAAY,MAAM;AAAA,EAClD;AAAA,EAEA,QAAQ,QAAyB;AAC/B,UAAM,KAAK;AACX,wBAAoB,IAAI;AACxB,uBAAmB,MAAM;AACzB,QAAI,CAAC,KAAK,MAAM,MAAM;AAAG,YAAM,MAAM,GAAG,EAAE,WAAW,MAAM,kBAAkB;AAC7E,WAAO,WAAW,KAAK,IAAI,KAAK,OAAO,EAAE;AAAA,EAC3C;AAAA;AAAA,EAGA,UAAgB;AACd,iBAAY,gBAAgB,KAAK,OAAO;AAAA,EAC1C;AAAA;AAAA,EAIA,OAAO,aAAa,SAA8B;AAChD,sBAAkB,OAAO;AACzB,WAAO,OAAO,IAAI,OAAO;AAAA,EAC3B;AAAA,EAEA,OAAO,gBAAgB,SAAuB;AAC5C,UAAM,MAAM,aAAY,aAAa,OAAO;AAC5C,QAAI,OAAO,MAAM;AACjB,QAAI,KAAK,QAAQ,UAAQ,KAAK,MAAM,CAAC;AACrC,QAAI,IAAI,SAAS;AACjB,QAAI,YAAY;AAChB,WAAO,OAAO,OAAO;AAAA,EACvB;AACF;AAIA,IAAO,uBAAQ;;;ACxLf,IAAM,WAAsB,CAAC;AAC7B,IAAM,SAAoB,oBAAI,IAAI;AAClC,IAAM,aAAyB,oBAAI,IAAI;AAIvC,IAAM,WAAN,MAAM,UAAS;AAAA,EACb;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA,EACA;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,WAAuB;AACjC,QAAI,OAAO,cAAc;AAAU,YAAM,MAAM,4BAA4B;AAC3E,gBAAY,UAAU,KAAK,EAAE,YAAY;AAEzC,QAAI,OAAO,IAAI,SAAS,GAAG;AACzB,cAAQ;AAAA,QACN,mBAAmB,SAAS;AAAA,MAC9B;AACA,aAAO,OAAO,IAAI,SAAS;AAAA,IAC7B;AAEA,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,OAAO,oBAAI,IAAI;AACpB,SAAK,QAAQ,CAAC;AACd,SAAK,OAAO,CAAC;AACb,SAAK,UAAU,CAAC;AAChB,aAAS,KAAK,IAAI,IAAI,CAAC;AAGvB,SAAK,QAAQ,KAAK,MAAM,KAAK,IAAI;AACjC,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;AACnD,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,mBAAmB,KAAK,iBAAiB,KAAK,IAAI;AACvD,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AACzC,SAAK,oBAAoB,KAAK,kBAAkB,KAAK,IAAI;AACzD,SAAK,kBAAkB,KAAK,gBAAgB,KAAK,IAAI;AACrD,SAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI;AACjD,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,cAAc,KAAK,YAAY,KAAK,IAAI;AAC7C,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,WAAW,KAAK,SAAS,KAAK,IAAI;AACvC,SAAK,YAAY,KAAK,UAAU,KAAK,IAAI;AAEzC,WAAO,IAAI,KAAK,MAAM,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAAwB;AAE5B,UAAM,QAAQ,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,IAAI,EAAE,CAAC;AACzD,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AAAG,aAAO,MAAM,GAAG;AAC/D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,cAAyB,UAAoB;AACrD,QAAI,KAAK,cAAc,YAAY,GAAG;AACpC,YAAM,cAAc,KAAK,kBAAkB,YAAY;AACvD,WAAK,KAAK,QAAQ,SAAO,IAAI,WAAW,CAAC;AAEzC,YAAM,SAAS,EAAE,YAAY,aAAa,SAAS;AACnD,WAAK,SAAS,MAAM;AAAA,IACtB;AAAO,YAAM,MAAM,kDAAkD;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,SAA2B;AACxC,QAAI,OAAO,YAAY;AAAY,YAAM,MAAM,6BAA6B;AAC5E,QAAI,KAAK,KAAK,IAAI,OAAO;AAAG,cAAQ,KAAK,+BAA+B;AACxE,SAAK,KAAK,IAAI,OAAO;AAAA,EACvB;AAAA;AAAA,EAGA,iBAAiB,SAA2B;AAC1C,QAAI,CAAC,KAAK,KAAK,OAAO,OAAO;AAC3B,cAAQ,KAAK,+BAA+B,KAAK,IAAI;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,YAAyB;AACnC,QAAI,OAAO,eAAe;AAAY,YAAM,MAAM,2BAA2B;AAC7E,SAAK,QAAQ,KAAK,UAAU;AAC5B,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,UAAqB;AAEpC,QAAI,KAAK;AACP,YAAM,MAAM,4BAA4B,KAAK,IAAI,uBAAuB;AAE1E,WAAO,KAAK,QAAQ,EAAE,QAAQ,OAAK;AAEjC,UAAI,EAAE,YAAY,MAAM;AACtB,cAAM,MAAM,mDAAmD,CAAC,GAAG;AAErE,UAAI,SAAS,CAAC,MAAM;AAClB,cAAM;AAAA,UACJ,2BAA2B,CAAC;AAAA,QAC9B;AAAA,IACJ,CAAC;AAED,QAAI,SAAS,KAAK,IAAI,GAAG;AACvB,aAAO,KAAK,QAAQ,EAAE,QAAQ,OAAK;AAEjC,YAAI,MAAM;AAAU;AAEpB,cAAM,QAAQ,WAAW,IAAI,CAAC;AAC9B,YAAI,UAAU;AAAW,gBAAM,MAAM,GAAG,CAAC,wBAAwB,KAAK,EAAE;AAExE,mBAAW,IAAI,GAAG,KAAK,IAAI;AAAA,MAC7B,CAAC;AACD,eAAS,KAAK,IAAI,IAAI;AACtB,WAAK,OAAO;AAAA,IACd;AAAO,YAAM,MAAM,GAAG,KAAK,IAAI,2BAA2B;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,SAAoB;AAC5B,SAAK,YAAY,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,SAAmB;AACjC,QAAI,OAAO,YAAY;AAAY,YAAM,MAAM,IAAI,OAAO,qBAAqB;AAC/E,SAAK,KAAK,KAAK,OAAO;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,YAAuB,UAAuB;AAC9D,SAAK,SAAS,EAAE,YAAY,SAAS,CAAC;AAAA,EACxC;AAAA;AAAA,EAGA,cAAc,UAAqB;AAOjC,UAAM,WAAW,SAAS,KAAK,IAAI;AACnC,QAAI,SAAS;AACb,WAAO,KAAK,QAAQ,EAAE,QAAQ,OAAK;AACjC,YAAM,UAAU,UAAU,SAAS,CAAC,MAAM;AAC1C,UAAI,YAAY;AAAO,gBAAQ,KAAK,kBAAkB,CAAC,mBAAmB;AAC1E,eAAS,UAAU;AAAA,IACrB,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAqB;AAC/B,WAAO,KAAK,QAAQ,EAAE,QAAQ,OAAK;AACjC,UAAI,MAAM,QAAQ,SAAS,CAAC,CAAC;AAAG,iBAAS,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;AAAA,IAC/D,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,UAAqB;AACrC,UAAM,QAAQ,KAAK,YAAY,EAAE,GAAG,SAAS,CAAC;AAC9C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,UAAqB;AAC/B,QAAI,CAAC,KAAK,cAAc,QAAQ;AAAG,aAAO;AAE1C,UAAM,WAAW,KAAK,YAAY;AAAA,MAChC,GAAG,SAAS,KAAK,IAAI;AAAA,MACrB,GAAG;AAAA,IACL,CAAC;AAED,aAAS,KAAK,IAAI,IAAI;AAEtB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAqB;AAG/B,eAAW,MAAM;AACf,YAAM,OAAO,CAAC,GAAG,KAAK,KAAK,OAAO,CAAC;AACnC,eAAS,aAAa,KAAK;AAE3B,YAAM,eAAe,KAAK,YAAY,EAAE,GAAG,SAAS,KAAK,IAAI,EAAE,CAAC;AAChE,WAAK,QAAQ,SAAO,IAAI,UAAU,YAAY,CAAC;AAAA,IACjD,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,QAAuB;AAC9B,UAAM,EAAE,YAAY,SAAS,IAAI;AACjC,QAAI,CAAC,KAAK,cAAc,UAAU,GAAG;AACnC,cAAQ,KAAK,oBAAoB,UAAU;AAC3C;AAAA,IACF;AACA,QAAI,YAAY,OAAO,aAAa,YAAY;AAC9C,cAAQ,KAAK,8BAA8B,OAAO,UAAU,QAAQ;AACpE;AAAA,IACF;AACA,SAAK,MAAM,KAAK,MAAM;AAEtB,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACT,UAAM,YAAY,CAAC;AAEnB,QAAI,SAAS,KAAK,MAAM,MAAM;AAC9B,WAAO,WAAW,QAAW;AAC3B,YAAM,EAAE,cAAc,SAAS,IAAI;AACnC,WAAK,YAAY,YAAY;AAC7B,WAAK,YAAY,YAAY;AAC7B,UAAI,OAAO,aAAa;AAAY,kBAAU,KAAK,QAAQ;AAE3D,eAAS,KAAK,MAAM,MAAM;AAAA,IAC5B;AAEA,cAAU,QAAQ,OAAK,EAAE,CAAC;AAC1B,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,QAAI,KAAK,MAAM,SAAS;AAAG;AAC3B,eAAW,MAAM;AACf,UAAI,SAAS,KAAK,QAAQ,MAAM;AAChC,aAAO,WAAW,QAAW;AAC3B,eAAO;AACP,iBAAS,KAAK,QAAQ,MAAM;AAAA,MAC9B;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,gBAAgB,WAA6B;AAClD,QAAI,OAAO,cAAc;AAAU,YAAM,MAAM,GAAG,SAAS,kBAAkB;AAC7E,UAAM,SAAS,UAAU,KAAK,EAAE,YAAY;AAC5C,QAAI,WAAW;AACb,YAAM,MAAM,2CAA2C,MAAM,EAAE;AACjE,WAAO,OAAO,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,aAAa,WAAmB;AACrC,QAAI,OAAO,cAAc;AAAU,YAAM,MAAM,GAAG,SAAS,kBAAkB;AAC7E,UAAM,SAAS,UAAU,KAAK,EAAE,YAAY;AAC5C,QAAI,WAAW;AACb,YAAM,MAAM,2CAA2C,MAAM,EAAE;AACjE,UAAM,QAAQ,SAAS,MAAM;AAC7B,QAAI,CAAC;AAAO,YAAM,MAAM,cAAc,MAAM,iBAAiB;AAI7D,UAAM,gBAAgB,EAAE,GAAG,MAAM;AACjC,eAAW,QAAQ,OAAO,KAAK,aAAa,GAAG;AAC7C,aAAO,eAAe,eAAe,MAAM;AAAA,QACzC,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,YAAY,WAAmB;AACpC,WAAO,IAAI,UAAS,SAAS;AAAA,EAC/B;AACF;AAQA,IAAO,0BAAQ;;;AR7Zf,IAAM,EAAE,iBAAAC,iBAAgB,IAAI,qBAAAC;AAI5B,IAAM,QAAQ;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACF;AAKA,SAAS,WAAW,SAA+B;AACjD,QAAM,EAAE,QAAQ,IAAI;AACpB,EAAI,aAAa,OAAO;AAC1B;AAIA,IAAM,EAAE,mBAAmB,IAAI,qBAAAA;",
  "names": ["module", "module", "TEXT", "makeStyleFormatter", "makeTerminalOut", "row", "module", "module", "module", "PROMPTS", "makeTerminalOut", "DIE", "module", "makeTerminalOut", "TEXT", "import_node_child_process", "import_node_path", "FSE", "PATH", "PROMPT", "FSE", "PATH", "import_util_prompts", "D_ASYNC", "LOG", "LOG", "import_node_path", "DBG", "import_util_prompts", "LOG", "PROMPT", "DBG", "ERROR", "import_util_prompts", "express", "import_util_prompts", "import_node_path", "LOG", "process", "PATH", "import_util_prompts", "makeTerminalOut", "PROMPTS"]
}
