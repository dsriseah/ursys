{
  "version": 3,
  "sources": ["../common/declare-console.js", "../common/util-prompts.js", "../common/util-text.js", "../browser-client/@client.ts", "../common/class-op-seq.ts", "../common/class-state-mgr.ts"],
  "sourcesContent": ["/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Console colors for both browser and terminal environments\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\n/// COLORS BY NAME ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst COLOR_NAMES = [\n  'Black',\n  'White',\n  'Red',\n  'Orange',\n  'Yellow',\n  'Green',\n  'Cyan',\n  'Blue',\n  'Purple',\n  'Pink',\n  'Gray'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM_COLORS = {\n  // TOUT = makeTerminalOut(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Orange: '\\x1b[38;5;202m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Purple: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgGray: '\\x1b[100m',\n  BgWhite: '\\x1b[47m',\n  BgRed: '\\x1b[41m',\n  BgOrange: '\\x1b[48;5;202m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgPink: '\\x1b[105m',\n\n  // FORMATS\n  TagBlack: '\\x1b[30;1m',\n  TagWhite: '\\x1b[37;1m',\n  TagRed: '\\x1b[41;37m',\n  TagOrange: '\\x1b[43;37m',\n  TagYellow: '\\x1b[43;30m',\n  TagGreen: '\\x1b[42;30m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[44;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[105;1m',\n  TagGray: '\\x1b[100;37m',\n  TagNull: '\\x1b[2;37m'\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CSS_COMMON = 'padding:3px 5px;border-radius:2px;';\nconst CSS_COLORS = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Orange: 'color:orange',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  Pink: 'color:pink',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_COMMON}`,\n  TagOrange: `color:#000;background-color:#fa4;${CSS_COMMON}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_COMMON}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_COMMON}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_COMMON}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_COMMON}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_COMMON}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_COMMON}`,\n  TagGray: `color:#fff;background-color:#999;${CSS_COMMON}`,\n  TagNull: `color:#999;border:1px solid #ddd;${CSS_COMMON}`,\n  // COLOR BACKGROUND DARK (BROWSER ONLY)\n  TagDkRed: `color:white;background-color:maroon;${CSS_COMMON}`,\n  TagDkOrange: `color:white;background-color:burntorange;${CSS_COMMON}`,\n  TagDkYellow: `color:white;background-color:brown;${CSS_COMMON}`,\n  TagDkGreen: `color:white;background-color:forestgreen;${CSS_COMMON}`,\n  TagDkCyan: `color:white;background-color:cerulean;${CSS_COMMON}`,\n  TagDkBlue: `color:white;background-color:darkblue;${CSS_COMMON}`,\n  TagDkPurple: `color:white;background-color:indigo;${CSS_COMMON}`,\n  TagDkPink: `color:white;background-color:fuchsia;${CSS_COMMON}`\n};\n\n/// COLORS BY MEANING /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SEMANTIC_FORMATS = [\n  'Build',\n  'Error',\n  'Alert',\n  'Test',\n  // system startup and components\n  'System',\n  'Server',\n  'Database',\n  'Network',\n  // urnet framework\n  'UR',\n  'URNET',\n  'URMOD',\n  // application\n  'AppMain',\n  'AppModule',\n  'AppState',\n  'AppCore',\n  'DataCore',\n  // user interface\n  'UI',\n  // events\n  'Phase',\n  'Event',\n  'Stream'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTERM_COLORS.TagBuild = TERM_COLORS.TagGray;\nTERM_COLORS.TagError = TERM_COLORS.TagRed;\nTERM_COLORS.TagAlert = TERM_COLORS.TagOrange;\nTERM_COLORS.TagTest = TERM_COLORS.TagRed;\n//\nTERM_COLORS.TagSystem = TERM_COLORS.TagGray;\nTERM_COLORS.TagServer = TERM_COLORS.TagGray;\nTERM_COLORS.TagDatabase = TERM_COLORS.TagCyan;\nTERM_COLORS.TagNetwork = TERM_COLORS.TagCyan;\n//\nTERM_COLORS.TagUR = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURNET = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURMOD = TERM_COLORS.TagBlue;\n//\nTERM_COLORS.TagAppMain = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppModule = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppState = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppCore = TERM_COLORS.TagGreen;\nTERM_COLORS.TagDataCore = TERM_COLORS.TagGreen;\n//\nTERM_COLORS.TagUI = TERM_COLORS.TagPurple;\n//\nTERM_COLORS.TagPhase = TERM_COLORS.TagPink;\nTERM_COLORS.TagEvent = TERM_COLORS.TagPink;\nTERM_COLORS.TagStream = TERM_COLORS.TagPink;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCSS_COLORS.TagDebug = `color:#fff;background-color:IndianRed;${CSS_COMMON}`;\nCSS_COLORS.TagWarning = `color:#fff;background:linear-gradient(\n  -45deg,\n  rgb(29,161,242),\n  rgb(184,107,107),\n  rgb(76,158,135)\n);${CSS_COMMON}`;\nCSS_COLORS.TagTest = CSS_COLORS.TagRed;\n//\nCSS_COLORS.TagSystem = CSS_COLORS.TagGray;\nCSS_COLORS.TagServer = CSS_COLORS.TagGray;\nCSS_COLORS.TagDatabase = CSS_COLORS.TagCyan;\nCSS_COLORS.TagNetwork = CSS_COLORS.TagCyan;\n//\nCSS_COLORS.TagUR = `color:CornflowerBlue;border:1px solid CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURNET = `color:#fff;background-color:MediumSlateBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURMOD = `color:#fff;background:linear-gradient(\n  -45deg,\n  CornflowerBlue 0%,\n  LightSkyBlue 25%,\n  RoyalBlue 100%\n);${CSS_COMMON}`;\nCSS_COLORS.TagAppMain = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppModule = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppState = `color:#fff;background-color:Navy;${CSS_COMMON}`;\nCSS_COLORS.TagUI = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagEvent = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagStream = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagPhase = `color:#fff;background-color:MediumVioletRed;${CSS_COMMON}`;\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM_COLORS,\n  CSS_COLORS\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\nconst IS_NODE = typeof window === 'undefined';\nconst IS_MOBILE =\n  !IS_NODE &&\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\nconst D_CONSOLE = require('./declare-console.js');\nconst { TERM_COLORS, CSS_COLORS } = D_CONSOLE;\n\nconst DEFAULT_PADDING = IS_NODE\n  ? 10 // nodejs\n  : 8; // not nodejs\nconst DEFAULT_SPACE = IS_NODE\n  ? ' '.padStart(DEFAULT_PADDING, ' ')\n  : ' '.padStart(DEFAULT_PADDING + 4, ' ');\n\nconst DEFAULT_COLOR = 'TagNull';\n\n// div console\nconst HTCONSOLES = {};\n\n/// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** define\n */\nconst SHOW = true;\nconst HIDE = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  'UR': [SHOW, 'TagRed'],\n  // SERVERS\n  'APPSRV': [SHOW, 'Yellow'],\n  'GEMSRV': [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\nfunction padString(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  const nbsp = String.fromCharCode(0x00a0); // unicode non-break space\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`;\n  // must be non-node environment, so do dynamic string adjust\n  if (padding === 0) return `${str}`;\n  // if this far, then we're truncating\n  if (len >= padding) str = str.substr(0, padding);\n  else str = str.padEnd(padding, nbsp);\n  return `${str}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a color to the PROMPT_DICT for a particular PREFIX */\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) colorTable = IS_NODE ? CSS_COLORS : TERM_COLORS;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor)\n    throw Error(`prompt color ${color} is not defined in either table`);\n  // turn on color prompt\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an array suitable for destructuring inside console.log() in\n *  either Node or the browser with color\n */\nfunction m_MakeColorArray(prompt, colorName) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, colorName);\n  // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n  if (!(dbg || IS_NODE)) return [];\n  return IS_NODE\n    ? [`${color}${padString(prompt)}${reset}   `] // server\n    : [`%c${padString(prompt)}%c `, color, reset]; // browser\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an environment-specific color wrapper function suitable for use\n *  in debug output. Use m_MakeColorArray() for browser output.\n */\nfunction m_MakeColorPromptFunction(prompt, colorName, opt = {}) {\n  const textColor = opt.color || 'Reset';\n  const dim = opt.dim || false;\n  return IS_NODE\n    ? (str, ...args) => {\n        if (args === undefined) args = '';\n        let TAG = TERM_COLORS[colorName];\n        let TEXT = TERM_COLORS[textColor];\n        let RST = TERM_COLORS.Reset;\n        let PR = padString(prompt);\n        if (dim) TEXT += TERM_COLORS.Dim;\n        console.log(`${RST}${TAG}${PR}${RST}${TEXT}    ${str}`, ...args);\n      }\n    : (str, ...args) => {\n        if (args === undefined) args = '';\n        let TEXT = TERM_COLORS[textColor];\n        let RST = CSS_COLORS.Reset;\n        let PR = padString(prompt);\n        console.log(`%c${PR}%c%c ${str}`, RST, TEXT, ...args);\n      };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_GetDivText(id) {\n  const el = document.getElementById(id);\n  if (!el) {\n    console.log(`GetDivText: element ${id} does not exist`);\n    return undefined;\n  }\n  const text = el.textContent;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return {};\n  }\n  el.style.whiteSpace = 'pre';\n  el.style.fontFamily = 'monospace';\n  return { element: el, text };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextJumpRow(row, lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (text === undefined) return lineBuffer;\n  // convert content to line buffer\n  if (lineBuffer.length === 0) {\n    console.log(`initializing linebuffer from element id='${id}'`);\n    lineBuffer = text.split('\\n'); // creates a NEW array\n  }\n  // handle line underflow in buffer if row exceeds line buffer\n  if (row > lineBuffer.length - 1) {\n    const count = row + 1 - lineBuffer.length;\n    for (let i = count; i > 0; i--) lineBuffer.push('');\n  }\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextPrint(str = '', lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (!text) return lineBuffer;\n  // append text\n  lineBuffer.push(str);\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Function to modify the text area of a passed HTML element. Always return\n *  lineBuffer so we can reassign the reference, as the array often changes.\n */\nfunction m_HTMLTextPlot(str = '', lineBuffer, id, row = 0, col = 0) {\n  const { element, text } = m_GetDivText(id);\n  if (!element) return lineBuffer;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return lineBuffer;\n  }\n  // ensure row exists\n  lineBuffer = m_HTMLTextJumpRow(row, lineBuffer, id);\n  // fetch line\n  let line = lineBuffer[row];\n  if (line === undefined) {\n    console.log(`HTMLTextOut: unexpected line error for line ${row}`);\n    return lineBuffer;\n  }\n  // handle column underflow in line if col exceeds line length\n  if (col + str.length > line.length + str.length) {\n    for (let i = 0; i < col + str.length - line.length; i++) line += ' ';\n  }\n  // insert str into line\n  let p1 = line.substr(0, col);\n  let p3 = line.substr(col + str.length, line.length - (col + str.length));\n  lineBuffer[row] = `${p1}${str}${p3}`;\n  // write buffer back out\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log(). This is supported\n *  in Chrome and Safari (somewhat), but not in Firefox as of last testing.\n *\n *  To create the function, provide a short PROMPT. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all PROMPTS in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allow modification of the PROMPT_DICT\n */\nfunction makeStyleFormatter(prompt, tagColor) {\n  if (prompt.startsWith('UR') && tagColor === undefined) tagColor = 'TagUR';\n  let outArray = m_MakeColorArray(prompt, tagColor);\n  if (outArray.length === 0) return () => [];\n  if (IS_MOBILE) outArray = [`${prompt}:`];\n  const f = (str, ...args) => [...outArray, str, ...args];\n  f._ = `\\n${DEFAULT_SPACE}`;\n  return f;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeErrorFormatter(pr = '') {\n  const bg = 'rgba(255,0,0,1)';\n  const bga = 'rgba(255,0,0,0.15)';\n  pr = `ERROR ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeWarningFormatter(pr = '') {\n  const bg = 'rgba(255,150,0,1)';\n  const bga = 'rgba(255,150,0,0.15)';\n  pr = `WARN ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use like console.log(...debugFormatter('prompt'), 'la la la'); */\nfunction dbgPrint(pr, bg = 'MediumVioletRed') {\n  return [\n    `%c${pr}%c`,\n    `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n    'color:auto;background-color:auto'\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction colorTagString(str, tagColor) {\n  return m_MakeColorArray(str, tagColor);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to directly print to console instead of returning an array.\n *  This works better for NodeJS since the empty [] still results in output\n *  unlike the browser. Use makeStyleFormatter for browsers\n */\nfunction makeTerminalOut(prompt, tagColor = DEFAULT_COLOR) {\n  const wrap = m_MakeColorPromptFunction(prompt, tagColor);\n  wrap.warn = m_MakeColorPromptFunction(prompt, 'TagYellow', { color: 'Yellow' });\n  wrap.error = m_MakeColorPromptFunction(prompt, 'TagRed', { color: 'Red' });\n  wrap.fail = m_MakeColorPromptFunction(prompt, 'Red', { color: 'Red' });\n  wrap.pass = m_MakeColorPromptFunction(prompt, 'Green', { color: 'Green' });\n  wrap.info = m_MakeColorPromptFunction(prompt, 'TagGray', { dim: true });\n  wrap.DIM = '\\x1b[2m'; // dim text\n  wrap.BRI = '\\x1b[1m'; // bright text\n  wrap.RST = '\\x1b[0m'; // reset text\n  return wrap;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to print a string, given a DIV id and optional row/column.\n */\nfunction makeHTMLConsole(divId, row = 0, col = 0) {\n  const ERP = makeStyleFormatter('makeHTMLConsole', 'Red');\n  let buffer = [];\n  if (typeof divId !== 'string') throw Error('bad id');\n  if (!document.getElementById(divId)) {\n    console.warn(...ERP(`id '${divId}' doesn't exist`));\n    return {\n      print: () => {},\n      plot: () => {},\n      clear: () => {},\n      gotoRow: () => {}\n    };\n  }\n  let hcon;\n  if (HTCONSOLES[divId]) {\n    hcon = HTCONSOLES[divId];\n  } else {\n    hcon = {\n      buffer: [],\n      plot: (str, y = row, x = col) => {\n        buffer = m_HTMLTextPlot(str, buffer, divId, y, x);\n      },\n      print: str => {\n        buffer = m_HTMLTextPrint(str, buffer, divId);\n      },\n      clear: (startRow = 0, endRow = buffer.length) => {\n        buffer.splice(startRow, endRow);\n      },\n      gotoRow: row => {\n        buffer = m_HTMLTextJumpRow(row, buffer, divId);\n      }\n    };\n    HTCONSOLES[divId] = hcon;\n  }\n  return hcon;\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Print all Tag Colors\n */\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE\n      ? [`${padString(out)} - (node) ${color}${key}${reset}`]\n      : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n}\n\n/// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  padString,\n  makeStyleFormatter,\n  makeErrorFormatter,\n  makeWarningFormatter,\n  dbgPrint,\n  makeTerminalOut,\n  makeHTMLConsole,\n  printTagColors,\n  colorTagString\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  description\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/// PARSER INPUT NORMALIZER ////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** This function takes a multi-line string and performs the following operations:\n *  - Makes sure all newline types with '\\n'\n *  - Removes all tab characters\n *  - Processes comma and colon delimited sequences in each line:\n *  - Removes whitespace around each delimiter except when inside quotes\n *  - Collapses all internal whitespace to a single space\n *  - Ensures that there is a trailing newline\n * (written, with effort, by ChatGPT4)\n * @param {string} str - The input string to be normalized.\n * @return {string} - The normalized string.\n */\nfunction PreprocessDataText(str) {\n  let normalizedStr = str.replace(/\\r\\n|\\r/g, '\\n'); // conform newlines\n  normalizedStr = normalizedStr // remove trailing/preserve leading whitespace\n    .split('\\n')\n    .map(line => line.replace(/\\s+$/, '')) // remove trailing\n    .map(line => line.replace(/^\\s+/, '')) // remove leading\n    .join('\\n');\n  normalizedStr = normalizedStr.replace(/\\t/g, '  '); // replace tabs with 2 spaces\n  let lines = normalizedStr.split('\\n'); // split string into lines\n  /** process whitespace around delimiters */\n  const processDelimited = (line, delimiter) => {\n    let parts = line.split(delimiter); // split lines based on delimiter\n    for (let i = 0; i < parts.length; i++) {\n      parts[i] = parts[i].trim();\n      parts[i] = parts[i].replace(/\\s+/g, ' ');\n    }\n    return parts.join(delimiter);\n  };\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = processDelimited(lines[i], ',', { preserve: true });\n    lines[i] = processDelimited(lines[i], ':', { preserve: true });\n  }\n  normalizedStr = lines.join('\\n').trim();\n  return normalizedStr + '\\n';\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  PreprocessDataText\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  entrypoint for client\n\n  when making live changes, make sure that the ur builder is also running and\n  users of this library are watching for changes to the ur library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n// note: cjs-style modules in 'common' can not be destructured on import\nimport PROMPTS from '../common/util-prompts.js';\nconst { makeStyleFormatter } = PROMPTS;\n// cjs-style modules\nimport TEXT from '../common/util-text.js';\n// typescript classes\nimport OpSequencer from '../common/class-op-seq.ts';\nimport StateMgr from '../common/class-state-mgr.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PR = makeStyleFormatter('UR', 'TagCyan');\nconst CLASS = {\n  OpSequencer,\n  StateMgr\n};\n\n/// TEST METHODS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction ClientTest(): void {\n  console.log(...PR('System Integration of new URSYS module successful!'));\n  // console.log(...PR('@ursys/core integration...works?'));\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // classes\n  TEXT,\n  CLASS,\n  PROMPTS,\n  StateMgr,\n  // formatting\n  makeStyleFormatter as ConsoleStyler, // style formatter for browser\n  // test\n  ClientTest\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Operation Sequencer\n\n  A simple sequencer that is initialized with TOpNode objects:\n  { name, data? } one after the other with addOp(). \n\n  The sequencer can be started, stopped, and moved forward and backward, \n  and can notify subscribers when the current operation changes.\n\n  usage:\n\n  const sequencer = new OpSequencer('MY SEQUENCER'); // unique UC name\n  sequencer.addOp('op1', { ... });\n  sequencer.addOp('op2', { ... });\n  sequencer.subscribe('op1', (newOp, oldOp) => { ... });\n  const op = sequencer.start();\n  while (op) op = sequencer.next();\n  sequencer.dispose();\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES /////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TOpSeqMap = Map<string, OpSequencer>;\ntype TOpChangeFunc = (newOp: TOpNode, oldOp: TOpNode, ops?: OpSequencer) => void;\ntype TDataObj = { [key: string]: any };\ntype TOpNode = {\n  data: TDataObj;\n  _seqName?: string;\n  _opName?: string;\n  _opIndex?: number;\n};\ntype TNodeOptions = {\n  mutable?: boolean; // data is frozen by default\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst OPSEQS: TOpSeqMap = new Map(); // lookup table of operation sequencers\n\n/// HELPER FUNCTIONS //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateSeqName(sn: string) {\n  const fn = 'm_ValidateSeqName';\n  const pcErr = 'name must be PascalCase string';\n  if (sn === '') throw Error(`${fn}: ${pcErr}`);\n  if (sn === undefined) throw Error(`${fn}: ${pcErr}`);\n  if (typeof sn !== 'string') throw Error(`${fn}: ${pcErr}`);\n  if (sn !== sn[0].toUpperCase() + sn.slice(1)) throw Error(`${fn}: ${pcErr}`);\n  if (sn.trim() !== sn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateActiveSeq(seq: OpSequencer) {\n  if (seq instanceof OpSequencer) {\n    if (seq._disposed) throw Error(`sequencer ${seq.seqName} is disposed`);\n    else return;\n  }\n  throw Error('not a sequence instance or undefined');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateNodeName(nn: string) {\n  const fn = 'm_ValidateNodeName';\n  if (nn === '') throw Error(`${fn}: name must be lc string`);\n  if (nn === undefined) throw Error(`${fn}: name must be lc string`);\n  if (typeof nn !== 'string') throw Error(`${fn}: name must be lc string`);\n  if (nn !== nn.toLowerCase()) throw Error(`${fn}: name must be lc`);\n  if (nn.trim() !== nn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass OpSequencer {\n  ops: TOpNode[]; // array of operations\n  seqName: string; // sequencer name\n  lastOp: TOpNode; // last operation\n  currentOp: TOpNode; // current operation\n  opIndex: number; // current operation index\n  opsMap: Map<string, number>; // map opname to index in ops array\n  subs: Map<string, Set<TOpChangeFunc>>; // map opname to set of subscribers\n  _disposed: boolean; // true if disposed\n\n  constructor(seqName: string) {\n    m_ValidateSeqName(seqName);\n    seqName = seqName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (OPSEQS.has(seqName)) {\n      console.warn(\n        `(not an error) '${seqName}' construction duplicate, returning existing instance`\n      );\n      return OPSEQS.get(seqName);\n    }\n    // otherwise, create a new instance and save it\n    this.seqName = seqName;\n    this.ops = [];\n    this.opsMap = new Map();\n    this.opIndex = -1;\n    this.currentOp = null;\n    this.lastOp = null;\n    this.subs = new Map();\n    this._disposed = false;\n    OPSEQS.set(seqName, this);\n  }\n\n  /* --- add nodes --- */\n\n  /** given nodeName and a source TOpNode, add a clone of the source node to the sequencer */\n  addOp(name: string, data: TDataObj, opt?: TNodeOptions): TOpNode {\n    const fn = 'addOp';\n    //\n    if (data === undefined) throw Error(`${fn}: arg2 must be TOpNode`);\n    if (typeof name !== 'string') throw Error(`${fn}: arg1 must be name:string`);\n    if (typeof data._name === 'string') throw Error(`${fn}: node ${name} reused`);\n    if (data._index !== undefined) throw Error(`${fn}: node ${name} reused`);\n    //\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    //\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.hasOp(name)) throw Error(`${fn}: node '${name}' already exists`);\n    //\n    const index = this.ops.length;\n    this.opsMap.set(name, index); // save lookup index by name\n    const newData = { ...data }; // copy of user data\n    if (opt?.mutable) Object.freeze(newData); // default is frozen\n    const newNode: TOpNode = {\n      _opIndex: index,\n      _seqName: this.seqName,\n      _opName: name,\n      data: newData\n    };\n    this.ops.push(newNode);\n    return newNode;\n  }\n\n  deleteOp(name: string): void {\n    const fn = 'deleteOp';\n    console.error(`${fn}: not implemented by design`);\n  }\n\n  /* --- access operations --- */\n\n  data(key?: string): TDataObj {\n    m_ValidateActiveSeq(this);\n    if (typeof key === 'string') return this.currentOp.data[key];\n    return this.currentOp.data;\n  }\n\n  length(): number {\n    m_ValidateActiveSeq(this);\n    return this.ops.length;\n  }\n\n  /* --- sequencer operations --- */\n\n  start(): TOpNode {\n    const fn = 'start';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.ops.length === 0) throw Error(`${fn}: no operations to run`);\n    this.opIndex = 0;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  current(): TOpNode {\n    const fn = 'current';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  stop(): TOpNode {\n    const fn = 'stop';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error('stop: sequencer not started');\n    this.opIndex = -1;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  next(): TOpNode {\n    const fn = 'next';\n    if (this.opIndex === -1) return this.start();\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === this.ops.length - 1) return undefined;\n    ++this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  previous(): TOpNode {\n    const fn = 'previous';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    if (this.opIndex === 0) return undefined;\n    --this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  /* --- node events --- */\n\n  subscribe(opName: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    if (!this.subs.has(opName)) this.subs.set(opName, new Set());\n    this.subs.get(opName).add(subf);\n  }\n\n  unsubscribe(name: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    if (!this.hasOp(name)) throw Error(`${fn}: node '${name}' does not exist`);\n    const subs = this.subs.get(name);\n    if (subs.has(subf)) subs.delete(subf);\n  }\n\n  _update() {\n    const fn = '_update';\n    m_ValidateActiveSeq(this);\n    this.lastOp = this.currentOp;\n    this.currentOp = this.ops[this.opIndex];\n  }\n\n  _notifyChange(): void {\n    const fn = '_notifyChange';\n    m_ValidateActiveSeq(this);\n    const subs = this.subs.get(this.currentOp._opName);\n    if (subs) subs.forEach(subf => subf(this.currentOp, this.lastOp, this));\n  }\n\n  /* --- node utilities --- */\n\n  hasOp(opName: string): boolean {\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    return this.ops.some(op => op._opName === opName);\n  }\n\n  matchOp(opName: string): boolean {\n    const fn = 'matchOp';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    return opName === this.ops[this.opIndex]._opName;\n  }\n\n  /** remove all nodes and subscribers */\n  dispose(): void {\n    OpSequencer.DeleteSequencer(this.seqName);\n  }\n\n  /* --- static utilities --- */\n\n  static GetSequencer(seqName: string): OpSequencer {\n    m_ValidateSeqName(seqName);\n    return OPSEQS.get(seqName);\n  }\n\n  static DeleteSequencer(seqName: string): void {\n    const seq = OpSequencer.GetSequencer(seqName);\n    seq.opsMap.clear();\n    seq.subs.forEach(subs => subs.clear());\n    seq.ops.length = 0;\n    seq._disposed = true;\n    OPSEQS.delete(seqName);\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default OpSequencer;\nexport type { TOpNode, TOpChangeFunc };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS State Manager Class\n  ported from GEMSTEP circa 2021\n\n  For use by modular application core features that require a centralized\n  state object that can be shared between modules. It manages named groups\n  of flattened state (react compatible) that are not allowed to have\n  overlapping property names across any group. This is to prevent lazy\n  reuse of property names in different parts of the app.\n\n  In general, methods that begin with _ are the tricky ones that are used\n  internally by an \"appcore\" module that is the single source of initialization\n  and truth. \n\n  DATA STRUCTURES\n\n  * vmStateEvent is an object with event-specific properties. When sent\n    to subscribers, it contains a groupName property matching the name of\n    the StateManager instance (e.g. LOCALE). This is not required (or even\n    settable) when using SendState( vmStateEvent )\n  * The difference between vmStateEvent and vmState is that the latter is\n    the complete state object, whereas the event has the same shape but\n    only includes the changed properties\n\n  SIMPLE EXAMPLE\n\n  // in managing appcore module\n  const STORE = new StateMgr('ScriptWizard');\n  STORE._initializeState({\n    prop1: 'value1',\n    prop2: 'value2'\n  });\n  const { prop1, prop2 } = STORE.State();\n\n  // in read-only module\n  const OTHER = StatMgr.GetStateManager('ScriptWizard');\n  const { prop1, prop2 } = OTHER.State();\n  \n  API REFERENCE\n\n  State: groupName => TStateObj;\n  SendState: TStateObj => void;\n  subscribeState: TStateChangeFunc => void;\n  unsubscribeState: TStateChangeFunc => void;\n  queueEffect: TEffectFunc => void;\n\n  INTERNAL API for APPCORE MANAGERS ONLY\n\n  _initializeState: TStateObj => void;\n  _setState: TStateObj => void;\n  _insertStateEvent: (TStateObj, TEffectFunc) => void;\n  _interceptState: TTapFunc => void;\n  _isValidState: TStateObj => boolean;\n  _mergeState: TStateObj => TStateObj;\n  _notifySubs: TStateObj => void;\n  _enqueue: TQueuedAction => void;\n  _dequeue: void => void;\n  _doEffect: void => void;\n\n  STATIC API\n  \n  GetStateManager: groupName => StateMgr;\n  GetStateData: groupName => TStateObj;\n  GetInstance: groupName => StateMgr;\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TStateObj = { [key: string]: any };\ntype TGroupName = string; // must be uppercase\ntype TPropName = string; // must be lowercase\ntype TGroupMap = Map<TGroupName, StateMgr>; // group name --> class instance\ntype TUsedProps = Map<TPropName, TGroupName>; // unique prop --> owning group\ntype TStateChangeFunc = (newState: TStateObj, curState: TStateObj) => void;\ntype TEffectFunc = () => void;\ntype TTapFunc = (state: TStateObj) => void;\ntype TQueuedAction = { stateEvent: TStateObj; callback: Function };\ninterface IStateMgr {\n  State: (key: string) => TStateObj;\n  SendState: (vmStateEvent: TStateObj, callback: Function) => void;\n  subscribeState: (subFunc: TStateChangeFunc) => void;\n  unsubscribeState: (subFunc: TStateChangeFunc) => void;\n  queueEffect: (effectFunc: TEffectFunc) => void;\n  _initializeState: (stateObj: TStateObj) => void;\n  _setState: (vmState: TStateObj) => void;\n  _interceptState: (tapFunc: TTapFunc) => void;\n  _insertStateEvent: (stateEvent: TStateObj, callback: TEffectFunc) => void;\n  _isValidState: (stateObj: TStateObj) => boolean;\n  _mergeState: (stateObj: TStateObj) => TStateObj;\n  _notifySubs: (stateObj: TStateObj) => void;\n  _enqueue: (action: TQueuedAction) => void;\n  _dequeue: () => void;\n  _doEffect: () => void;\n}\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst VM_STATE: TStateObj = {}; // global viewstate\nconst GROUPS: TGroupMap = new Map(); // lookup table of state managers\nconst USED_PROPS: TUsedProps = new Map(); // owner of registered properties\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass StateMgr {\n  name: string; // the name of this state group\n  init: boolean; // true if _initializeState has been called\n  subs: Set<TStateChangeFunc>;\n  queue: any[]; // queued state changes\n  taps: TTapFunc[]; // queued state interceptor hooks\n  effects: TEffectFunc[]; // queued side effects\n\n  /// CONSTRUCTOR /////////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  constructor(groupName: TGroupName) {\n    if (typeof groupName !== 'string') throw Error('groupName must be a string');\n    groupName = groupName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (GROUPS.has(groupName)) {\n      console.warn(\n        `(not an error) '${groupName}' construction duplicate, returning existing instance`\n      );\n      return GROUPS.get(groupName);\n    }\n    // otherwise create a new instance and save it\n    this.name = groupName;\n    this.init = false;\n    this.subs = new Set();\n    this.queue = [];\n    this.taps = [];\n    this.effects = [];\n    VM_STATE[this.name] = {};\n    // bind 'this' for use with async code\n    // if you don't do this, events will probably not have instance context\n    this.state = this.state.bind(this);\n    this.sendState = this.sendState.bind(this);\n    this.subscribeState = this.subscribeState.bind(this);\n    this.unsubscribeState = this.unsubscribeState.bind(this);\n    this.queueEffect = this.queueEffect.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this._setState = this._setState.bind(this);\n    this._insertStateEvent = this._insertStateEvent.bind(this);\n    this._interceptState = this._interceptState.bind(this);\n    this._isValidState = this._isValidState.bind(this);\n    this._mergeState = this._mergeState.bind(this);\n    this._notifySubs = this._notifySubs.bind(this);\n    this._enqueue = this._enqueue.bind(this);\n    this._dequeue = this._dequeue.bind(this);\n    this._doEffect = this._doEffect.bind(this);\n    // save the instance\n    GROUPS.set(this.name, this);\n  }\n\n  /// MAIN CLASS METHODS //////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a COPY of the current clonedEvent */\n  state(key: string): TStateObj {\n    // const state = { ...VM_STATE[this.name] };\n    const state = this._derefProps({ ...VM_STATE[this.name] });\n    if (typeof key === 'string' && key.length > 0) return state[key];\n    return state;\n  }\n\n  /** Handle a clonedEvent update from a subscribing module. The incoming\n   *  vmstateEvent is checked against the master state object to ensure it\n   *  contains valid keys. Any filter functions are allowed to mutate a copy of\n   *  the incoming state event.\n   *  @param {object} vmStateEvent - object with group-specific props\n   */\n  sendState(vmStateEvent: TStateObj, callback: Function) {\n    if (this._isValidState(vmStateEvent)) {\n      const clonedEvent = this._cloneStateObject(vmStateEvent);\n      this.taps.forEach(tap => tap(clonedEvent));\n      // queue the action for processing\n      const action = { stateEvent: clonedEvent, callback };\n      this._enqueue(action);\n    } else throw Error('SendState: invalid vmState update received, got:');\n  }\n\n  /** Subscribe to state. The subscriber function looks like:\n   *  ( vmStateEvent, currentState ) => void\n   */\n  subscribeState(subFunc: TStateChangeFunc) {\n    if (typeof subFunc !== 'function') throw Error('subscriber must be function');\n    if (this.subs.has(subFunc)) console.warn('duplicate subscriber function');\n    this.subs.add(subFunc);\n  }\n\n  /** Unsubscribe state */\n  unsubscribeState(subFunc: TStateChangeFunc) {\n    if (!this.subs.delete(subFunc))\n      console.warn('function not subscribed for', this.name);\n  }\n\n  /** When executing a side effect from a component, use this method to\n   *  hold it until after all state updates have completed, so the DOM\n   *  is stable\n   */\n  queueEffect(effectFunc: TEffectFunc) {\n    if (typeof effectFunc !== 'function') throw Error('effect must be a function');\n    this.effects.push(effectFunc);\n    this._doEffect();\n  }\n\n  /// CLASS HELPER METHODS ////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Set the state object directly. used to initialize the state from within\n   *  an appcore module. skips state validation because the VM_STATE entry\n   *  is an empty object\n   */\n  _initializeState(stateObj: TStateObj) {\n    // only allow this once per instance\n    if (this.init)\n      throw Error(`_initializeState: store '${this.name}' already initialized`);\n    // validate stateObj\n    Object.keys(stateObj).forEach(k => {\n      // must be all lowercase\n      if (k.toLowerCase() !== k)\n        throw Error(`_initializeState: props must be lowercase, not '${k}'`);\n      // must not contain undefined keys\n      if (stateObj[k] === undefined)\n        throw Error(\n          `_initializeState: prop '${k}' value can't be undefined (use null instead)`\n        );\n    });\n    // check that VM_STATE entry is valid (should be created by constructor)\n    if (VM_STATE[this.name]) {\n      Object.keys(stateObj).forEach(k => {\n        // skip the viewStateEvent key\n        if (k === '_group') return;\n        // check for duplicate keys. they must be unique across ALL state groups\n        const assTo = USED_PROPS.get(k);\n        if (assTo !== undefined) throw Error(`${k} already assigned to ${assTo}`);\n        // register the property name so it can't be used by another manager\n        USED_PROPS.set(k, this.name);\n      });\n      VM_STATE[this.name] = stateObj; // initialize!\n      this.init = true;\n    } else throw Error(`${this.name} does't exist in VM_STATE`);\n  }\n\n  /** In some cases, we want to update state but not trigger subscribers\n   *  related to it. Alias for _mergeState()\n   */\n  _setState(vmState: TStateObj) {\n    this._mergeState(vmState);\n  }\n\n  /** When SendState() is invoked, give the instance manager a change to\n   *  inspect the incoming state and do a side-effect and/or a filter.\n   *  They will run in order of interceptor registration\n   *  @param {function} tapFunc - receive stateEvent to mutate or act-on\n   */\n  _interceptState(tapFunc: TTapFunc) {\n    if (typeof tapFunc !== 'function') throw Error(`'${tapFunc}' is not a function`);\n    this.taps.push(tapFunc);\n  }\n\n  /** Allow synthesis of a state event by adding to queue without\n   *  immediately executing it. For use by _interceptState only.\n   *  Creates an action { stateObj, callback }\n   */\n  _insertStateEvent(stateEvent: TStateObj, callback: TEffectFunc) {\n    this._enqueue({ stateEvent, callback });\n  }\n\n  /** Return true if the event object conforms to expectations (see below) */\n  _isValidState(stateObj: TStateObj) {\n    // test 1 - is this event handled this manager instance?\n    // const grp = stateObj._group.trim().toUpperCase();\n    // if (grp !== this.name) return false;\n\n    // test 2 - any keys must already be defined in the store to\n    // avoid typo-based errors and other such crapiness\n    const curState = VM_STATE[this.name];\n    let keysOk = true;\n    Object.keys(stateObj).forEach(k => {\n      const keyTest = keysOk && curState[k] !== undefined;\n      if (keyTest === false) console.warn(`isValidState: '${k}' not a valid key`);\n      keysOk = keysOk && keyTest;\n    });\n    return keysOk;\n  }\n\n  /** Scan the object properties for arrays, and mutate with a new array.\n   *  In the case of an array containing references, the references will still\n   *  be the same but the array itself will be different\n   */\n  _derefProps(stateObj: TStateObj) {\n    Object.keys(stateObj).forEach(k => {\n      if (Array.isArray(stateObj[k])) stateObj[k] = [...stateObj[k]];\n    });\n    return stateObj;\n  }\n\n  /** Utility method to clone state event. It handles array cloning as well but\n   *  is otherwise a shallow clone\n   */\n  _cloneStateObject(stateObj: TStateObj) {\n    const clone = this._derefProps({ ...stateObj });\n    return clone;\n  }\n\n  /** Take a clonedEvent event object and update the VM_STATE entry with\n   *  its property values. This creates an entirely new state object\n   */\n  _mergeState(stateObj: TStateObj) {\n    if (!this._isValidState(stateObj)) return undefined;\n    // first make a new state object with copies of arrays\n    const newState = this._derefProps({\n      ...VM_STATE[this.name],\n      ...stateObj\n    });\n    // set the state\n    VM_STATE[this.name] = newState;\n    // also return the new state object\n    return newState;\n  }\n\n  /** Forward the event to everyone. The vmStateEvent object contains\n   *  properties that changed only, appending a 'stateGroup' identifier\n   *  that tells you who sent it. Sends a read-only copy.\n   */\n  _notifySubs(stateObj: TStateObj) {\n    // fire notification in the next event cycle to make sure\n    // that prior unsubscribes took effect\n    setTimeout(() => {\n      const subs = [...this.subs.values()];\n      stateObj.stateGroup = this.name; // mixed-case names reserved by system\n      // also include the total state\n      const currentState = this._derefProps({ ...VM_STATE[this.name] });\n      subs.forEach(sub => sub(stateObj, currentState));\n    });\n  }\n\n  /** Placeholder queueing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _enqueue(action: TQueuedAction) {\n    const { stateEvent, callback } = action;\n    if (!this._isValidState(stateEvent)) {\n      console.warn('bad vmStateEvent', stateEvent);\n      return;\n    }\n    if (callback && typeof callback !== 'function') {\n      console.warn('call must be function, not', typeof callback, callback);\n      return;\n    }\n    this.queue.push(action);\n    // placeholder processes immediately\n    this._dequeue();\n  }\n\n  /** Placeholder dequeing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _dequeue() {\n    const callbacks = [];\n    // iterate over all actions in queue\n    let action = this.queue.shift();\n    while (action !== undefined) {\n      const { vmStateEvent, callback } = action;\n      this._mergeState(vmStateEvent); // merge partial state into state\n      this._notifySubs(vmStateEvent); // send partial state to subs\n      if (typeof callback === 'function') callbacks.push(callback);\n      // get next action in queue\n      action = this.queue.shift();\n    }\n    // issues callbacks after ALL actions have completed\n    callbacks.forEach(f => f());\n    this._doEffect();\n  }\n\n  /** execute effect functions that have been queued, generally if there\n   *  are no pending state changes\n   */\n  _doEffect() {\n    if (this.queue.length > 0) return;\n    setTimeout(() => {\n      let effect = this.effects.shift();\n      while (effect !== undefined) {\n        effect();\n        effect = this.effects.shift();\n      }\n    });\n  }\n\n  /// STATIC METHODS //////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a state manager instance if it exists, undefined if not. Throws\n   *  errors if there are issues with the name */\n  static GetStateManager(groupName: string): StateMgr {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    return GROUPS[bucket];\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a locked copy of the state of a particular named state group.\n   *  Unlike GetStateManager, this returns just the data object.\n   */\n  static GetStateData(groupName: string) {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    const state = VM_STATE[bucket];\n    if (!state) throw Error(`stateGroup ${bucket} is not defined`);\n\n    // create a read-only copy of state and set all its properties to\n    // unwriteable\n    const readOnlyState = { ...state };\n    for (const prop of Object.keys(readOnlyState)) {\n      Object.defineProperty(readOnlyState, prop, {\n        writable: false\n      });\n    }\n    return readOnlyState;\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a Stage Manager instance. This just hides the new operator that\n   *  purposefully always returns an instance of an existing group if it\n   *  already exists\n   */\n  static GetInstance(groupName: string) {\n    return new StateMgr(groupName);\n  }\n}\n\n/// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return a READ-ONLY object containing state for a particular group */\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default StateMgr;\nexport type { TStateObj, TGroupName, TStateChangeFunc, TEffectFunc };\nexport type { IStateMgr };\n"],
  "mappings": "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",
  "names": ["module", "module", "TEXT", "PR", "makeStyleFormatter", "row", "module", "PROMPTS", "TEXT", "PROMPTS"]
}
