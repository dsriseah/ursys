{
  "version": 3,
  "sources": ["../web-client/@web-index.ts", "../web-client/sna-web.ts", "../common/util-prompts.ts", "../common/declare-colors.ts", "../common/util-urnet.ts", "../common/class-urnet-packet.ts", "../common/class-urnet-servicemap.ts", "../common/class-urnet-transaction.ts", "../common/class-urnet-endpoint.ts", "../common/class-urnet-socket.ts", "../web-client/sna-web-context.ts", "../web-client/sna-web-urnet-client.ts", "../common/class-phase-machine.ts", "../common/class-sna-component.ts", "../web-client/sna-web-hooks.ts", "../web-client/sna-dataclient.ts", "../common/util-data-norm.ts", "../common/util-data-search.ts", "../common/class-data-recordset.ts", "../common/class-event-machine.ts", "../common/abstract-data-databin.ts", "../common/class-data-itemlist.ts", "../common/util-data-ops.ts", "../common/class-data-dataset.ts", "../common/abstract-dataset-adapter.ts", "../common/util-text.ts", "../common/module-uid.ts", "../common/@common-classes.ts", "../common/class-mode-machine.ts", "../common/class-op-seq.ts", "../common/class-state-mgr.ts", "../common/abstract-dataobj-adapter.ts", "../common/class-data-manifest.ts"],
  "sourcesContent": ["/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Master Entrypoint for Public UR Client Library (client web browsers)\n\n  A currated set of client-related exports, used to build client-side apps and\n  support modules. \n  \n  Most of the useful constructs are exposed through the SNA object; see\n  the example-app/ for a working code template.\n  \n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: DATACLIENT, APPCONTEXT,\n * -       UseComponent, SetAppConfig, GetAppConfig, NewComponent\n *         Start, Status, HookAppPhase,\n * -       HookPhase, RunPhaseGroup, GetMachine, GetDangling\n * -       AddMessageHandler, DeleteMessageHandler, RegisterMessages,\n *         ClientEndpoint\n * -       MOD_DATACLIENT */\nexport * as SNA from './sna-web.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: Connect, AddMessageHandler, RegisterMessages,Disconnect */\n/// export * as CLIENT_EP from './urnet-browser.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: DecodeID, NewID, NewFullID, PrefixShortID,\n *         IsValidFormat, IsValidSchema, IsValidPrefix,\n *         SetDefaultSchema, GetDefaultSchema */\n/// export * as UID from '../common/module-uid.ts';\n\n/// FORWARDED COMMON EXPORTS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport * from '../common/@common.ts';\nimport * as CLASS from '../common/@common-classes.ts';\nexport { CLASS };\nexport { ConsoleStyler } from '../common/util-prompts.ts';\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Sri's New Architecture (SNA) Main Client Component\n\n  This can be imported by user components to start the SNA lifecyle on the\n  client side. It uses the MSG network to communicate with the server.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { ConsoleStyler } from '../common/util-prompts.ts';\nimport {\n  SNA_NetConnect,\n  AddMessageHandler,\n  RegisterMessages\n} from './sna-web-urnet-client.ts';\nimport {\n  SNA_UseComponent,\n  SNA_LifecycleStart,\n  SNA_LifecycleStatus,\n  SNA_HookAppPhase,\n  GetDanglingHooks\n} from './sna-web-hooks.ts';\nimport { SNA_SetAppConfig, SNA_GetAppConfig } from './sna-web-context.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype StartOptions = {\n  no_urnet?: boolean;\n  no_hmr?: boolean;\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log.bind(console);\nconst PR = ConsoleStyler('sna', 'TagGray');\n\n/// SNA LIFECYCLE /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: initialize the server's lifecycle */\nasync function SNA_Start(config: StartOptions) {\n  // get configuration flags\n  const { no_urnet, no_hmr } = config || {};\n  // prepare net hooks before starting the lifecycle\n  if (!no_urnet) {\n    SNA_HookAppPhase('DOM_READY', SNA_NetConnect);\n    SNA_HookAppPhase('NET_READY', async () => {\n      if (!no_hmr) {\n        AddMessageHandler('NET:UR_HOT_RELOAD_APP', async () => {\n          LOG(\n            '%cHot Reload Requested. Complying in 1 sec...',\n            'color: #f00; font-size: larger; font-weight: bold;'\n          );\n          setTimeout(() => {\n            window.location.reload();\n          }, 1500);\n        });\n      } else {\n        LOG(\n          `%cHot Module Reload disabled`,\n          'color: #f00; font-size: larger; font-weight: bold;'\n        );\n      }\n    });\n    SNA_HookAppPhase('NET_DECLARE', async () => {\n      await RegisterMessages();\n    });\n  } else {\n    const css =\n      'color: #ff0000;padding:4px 8px;' +\n      'background-color:#ff000020;font-weight:bold;';\n\n    LOG(`%cSTANDALONE MODE (URNET DISABLED)`, css);\n  }\n\n  // log when the app is running\n  SNA_HookAppPhase('APP_RUN', () => {\n    const css =\n      'color: #008000;padding:4px 8px;' +\n      'background-color:#00800020;font-weight:bold;';\n    LOG(`%cSNA App Initialization Complete`, css);\n  });\n\n  // now start the lifecycle\n  await SNA_LifecycleStart();\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: retrieve SNA status object */\nfunction SNA_Status() {\n  const dooks = GetDanglingHooks();\n  const status = SNA_LifecycleStatus();\n  return {\n    dooks,\n    ...status\n  };\n}\n\n/// SNA MODULES PACKAGING /////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// remember to import SNA_Component default, which has _name property set\nimport MOD_DataClient from './sna-dataclient.ts';\n/// export the actual module API\nexport * as DATACLIENT from './sna-dataclient.ts';\nexport * as APPCONTEXT from './sna-web-context.ts';\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // sna process\n  SNA_UseComponent as UseComponent,\n  SNA_SetAppConfig as SetAppConfig,\n  SNA_GetAppConfig as GetAppConfig,\n  SNA_Start as Start,\n  SNA_Status as Status,\n  SNA_HookAppPhase as HookAppPhase,\n  // included modules\n  MOD_DataClient\n};\nexport {\n  // phase machine static methods\n  HookPhase as HookPhase,\n  RunPhaseGroup,\n  GetMachine,\n  GetDanglingHooks,\n  // sna modules\n  SNA_NewComponent as NewComponent\n} from './sna-web-hooks.ts';\nexport {\n  // urnet static methods\n  AddMessageHandler,\n  DeleteMessageHandler,\n  RegisterMessages,\n  ClientEndpoint\n} from './sna-web-urnet-client.ts';\nexport { ConsoleStyler } from '../common/util-prompts.ts';\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\nconst IS_NODE = typeof window === 'undefined';\nconst IS_MOBILE =\n  !IS_NODE &&\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n\nconst DEFAULT_PADDING = IS_NODE\n  ? 10 // nodejs\n  : 8; // not nodejs\nconst DEFAULT_SPACE = IS_NODE\n  ? ' '.padStart(DEFAULT_PADDING, ' ')\n  : ' '.padStart(DEFAULT_PADDING + 4, ' ');\n\n/// CONSTANTS & DECLARATIONS /////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport { TERM_COLORS, CSS_COLORS, ANSI_COLORS } from './declare-colors.ts';\nconst DEFAULT_COLOR = 'TagNull';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// div console\nconst HTCONSOLES = {};\n\n/// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SHOW = true;\nconst HIDE = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  UR: [SHOW, 'TagRed'],\n  // SERVERS\n  APPSRV: [SHOW, 'Yellow'],\n  GEMSRV: [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\nfunction u_pad(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  const nbsp = String.fromCharCode(0x00a0); // unicode non-break space\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`;\n  // must be non-node environment, so do dynamic string adjust\n  if (padding === 0) return `${str}`;\n  // if this far, then we're truncating\n  if (len >= padding) str = str.substr(0, padding);\n  else str = str.padEnd(padding, nbsp);\n  return `${str}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a color to the PROMPT_DICT for a particular PREFIX */\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) colorTable = IS_NODE ? CSS_COLORS : TERM_COLORS;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor)\n    throw Error(`prompt color ${color} is not defined in either table`);\n  // turn on color prompt\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an array suitable for destructuring inside console.log() in\n *  either Node or the browser with color\n */\nfunction m_MakeColorArray(prompt, colorName) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, colorName);\n  // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n  if (!(dbg || IS_NODE)) return [];\n  return IS_NODE\n    ? [`${color}${u_pad(prompt)}${reset}   `] // server\n    : [`%c${u_pad(prompt)}%c `, color, reset]; // browser\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an environment-specific color wrapper function suitable for use\n *  in debug output. Use m_MakeColorArray() for browser output.\n */\nfunction m_MakeColorPromptFunction(prompt, colorName, opt: any = {}) {\n  const textColor = opt.color || 'Reset';\n  const dim = opt.dim || false;\n  const pad = opt.pad || DEFAULT_PADDING;\n  return IS_NODE\n    ? (str, ...args) => {\n        // @ts-ignore - args can be string or array of strings\n        if (args === undefined) args = '';\n        let TAG = TERM_COLORS[colorName];\n        let TEXT = TERM_COLORS[textColor];\n        let RST = TERM_COLORS.Reset;\n        let PR;\n        let SPC;\n        if (prompt.startsWith(' ')) {\n          PR = ` ${prompt.trim()} `;\n          SPC = ' ';\n        } else {\n          PR = u_pad(prompt, pad);\n          SPC = '    ';\n        }\n        if (dim) TEXT += TERM_COLORS.Dim;\n        console.log(`${RST}${TAG}${PR}${RST}${TEXT}${SPC}${str}`, ...args, RST);\n      }\n    : (str, ...args) => {\n        // @ts-ignore - args can be string or array of strings\n        if (args === undefined) args = '';\n        let TEXT = TERM_COLORS[textColor];\n        let RST = CSS_COLORS.Reset;\n        let PR = u_pad(prompt, pad);\n        console.log(`%c${PR}%c%c ${str}`, RST, TEXT, ...args);\n      };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_GetDivText(id) {\n  const el = document.getElementById(id);\n  if (!el) {\n    console.log(`GetDivText: element ${id} does not exist`);\n    return undefined;\n  }\n  const text = el.textContent;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return {};\n  }\n  el.style.whiteSpace = 'pre';\n  el.style.fontFamily = 'monospace';\n  return { element: el, text };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextJumpRow(row, lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (text === undefined) return lineBuffer;\n  // convert content to line buffer\n  if (lineBuffer.length === 0) {\n    console.log(`initializing linebuffer from element id='${id}'`);\n    lineBuffer = text.split('\\n'); // creates a NEW array\n  }\n  // handle line underflow in buffer if row exceeds line buffer\n  if (row > lineBuffer.length - 1) {\n    const count = row + 1 - lineBuffer.length;\n    for (let i = count; i > 0; i--) lineBuffer.push('');\n  }\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextPrint(str = '', lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (!text) return lineBuffer;\n  // append text\n  lineBuffer.push(str);\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Function to modify the text area of a passed HTML element. Always return\n *  lineBuffer so we can reassign the reference, as the array often changes.\n */\nfunction m_HTMLTextPlot(str = '', lineBuffer, id, row = 0, col = 0) {\n  const { element, text } = m_GetDivText(id);\n  if (!element) return lineBuffer;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return lineBuffer;\n  }\n  // ensure row exists\n  lineBuffer = m_HTMLTextJumpRow(row, lineBuffer, id);\n  // fetch line\n  let line = lineBuffer[row];\n  if (line === undefined) {\n    console.log(`HTMLTextOut: unexpected line error for line ${row}`);\n    return lineBuffer;\n  }\n  // handle column underflow in line if col exceeds line length\n  if (col + str.length > line.length + str.length) {\n    for (let i = 0; i < col + str.length - line.length; i++) line += ' ';\n  }\n  // insert str into line\n  let p1 = line.substr(0, col);\n  let p3 = line.substr(col + str.length, line.length - (col + str.length));\n  lineBuffer[row] = `${p1}${str}${p3}`;\n  // write buffer back out\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log(). This is supported\n *  in Chrome and Safari (somewhat), but not in Firefox as of last testing.\n *\n *  To create the function, provide a short prompt. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all prompts in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allow modification of the PROMPT_DICT\n */\nfunction makeStyleFormatter(prompt, tagColor) {\n  if (prompt.startsWith('UR') && tagColor === undefined) tagColor = 'TagUR';\n  let outArray = m_MakeColorArray(prompt, tagColor);\n  if (outArray.length === 0) return () => [];\n  if (IS_MOBILE) outArray = [`${prompt}:`];\n  const f = (str, ...args) => [...outArray, str, ...args];\n  f._ = `\\n${DEFAULT_SPACE}`;\n  return f;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeErrorFormatter(pr = '') {\n  const bg = 'rgba(255,0,0,1)';\n  const bga = 'rgba(255,0,0,0.15)';\n  pr = `ERROR ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeWarningFormatter(pr = '') {\n  const bg = 'rgba(255,150,0,1)';\n  const bga = 'rgba(255,150,0,0.15)';\n  pr = `WARN ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use like console.log(...debugFormatter('prompt'), 'la la la'); */\nfunction dbgPrint(pr, bg = 'MediumVioletRed') {\n  return [\n    `%c${pr}%c`,\n    `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n    'color:auto;background-color:auto'\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction colorTagString(str, tagColor) {\n  return m_MakeColorArray(str, tagColor);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to directly print to console instead of returning an array.\n *  This works better for NodeJS since the empty [] still results in output\n *  unlike the browser. Use makeStyleFormatter for browsers\n */\nfunction makeTerminalOut(prompt, tagColor = DEFAULT_COLOR, pad = DEFAULT_PADDING) {\n  const wrap: any = m_MakeColorPromptFunction(prompt, tagColor, { pad });\n  wrap.warn = m_MakeColorPromptFunction(prompt, 'TagYellow', {\n    color: 'Yellow',\n    pad\n  });\n  wrap.error = m_MakeColorPromptFunction(prompt, 'TagRed', {\n    color: 'Red',\n    pad\n  });\n  wrap.fail = m_MakeColorPromptFunction(prompt, 'Red', { color: 'Red', pad });\n  wrap.pass = m_MakeColorPromptFunction(prompt, 'Green', {\n    color: 'Green',\n    pad\n  });\n  wrap.info = m_MakeColorPromptFunction(prompt, 'TagGray', { dim: true, pad });\n  wrap.DIM = '\\x1b[2m'; // dim text\n  wrap.BRI = '\\x1b[1m'; // bright text\n  wrap.RST = '\\x1b[0m'; // reset text\n  return wrap;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to print a string, given a DIV id and optional row/column.\n */\nfunction makeHTMLConsole(divId, row = 0, col = 0) {\n  const ERP = makeStyleFormatter('makeHTMLConsole', 'Red');\n  let buffer = [];\n  if (typeof divId !== 'string') throw Error('bad id');\n  if (!document.getElementById(divId)) {\n    console.warn(...ERP(`id '${divId}' doesn't exist`));\n    return {\n      print: () => {},\n      plot: () => {},\n      clear: () => {},\n      gotoRow: () => {}\n    };\n  }\n  let hcon;\n  if (HTCONSOLES[divId]) {\n    hcon = HTCONSOLES[divId];\n  } else {\n    hcon = {\n      buffer: [],\n      plot: (str, y = row, x = col) => {\n        buffer = m_HTMLTextPlot(str, buffer, divId, y, x);\n      },\n      print: str => {\n        buffer = m_HTMLTextPrint(str, buffer, divId);\n      },\n      clear: (startRow = 0, endRow = buffer.length) => {\n        buffer.splice(startRow, endRow);\n      },\n      gotoRow: row => {\n        buffer = m_HTMLTextJumpRow(row, buffer, divId);\n      }\n    };\n    HTCONSOLES[divId] = hcon;\n  }\n  return hcon;\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Print all Tag Colors\n */\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE\n      ? [`${u_pad(out)} - (node) ${color}${key}${reset}`]\n      : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n}\n\n/// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// for esm\nexport {\n  TERM_COLORS as TERM,\n  CSS_COLORS as CSS,\n  ANSI_COLORS as ANSI,\n  makeStyleFormatter as ConsoleStyler,\n  makeTerminalOut as TerminalLog\n};\n// for node cjs bs\nexport default {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  ANSI: ANSI_COLORS,\n  ConsoleStyler: makeStyleFormatter,\n  TerminalLog: makeTerminalOut\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Console colors for both browser and terminal environments\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype ColorDict = { [key: string]: string };\n\n/// COLORS BY NAME ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst COLOR_NAMES = [\n  'Black',\n  'White',\n  'Red',\n  'Orange',\n  'Yellow',\n  'Green',\n  'Cyan',\n  'Blue',\n  'Purple',\n  'Pink',\n  'Gray'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM_COLORS: ColorDict = {\n  // TOUT = TerminalLog(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Orange: '\\x1b[38;5;202m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Purple: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgGray: '\\x1b[100m',\n  BgWhite: '\\x1b[47m',\n  BgRed: '\\x1b[41m',\n  BgOrange: '\\x1b[48;5;202m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgPink: '\\x1b[105m',\n\n  // FORMATS\n  TagBlack: '\\x1b[30;1m',\n  TagWhite: '\\x1b[37;1m',\n  TagRed: '\\x1b[41;37m',\n  TagOrange: '\\x1b[43;37m',\n  TagYellow: '\\x1b[43;30m',\n  TagGreen: '\\x1b[42;30m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[44;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[105;1m',\n  TagGray: '\\x1b[100;37m',\n  TagNull: '\\x1b[2;37m'\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CSS_COMMON = 'padding:3px 5px;border-radius:2px;';\nconst CSS_COLORS: ColorDict = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Orange: 'color:orange',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  Pink: 'color:pink',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_COMMON}`,\n  TagOrange: `color:#000;background-color:#fa4;${CSS_COMMON}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_COMMON}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_COMMON}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_COMMON}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_COMMON}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_COMMON}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_COMMON}`,\n  TagGray: `color:#fff;background-color:#999;${CSS_COMMON}`,\n  TagNull: `color:#999;border:1px solid #ddd;${CSS_COMMON}`,\n  // COLOR BACKGROUND DARK (BROWSER ONLY)\n  TagDkRed: `color:white;background-color:maroon;${CSS_COMMON}`,\n  TagDkOrange: `color:white;background-color:burntorange;${CSS_COMMON}`,\n  TagDkYellow: `color:white;background-color:brown;${CSS_COMMON}`,\n  TagDkGreen: `color:white;background-color:forestgreen;${CSS_COMMON}`,\n  TagDkCyan: `color:white;background-color:cerulean;${CSS_COMMON}`,\n  TagDkBlue: `color:white;background-color:darkblue;${CSS_COMMON}`,\n  TagDkPurple: `color:white;background-color:indigo;${CSS_COMMON}`,\n  TagDkPink: `color:white;background-color:fuchsia;${CSS_COMMON}`\n};\n\n/// COLORS BY MEANING /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SEMANTIC_FORMAT_REFERENCE = [\n  'Build',\n  'Error',\n  'Alert',\n  'Test',\n  // system startup and components\n  'System',\n  'Server',\n  'Database',\n  'Network',\n  // urnet framework\n  'UR',\n  'URNET',\n  'URMOD',\n  // application\n  'AppMain',\n  'AppModule',\n  'AppState',\n  'AppCore',\n  'DataCore',\n  // user interface\n  'UI',\n  // events\n  'Phase',\n  'Event',\n  'Stream'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTERM_COLORS.TagBuild = TERM_COLORS.TagGray;\nTERM_COLORS.TagError = TERM_COLORS.TagRed;\nTERM_COLORS.TagAlert = TERM_COLORS.TagOrange;\nTERM_COLORS.TagTest = TERM_COLORS.TagRed;\n//\nTERM_COLORS.TagSystem = TERM_COLORS.TagGray;\nTERM_COLORS.TagServer = TERM_COLORS.TagGray;\nTERM_COLORS.TagDatabase = TERM_COLORS.TagCyan;\nTERM_COLORS.TagNetwork = TERM_COLORS.TagCyan;\n//\nTERM_COLORS.TagUR = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURNET = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURMOD = TERM_COLORS.TagBlue;\n//\nTERM_COLORS.TagAppMain = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppModule = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppState = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppCore = TERM_COLORS.TagGreen;\nTERM_COLORS.TagDataCore = TERM_COLORS.TagGreen;\n//\nTERM_COLORS.TagUI = TERM_COLORS.TagPurple;\n//\nTERM_COLORS.TagPhase = TERM_COLORS.TagPink;\nTERM_COLORS.TagEvent = TERM_COLORS.TagPink;\nTERM_COLORS.TagStream = TERM_COLORS.TagPink;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCSS_COLORS.TagDebug = `color:#fff;background-color:IndianRed;${CSS_COMMON}`;\nCSS_COLORS.TagWarning = `color:#fff;background:linear-gradient(\n  -45deg,\n  rgb(29,161,242),\n  rgb(184,107,107),\n  rgb(76,158,135)\n);${CSS_COMMON}`;\nCSS_COLORS.TagTest = CSS_COLORS.TagRed;\n//\nCSS_COLORS.TagSystem = CSS_COLORS.TagGray;\nCSS_COLORS.TagServer = CSS_COLORS.TagGray;\nCSS_COLORS.TagDatabase = CSS_COLORS.TagCyan;\nCSS_COLORS.TagNetwork = CSS_COLORS.TagCyan;\n//\nCSS_COLORS.TagUR = `color:CornflowerBlue;border:1px solid CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURNET = `color:#fff;background-color:MediumSlateBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURMOD = `color:#fff;background:linear-gradient(\n  -45deg,\n  CornflowerBlue 0%,\n  LightSkyBlue 25%,\n  RoyalBlue 100%\n);${CSS_COMMON}`;\nCSS_COLORS.TagAppMain = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppModule = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppState = `color:#fff;background-color:Navy;${CSS_COMMON}`;\nCSS_COLORS.TagUI = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagEvent = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagStream = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagPhase = `color:#fff;background-color:MediumVioletRed;${CSS_COMMON}`;\n\n/// CONVENENICE CONSTANTS /////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** these are used for direct color output with console.log in node */\nconst ANSI_COLORS = {\n  BLU: '\\x1b[34;1m',\n  YEL: '\\x1b[33;1m',\n  RED: '\\x1b[31m',\n  //\n  DIM: '\\x1b[2m',\n  BLD: '\\x1b[1m',\n  NRM: '\\x1b[0m',\n  BRI: '\\x1b[1m'\n};\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// export both named and default for mts and ts interoperability\nexport { TERM_COLORS, CSS_COLORS, ANSI_COLORS };\nexport default { TERM_COLORS, CSS_COLORS, ANSI_COLORS };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URNET Type Conformance Utilities\n\n  This file contains the types used by NetEndpoint and NetPacket.\n  The NetEndpoint class is the main interface for sending and receiving\n  NetPackets. NetPackets are the encapsulated messages that are sent.\n\n  Type Concepts:\n\n  MSG Messages  - made of CHANNEL and a NAME, e.g. 'NET:HELLO_WORLD'\n  ADDR Address  - every endpoint has an address, e.g. 'UR_001'\n  NP NetPacket  - NetPacket-related types, e.g. NP_ID, NP_Chan, NP_Msg\n  EP Endpoint   - Endpoint-related type are in class-urnet-endpoint.ts\n  PKT Packet    - shorthand for NetPacket\n\n  CROSS PLATFORM USAGE --------------------------------------------------------\n\n  When using from nodejs mts file, you can only import functions from 'default',\n  so to access the NetPacket class do this:\n\n    import UR_TYPES from './my-types.ts';\n    const { AllocateAddress } = UR_TYPES.default; // note .default\n\n  You can import the types as usual, though:\n\n    import UR_TYPES, { NP_Msg, NP_Data } from './my-types.ts';\n\n  This is not required when importing from another .ts typescript file\n  such as class-urnet-endpoint.ts.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE IMPORTS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  NP_Chan,\n  NP_Type,\n  NP_Msg,\n  NP_Data,\n  NP_Hash,\n  NP_Address,\n  NP_AddrPre,\n  I_NetMessage\n} from '../_types/urnet.d.ts';\n\n/// RUNTIME UTILITIES /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** note: these runtime checks have mirrored declarations in ursys.d.ts **/\nconst VALID_MSG_CHANNELS = ['SYNC', 'NET', 'SRV', 'LOCAL', ''] as const;\nconst VALID_PKT_TYPES = [\n  'ping',\n  'signal',\n  'send',\n  'call',\n  '_auth', // special packet\n  '_reg', // special packet\n  '_decl' // special packet\n] as const;\nconst VALID_ADDR_PREFIX = ['???', 'UR_', 'WSS', 'UDS', 'MQT', 'SRV'] as const;\nconst SKIP_SELF_PKT_TYPES = ['call', 'send'];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst UADDR_DIGITS = 3; // number of digits in UADDR (padded with 0)\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst USED_ADDRS = new Set<NP_Address>();\n// make string foo with a number of zeros equal to UADDR_DIGITS length\nconst zeroPad = `0`.padStart(UADDR_DIGITS, '0');\nconst UADDR_NONE = `???${zeroPad}` as NP_Address; // unroutable address\n\n/// FUNCTION SIGNATURES ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Type */\nfunction IsValidType(msg_type: string): boolean {\n  return VALID_PKT_TYPES.includes(msg_type as NP_Type);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** some message types should not invoke back to the same pkt origin\n *  returning true 'call' and 'send'\n */\nfunction SkipOriginType(msg_type: string): boolean {\n  return SKIP_SELF_PKT_TYPES.includes(msg_type as NP_Type);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of protocol-related NP_Type */\nfunction isSpecialPktType(msg_type: string): boolean {\n  if (!IsValidType(msg_type)) return false;\n  return msg_type.startsWith('_');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Chan */\nfunction IsValidChannel(msg_chan: string): boolean {\n  return VALID_MSG_CHANNELS.includes(msg_chan as NP_Chan);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Address */\nfunction IsValidAddress(addr: string): boolean {\n  if (typeof addr !== 'string') return false;\n  let prelen = 0;\n  if (\n    !VALID_ADDR_PREFIX.some(pre => {\n      prelen = pre.length;\n      return addr.startsWith(pre);\n    })\n  )\n    return false;\n  const num = parseInt(addr.slice(prelen));\n  if (isNaN(num)) return false;\n  return true;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Msg, returns array if good otherwise it returns undefined */\nfunction IsValidMessage(msg: NP_Msg): [NP_Chan, string] {\n  try {\n    return DecodeMessage(msg);\n  } catch (err) {\n    console.log(err.message);\n    console.log(err.stack.split('\\n').slice(1).join('\\n').trim());\n    return undefined;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime create formatted address */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet ADDR_MAX_ID = 0;\ntype AllocateOptions = { prefix?: NP_AddrPre; addr?: NP_Address };\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allocate a new address, optionally with a label */\nfunction AllocateAddress(opt?: AllocateOptions): NP_Address {\n  const fn = 'AllocateAddress';\n  let addr = opt?.addr; // manually-set address\n  let pre = opt?.prefix || 'UA'; // address prefix\n  if (addr === undefined) {\n    // generate a new address\n    let id = ++ADDR_MAX_ID;\n    let padId = `${id}`.padStart(UADDR_DIGITS, '0');\n    addr = `${pre}${padId}` as NP_Address;\n  } else if (USED_ADDRS.has(addr)) {\n    // the manually-set address is already in use\n    throw Error(`${fn} - address ${addr} already allocated`);\n  }\n  USED_ADDRS.add(addr);\n  return addr;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a CHANNEL:MESSAGE string, return the channel and message name in\n *  an array */\nfunction DecodeMessage(msg: NP_Msg): [NP_Chan, string] {\n  if (typeof msg !== 'string') throw Error(`message must be string: ${msg}`);\n  if (msg !== msg.toUpperCase()) throw Error(`message must be uppercase: ${msg}`);\n  if (msg.endsWith('_')) throw Error(`message can not end with _: ${msg}`);\n  const bits = msg.split(':');\n  if (bits.length === 0) throw Error(`invalid empty message`);\n  if (bits.length > 2) throw Error(`invalid channel:message format ${msg}`);\n  let [chan, name] = bits;\n  if (bits.length === 1) {\n    name = chan;\n    chan = 'LOCAL';\n  }\n  if (chan === '') chan = 'LOCAL';\n  if (!IsValidChannel(chan))\n    throw Error(`prefix must be ${VALID_MSG_CHANNELS.join(' ').trim()} not ${chan}`);\n  return [chan as NP_Chan, name];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** make sure that the message is always consistent. Officially, a local\n *  message begins with : and a network message begins with NET:\n */\nfunction NormalizeMessage(msg: NP_Msg): NP_Msg {\n  let [chan, name] = DecodeMessage(msg);\n  if (chan === 'LOCAL') chan = '';\n  return `${chan}:${name}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** make sure that degenerate arrays turn into single object */\nfunction NormalizeData(data: NP_Data): NP_Data {\n  // if not an array just return as-is\n  if (!Array.isArray(data)) return data;\n  // no handlers for empty array\n  if (data.length === 0) return undefined;\n  // replace undefined with empty object\n  for (let i = 0; i < data.length; i++) if (data[i] === undefined) data[i] = {};\n  // if only one element, return it as a single object\n  if (data.length == 1) return data[0];\n  // otherwise return the normalized array\n  return data;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is a local request */\nfunction IsLocalMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'LOCAL';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is a network request */\nfunction IsNetMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'NET' || chan === 'SRV' || chan === 'SYNC';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is implemented by main URNET server */\nfunction IsServerMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'SRV' || chan === 'SYNC';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a packet, return a unique hash string */\nfunction GetPacketHashString(pkt: I_NetMessage): NP_Hash {\n  return `${pkt.src_addr}:${pkt.id}`;\n}\n\n/// EXPORTS /////////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  IsValidType,\n  SkipOriginType,\n  isSpecialPktType,\n  IsValidChannel,\n  IsValidAddress,\n  IsValidMessage,\n  AllocateAddress,\n  DecodeMessage,\n  NormalizeMessage,\n  NormalizeData,\n  IsLocalMessage,\n  IsNetMessage,\n  IsServerMessage,\n  GetPacketHashString\n};\nexport {\n  VALID_MSG_CHANNELS,\n  VALID_PKT_TYPES,\n  VALID_ADDR_PREFIX,\n  SKIP_SELF_PKT_TYPES,\n  UADDR_DIGITS,\n  UADDR_NONE\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetPacket encapsulates a message sent over URNET, including metadata\n  to route the packet across the network and return responses.\n\n  Works closely with NetEndpoint, which handles the actual sending and\n  receiving of packets. In practice, use Endpoint.newPacket() to create a new \n  packet that has the correct source address and id.\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import this ts file as 'default' \n  property. To access the NetPacket class do this:\n\n    import CLASS_NP from './class-urnet-packet';\n    const NetPacket = CLASS_NP.default; // note .default\n\n  This is not required when importing from another .ts typescript file\n  such as class-urnet-endpoint.ts.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport {\n  DecodeMessage,\n  IsValidMessage,\n  IsValidAddress,\n  IsValidType,\n  UADDR_NONE\n} from './util-urnet.ts';\n\n/// TYPE IMPORTS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { I_NetMessage, I_NetSocket, NP_Address } from '../_types/urnet.d.ts';\nimport type { NP_ID, NP_Type, NP_Dir, NP_Msg, NP_Data } from '../_types/urnet.d.ts';\nimport type { NP_Options } from '../_types/urnet.d.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\n// @ts-ignore - multiplatform definition check\nconst PR = typeof process !== 'undefined' ? 'Packet'.padEnd(13) : 'Packet:';\nconst LOG = console.log.bind(console);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass NetPacket implements I_NetMessage {\n  id: NP_ID; // network-wide unique id for this packet\n  msg_type: NP_Type; // ping, signal, send, call\n  msg: NP_Msg; // name of the URNET message\n  data: any; // payload of the URNET message\n  auth: string; // authentication token\n  src_addr: NP_Address; // URNET address of the sender\n  hop_seq: NP_Address[]; // URNET addresses that have seen this packet\n  hop_log: string[]; // log of debug messages by hop\n  hop_dir: NP_Dir; // direction of the packet 'req' or 'res'\n  hop_rsvp?: boolean; // whether the packet is a response to a request\n  err?: string; // returned error message\n\n  constructor(msg?: NP_Msg, data?: NP_Data) {\n    // metadata\n    this.id = undefined;\n    this.src_addr = undefined;\n    this.hop_rsvp = false;\n    this.hop_seq = [];\n    this.hop_log = [];\n    this.auth = undefined;\n    this.err = undefined;\n    //\n    if (data !== undefined) this.data = data;\n    if (typeof msg === 'string') {\n      if (!IsValidMessage(msg)) throw Error(`invalid msg format: ${msg}`);\n      this.msg = msg;\n    }\n  }\n\n  /** after creating a new packet, use setMeta() to assign id and envelope\n   *  meta used for routing and return packets\n   */\n  setMeta(msg_type: NP_Type, opt?: NP_Options) {\n    if (!IsValidType(msg_type)) throw Error(`invalid msg_type: ${msg_type}`);\n    this.msg_type = msg_type;\n    // optional overrides\n    this.hop_dir = opt?.dir || 'req';\n    this.hop_rsvp = opt?.rsvp || false;\n  }\n\n  /** add hop to the hop sequence */\n  addHop(hop: NP_Address) {\n    if (!IsValidAddress(hop)) throw Error(`invalid hop: ${hop}`);\n    this.hop_seq.push(hop);\n  }\n\n  /** utility setters w/ checks - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** manually set the source address, with check */\n  setSrcAddr(s_addr: NP_Address): NetPacket {\n    if (!IsValidAddress(s_addr)) throw Error(`invalid src_addr: ${s_addr}`);\n    // don't allow changing the src_addr once it's set by send()\n    // use clone() to make a new packet with a different src_addr\n    if (this.hop_seq.length > 0 && this.hop_seq[0] !== s_addr)\n      throw Error(`src_addr ${s_addr} != ${this.hop_seq[0]}`);\n    this.src_addr = s_addr;\n    return this;\n  }\n\n  /** manually set direction */\n  setDir(dir: NP_Dir): NetPacket {\n    if (dir !== 'req' && dir !== 'res') throw Error(`invalid dir: ${dir}`);\n    this.hop_dir = dir;\n    return this;\n  }\n\n  /** set the authorization token */\n  setAuth(auth: string): NetPacket {\n    if (typeof auth !== 'string') {\n      LOG('setAuth: invalid auth', auth);\n      throw Error(`invalid auth: ${auth}`);\n    }\n    this.auth = auth;\n    return this;\n  }\n\n  /** set message and data */\n  setMsgData(msg: NP_Msg, data: NP_Data): NetPacket {\n    this.setMsg(msg);\n    this.setData(data);\n    return this;\n  }\n  /** set message */\n  setMsg(msg: NP_Msg): NetPacket {\n    this.msg = msg;\n    return this;\n  }\n  /** set data */\n  setData(data: NP_Data): NetPacket {\n    this.data = data;\n    return this;\n  }\n  /** merge data */\n  mergeData(data: NP_Data): NetPacket {\n    this.data = { ...this.data, ...data };\n    return this;\n  }\n\n  /** packet reconstruction - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** make a packet from existing JSON */\n  setFromJSON(json: string): NetPacket {\n    if (typeof json !== 'string')\n      throw Error(`invalid json: ${json}, is ${typeof json}`);\n    return this.deserialize(json);\n  }\n  /** make a packet from existing object */\n  setFromObject(pktObj) {\n    const fn = 'setFromObject';\n    if (typeof pktObj !== 'object')\n      throw Error(`invalid pktObj: ${pktObj}, is ${typeof pktObj}`);\n    this.id = pktObj.id;\n    this.msg = pktObj.msg;\n    // undefined data is a valid response for a netcall, indicating\n    // that the call didn't exist\n    // if (pktObj.data === undefined) LOG(fn, `pktObj${pktObj.id} .data is undefined`);\n    this.data = pktObj.data;\n    this.src_addr = pktObj.src_addr;\n    this.hop_log = pktObj.hop_log;\n    this.msg_type = pktObj.msg_type;\n    this.hop_seq = pktObj.hop_seq;\n    this.hop_dir = pktObj.hop_dir;\n    this.hop_rsvp = pktObj.hop_rsvp;\n    this.err = pktObj.err;\n    this.auth = pktObj.auth;\n    return this;\n  }\n\n  /** packet transport  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** rsvp required? */\n  hasRsvp() {\n    return this.hop_rsvp;\n  }\n\n  lastHop() {\n    return this.hop_seq[this.hop_seq.length - 1];\n  }\n\n  hasAuth() {\n    return this.auth !== undefined;\n  }\n\n  /** types that begin with _ are protocol messages that bypass dispatchPacket() */\n  isSpecialPkt() {\n    return this.msg_type.startsWith('_');\n  }\n\n  /** authorization packets are the first packet sent on a client connection to\n   *  the message gateway server. They must not have a src_addr aassigned, using\n   *  the special UADDR_NONE value instead.\n   */\n  isBadAuthPkt() {\n    let error = '';\n    let a = this.msg_type === '_auth';\n    let b = this.msg === 'SRV:AUTH';\n    let c = this.src_addr === UADDR_NONE;\n    if (!a) error += `msg_type ${this.msg_type} not _auth. `;\n    if (!b) error += `msg ${this.msg} not SRV:AUTH. `;\n    if (!c) error += `src_addr ${this.src_addr} not ${UADDR_NONE} `;\n    if (error.length > 0) return `isBadAuthPkt: ${error}`;\n    return undefined;\n  }\n\n  /** registration packets are sent on a client connection after\n   *  authentication. They must have a src_addr assigned, which was returned\n   *  by the server in the response to the auth packet, and this must match\n   *  the server's stored uaddr for the client connection.\n   */\n  isBadRegPkt(socket: I_NetSocket) {\n    let error = '';\n    let a = this.msg_type === '_reg';\n    let b = this.msg === 'SRV:REG';\n    let c = this.src_addr === socket.uaddr;\n    if (!a) error += `msg_type ${this.msg_type} not _reg. `;\n    if (!b) error += `msg ${this.msg} not SRV:REG. `;\n    if (!c) error += `src_addr ${this.src_addr} not ${socket.uaddr}. `;\n    if (error.length > 0) return `isBadRegPkt: ${error}`;\n    return undefined;\n  }\n\n  authenticate(socket: I_NetSocket) {\n    const { msg, src_addr, hop_dir, hop_seq } = this;\n    if (!this.isResponse()) LOG(PR, `would auth ${src_addr} '${msg}'`);\n    return true;\n  }\n\n  isRequest() {\n    return this.hop_dir === 'req';\n  }\n\n  isResponse() {\n    return this.hop_dir === 'res';\n  }\n\n  /** serialization - - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  serialize(): string {\n    return JSON.stringify(this);\n  }\n  deserialize(data: string): NetPacket {\n    try {\n      let obj = JSON.parse(data);\n      return this.setFromObject(obj);\n    } catch (err) {\n      LOG('NetPacket.deserialize failed', data);\n    }\n  }\n\n  /** information utilities - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  isValidType(type: NP_Type): boolean {\n    return IsValidType(type);\n  }\n\n  isValidMessage(msg: NP_Msg): boolean {\n    return IsValidMessage(msg) !== undefined;\n    // note difference with IsValidMessage(), which returns [chan, msg] if valid\n  }\n\n  decodeMessage(msg: NP_Msg): [chan: string, msg: string] {\n    return DecodeMessage(msg);\n  }\n\n  /** debugging - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** add error string to packet error */\n  error(msg: string) {\n    if (!this.err) this.err = '';\n    this.err += msg;\n    return msg;\n  }\n\n  /** manually add a transport-related message eto the hog log. this is not\n   *  the same as hop_seq which is used to track the routing of the packet.\n   */\n  hopLog(msg: string) {\n    const info = `${this.id} ${this.hop_dir}`;\n    this.hop_log.push(`${info}: ${msg}`);\n    return msg;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default NetPacket;\nexport { NetPacket };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ServiceMap manages a list of named services and their associated\n  handlers and addresses. \n  It's used as a support class for NetEndpoint. A service name is\n  the same as an URNET message of form `CHAN:MESSAGE` with payload of\n  NP_Data.\n\n  Additionally, it enforces the categoziation of services into groups, and\n  knows how to recognize and decode service names.\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './my-class.ts';\n    const { NetSocket } = EP_DEFAULT.default; // note .default\n\n  You can import the types through dereferencing as usual:\n\n    import EP_DEFAULT, { I_NetSocket } from './my-module.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { NormalizeMessage, DecodeMessage } from './util-urnet.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { NP_Address, NP_Msg, NM_Handler } from '../_types/urnet.d.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype HandlerSet = Set<NM_Handler>; // set(handler1, handler2, ...)\ntype HandlerMap = Map<NP_Msg, HandlerSet>; // msg->handler functions\ntype AddressSet = Set<NP_Address>; // ['UA001', 'UA002', ...]\ntype AddressMap = Map<NP_Msg, AddressSet>; // msg->set of uaddr\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst PR =\n  // @ts-ignore - multiplatform definition check\n  typeof process !== 'undefined'\n    ? 'ServiceMap'.padEnd(13) // nodejs\n    : 'ServiceMap'.padEnd(11); // browser\nconst LOG = console.log.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROTOCOLS = {\n  'APP': ['HOT_RELOAD']\n};\n\n/// HELPER METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** helper: decode a protocol name into a normalized form. A protocol\n *  name is a special formatted message name that is used to identify.\n *  If it begins with _, then it is a protocol message. The protocol\n *  is defined as the first part of the message name and is delimited\n *  by another underscore\n */\nfunction m_DecodeProtocolName(msg: NP_Msg) {\n  const fn = 'm_DecodeProtocolName:';\n  let [channel, tmp_msg] = DecodeMessage(msg);\n  // example protocol message: _UR_HOT_RELOAD\n  if (!tmp_msg.startsWith('_')) return [undefined, tmp_msg];\n  tmp_msg = tmp_msg.slice(1); // remove leading underscore\n  let [protocol, message] = tmp_msg.split('_');\n  // look up protocol in protocol map\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a protocol to the protocol map */\nfunction m_AddProtocol(protoName: string, protoMsgs: NP_Msg[]) {}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass ServiceMap {\n  service_addr: NP_Address; // unique identifier for this map\n  handled_svcs: HandlerMap; // map of services with local handler functions\n  proxied_svcs: AddressMap; // map of services forwarded to other addresses\n\n  /** constructor: identifier is generally the same as the endpoint UADDR\n   *  when used by NetEndpoint e.g. SRV01, SRV02, etc.\n   */\n  constructor(addr: NP_Address) {\n    this.service_addr = addr;\n    this.handled_svcs = new Map<NP_Msg, HandlerSet>();\n    // proxied services are not enabled by default\n    this.proxied_svcs = undefined;\n  }\n\n  /** call to make this ServiceMap handle proxies */\n  enableProxies() {\n    const fn = 'initializeRemotes:';\n    if (this.proxied_svcs !== undefined) throw Error(`${fn} already initialized`);\n    this.proxied_svcs = new Map<NP_Msg, AddressSet>();\n  }\n\n  /// UTILITIES FOR SPECIAL SERVICES ///\n\n  /** API: add a protocol handler for a given service name, which\n   *  are reserved for special services */\n  addProtocolHandler(pmsg: NP_Msg, handler: NM_Handler) {\n    const fn = 'addProtocolHandler:';\n    if (typeof pmsg !== 'string') throw Error(`${fn} invalid pmsg`);\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(pmsg);\n  }\n\n  /// HANDLED SERVICES are LOCAL FUNCTIONS ///\n\n  /** API: declare a service handler for a given service name */\n  addServiceHandler(msg: NP_Msg, handler: NM_Handler) {\n    const fn = 'addServiceHandler:';\n    // LOG(PR,this.uaddr, `reg handler '${msg}'`);\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(msg);\n    if (!this.handled_svcs.has(key))\n      this.handled_svcs.set(key, new Set<NM_Handler>());\n    const handler_set = this.handled_svcs.get(key);\n    handler_set.add(handler);\n  }\n\n  /** API: remove a previously declared service handler for a given service name */\n  deleteServiceHandler(msg: NP_Msg, handler: NM_Handler) {\n    const fn = 'deleteServiceHandler:';\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(msg);\n    const handler_set = this.handled_svcs.get(key);\n    if (!handler_set) throw Error(`${fn} unexpected empty set '${key}'`);\n    handler_set.delete(handler);\n  }\n\n  /** return list of local handlers for given service name */\n  getServiceHandlers(msg: NP_Msg): NM_Handler[] {\n    const fn = 'getServiceHandlers:';\n    if (this.handled_svcs === undefined) return [];\n    const key = NormalizeMessage(msg);\n    if (!this.handled_svcs.has(key))\n      this.handled_svcs.set(key, new Set<NM_Handler>());\n    const handler_set = this.handled_svcs.get(key);\n    if (!handler_set) throw Error(`${fn} unexpected empty set '${key}'`);\n    const handler_list = Array.from(handler_set);\n    return handler_list;\n  }\n\n  /** return handler list for this endpoint */\n  getServiceNames(): NP_Msg[] {\n    // get service name keys from handled_svcs\n    const list = [];\n    this.handled_svcs.forEach((handler_set, key) => {\n      list.push(key);\n    });\n    return list;\n  }\n\n  /// PROXIED SERVICES are handled by REMOTE ADDRESSES ///\n\n  /** get list of services allocated to a uaddr */\n  getServicesForAddress(uaddr: NP_Address): NP_Msg[] {\n    const fn = 'getServicesForAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    // proxied_svcs is msg->set of uaddr, so iterate over all services\n    const msg_list: NP_Msg[] = [];\n    if (this.proxied_svcs === undefined) return msg_list;\n    this.proxied_svcs.forEach((addr_set, msg) => {\n      if (addr_set.has(uaddr)) msg_list.push(msg);\n    });\n    return msg_list;\n  }\n\n  /** get list of UADDRs that a service name is forwarded to */\n  getServiceAddress(msg: NP_Msg): NP_Address[] {\n    const fn = 'getServiceAddress:';\n    const key = NormalizeMessage(msg);\n    if (this.proxied_svcs === undefined) return [];\n    if (!this.proxied_svcs.has(key))\n      this.proxied_svcs.set(key, new Set<NP_Address>());\n    const addr_set = this.proxied_svcs.get(key);\n    const addr_list = Array.from(addr_set);\n    return addr_list;\n  }\n\n  /** register a service handler for a given service name to passed uaddr */\n  registerServiceToAddress(uaddr: NP_Address, msgList: NP_Msg[]) {\n    const fn = 'registerServiceToAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    msgList.forEach(msg => {\n      const key = NormalizeMessage(msg);\n      if (this.proxied_svcs === undefined) {\n        LOG(PR, `${fn} auto-enabling proxies`);\n        this.enableProxies();\n      }\n      if (!this.proxied_svcs.has(key))\n        this.proxied_svcs.set(key, new Set<NP_Address>());\n      const msg_set = this.proxied_svcs.get(key);\n      msg_set.add(uaddr);\n      // LOG(PR,this.uaddr, `reg remote ${key} for ${uaddr}`);\n    });\n  }\n\n  /** unregister service handlers for a given service name to passed uaddr */\n  deleteServicesForAddress(uaddr: NP_Address): NP_Msg[] {\n    const fn = 'deleteServicesForAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    const removed = [];\n    this.proxied_svcs.forEach((msg_set, key) => {\n      if (msg_set.has(uaddr)) removed.push(key);\n      msg_set.delete(uaddr);\n    });\n    return removed;\n  }\n\n  /** utility: return true if this service map has proxies */\n  hasProxies(): boolean {\n    if (this.proxied_svcs === undefined) return false;\n    return this.proxied_svcs.size > 0;\n  }\n\n  /** utility: return array of proxied services */\n  proxiesList(): NP_Msg[] {\n    if (this.proxied_svcs === undefined) return [];\n    return [...Object.keys(this.proxied_svcs)] as NP_Msg[];\n  }\n\n  /** utility: return true if this service map has handlers */\n  hasHandlers(): boolean {\n    if (this.handled_svcs === undefined) return false;\n    return this.handled_svcs.size > 0;\n  }\n  /** utility: return array of handled service names */\n  handlersList(): NP_Msg[] {\n    if (this.handled_svcs === undefined) return [];\n    return [...Object.keys(this.handled_svcs)] as NP_Msg[];\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default ServiceMap;\nexport { ServiceMap };\nexport type { NM_Handler as THandlerFunc };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  TransactionMgr is a simple support class for NetEndpoint that manages\n  a list of transaction objects. A transaction is identified by a unique\n  identifier\n\n  A transaction consists of a 'message' and a 'hash' that is used to identify\n  the transaction. To create a transaction entry, the following must be\n  provided by the caller:\n  \n  - hash: NP_Hash - a unique identifier for the transaction\n  - msg: NP_Msg - the message identifier/service that is being sent\n  - resolve: (value?: unknown) => void - resolve the transaction\n  - reject: (reason?: any) => void - reject the transaction\n  - ...data: any - any additional data to be stored with the transaction\n  \n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { NP_Hash } from '../_types/urnet.d.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** a transaction consists functions used to resolve or reject the transaction\n *  for async operations. Additional data can be stored with the transaction\n */\ntype TrxResolver = {\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n  [key: string]: any; // any additional data\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TrxMap = Map<NP_Hash, TrxResolver>; // map hashes to resolver objects\ntype TrxInfo = {\n  hash: NP_Hash; // unique identifier for the transaction\n  [key: string]: any; // any additional data\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst PR =\n  // @ts-ignore - multiplatform definition check\n  typeof process !== 'undefined'\n    ? 'Transact'.padEnd(13) // nodejs\n    : 'Transact'.padEnd(11); // browser\nconst LOG = console.log.bind(console);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass TransactionMgr {\n  // fields\n  private transaction_log: TrxMap; // log of current transactions\n\n  /** create a new transaction manager */\n  constructor() {\n    this.transaction_log = new Map<NP_Hash, TrxResolver>();\n  }\n\n  /** add a transaction to the transaction log */\n  setTransaction(hash: NP_Hash, resolver: TrxResolver) {\n    const fn = 'setTransaction:';\n    const { resolve, reject, msg, ...meta } = resolver;\n    if (typeof hash !== 'string') throw Error(`${fn} invalid hash ${hash}`);\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg ${msg}`);\n    if (typeof resolve !== 'function') throw Error(`${fn} invalid resolve`);\n    if (typeof reject !== 'function') throw Error(`${fn} invalid reject`);\n    if (this.transaction_log.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n    if (DBG && meta) LOG(PR, `${fn}: additional metadata`, meta);\n    this.transaction_log.set(hash, resolver);\n  }\n\n  /** lookup a transaction by hash */\n  getTransactionByHash(hash: NP_Hash): TrxResolver {\n    const fn = 'getTransactionByHash:';\n    if (!this.transaction_log.has(hash)) throw Error(`${fn} hash not found ${hash}`);\n    return this.transaction_log.get(hash);\n  }\n\n  /** resolve a transaction by hash */\n  resolveTransaction(hash: NP_Hash): TrxResolver {\n    const fn = 'resolveTransaction:';\n    if (!this.transaction_log.has(hash)) throw Error(`${fn} hash not found ${hash}`);\n    const transaction = this.getTransactionByHash(hash);\n    this.transaction_log.delete(hash);\n    return transaction;\n  }\n\n  /** return a list of pending transactions */\n  getPendingTransactions(): TrxInfo[] {\n    const fn = 'getPendingTransactionList:';\n    const list = [];\n    this.transaction_log.forEach((transaction, hash) => {\n      const { resolve, reject, ...meta } = transaction;\n      list.push({ hash, ...meta });\n    });\n    return list;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default TransactionMgr;\nexport { TransactionMgr };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetEndpoint is a connection object that talks to the UR Messaging Network.\n  Both servers and clients can use this class to build connections over\n  different transports (HTTP, WS, etc).\n\n  Server-Only API\n  - configAsServer(srv_addr: NP_Address): void\n  - addClient(socket: I_NetSocket): NP_Address\n  - removeClient(uaddr: NP_Address): NP_Address\n  - _ingestClientPacket(jsonData: string, socket: I_NetSocket): NetPacket\n\n  Client-Only API\n  - connectAsClient(gateway: I_NetSocket, auth: TClientAuth): Promise<NP_Data>\n  - disconnectAsClient(): void\n  - _ingestServerPacket(jsonData: string, socket: I_NetSocket): void\n\n  Shared API\n  - addMessageHandler(msg: NP_Msg, handler: THandlerFunc): void\n  - call(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - send(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - signal(msg: NP_Msg, data: NP_Data): void\n  - ping(msg: NP_Msg): Promise<NP_Data>\n  - netCall(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - netSend(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - netSignal(msg: NP_Msg, data: NP_Data): void\n  - netPing(msg: NP_Msg): Promise<NP_Data>\n\n  See https://github.com/dsriseah/ursys/wiki/URSYS-Network-Concepts for\n  documentation on using this class\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './class-urnet-endpoint.ts';\n    const NetEndpoint = EP_DEFAULT.default; // note .default\n\n  You can import the types as usual, though:\n\n    import EP_DEFAULT, { I_NetSocket } from './types-urnet.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport NetPacket from './class-urnet-packet.ts';\nimport ServiceMap from './class-urnet-servicemap.ts';\nimport TransactionMgr from './class-urnet-transaction.ts';\nimport { GetPacketHashString, SkipOriginType } from './util-urnet.ts';\nimport { IsLocalMessage, IsNetMessage, IsValidAddress } from './util-urnet.ts';\nimport { UADDR_NONE, AllocateAddress } from './util-urnet.ts';\nimport { NormalizeData } from './util-urnet.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { NP_ID, NP_Address, NP_Msg, NP_Data } from '../_types/urnet.d.ts';\nimport type { I_NetSocket } from './class-urnet-socket.d.ts';\nimport type { THandlerFunc } from './class-urnet-servicemap.d.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst PR =\n  // @ts-ignore - multiplatform definition check\n  typeof process !== 'undefined'\n    ? 'EndPoint'.padEnd(13) // nodejs\n    : 'EndPoint'.padEnd(11); // browser\nconst LOG = console.log.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet AGE_INTERVAL = 1000; // milliseconds\nlet AGE_MAX = 60 * 30; // 30 minutes\n\n/// LOCAL TYPES ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype SocketMap = Map<NP_Address, I_NetSocket>; //\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** returned by getRoutingInfo() for external users of this class */\ntype PktRoutingInfo = {\n  msg: NP_Msg;\n  src_addr: NP_Address;\n  self_addr: NP_Address;\n  gateway: I_NetSocket;\n  clients: I_NetSocket[];\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TClientAuth = {\n  identity: string;\n  secret: string;\n};\ntype TClientReg = {\n  name: string;\n  type: string;\n};\ntype TClientDeclare = {\n  msg_list: NP_Msg[];\n};\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** utility to dump packet info to console */\nfunction _PKT(ep: NetEndpoint, fn: string, text: string, pkt: NetPacket) {\n  let { id, msg, msg_type } = pkt;\n  if (id === undefined && msg_type === '_reg') id = `pkt[${UADDR_NONE}:0]`;\n  let out = `${ep.uaddr} ${text} '${msg}' `.padEnd(40, '~');\n  out += ` ${id.padEnd(12)} ${fn}`;\n  return out;\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass NetEndpoint {\n  svc_map: ServiceMap; // service handler map (include proxies)\n  trx_mgr: TransactionMgr; // hash->resolver\n  //\n  uaddr: NP_Address; // the address for this endpoint\n  client_socks: SocketMap; // uaddr->I_NetSocket\n  //\n  cli_counter: number; // counter for generating unique uaddr\n  pkt_counter: number; // counter for generating packet ids\n  //\n  cli_gateway: I_NetSocket; // gateway to server\n  cli_sck_timer: any; // timer for checking socket age\n  cli_ident: any; // client credentials to request authentication\n  cli_auth: any; // client access token for\n  cli_reg: TClientReg; // client registration status\n\n  constructor() {\n    //\n    this.uaddr = undefined; // assigned address\n    // endpoint as client\n    this.cli_ident = undefined; // client identity\n    this.cli_auth = undefined; // client access token\n    this.cli_reg = undefined; // client registration status\n    this.cli_gateway = undefined; // client gateway\n    // endpoint as server\n    this.client_socks = undefined; // client sockets\n    this.svc_map = undefined; // service handlers\n    this.trx_mgr = new TransactionMgr(); // transaction manager\n    // runtime packet, socket counters\n    this.pkt_counter = 0;\n    this.cli_counter = 0;\n    this.cli_sck_timer = null; // socket aging placeholder\n  }\n\n  /** SERVER API: initialize this endpoint's client server, providing a hardcoded\n   *  server UADDR that is distinct from those used by client pools\n   */\n  public configAsServer(srv_addr: NP_Address) {\n    const fn = 'configAsServer:';\n    if (!IsValidAddress(srv_addr)) throw Error(`${fn} invalid srv_addr ${srv_addr}`);\n    if (this.uaddr && this.uaddr !== srv_addr) {\n      let err = `${fn} uaddr ${this.uaddr} already set.`;\n      throw Error(err);\n    }\n    this.uaddr = srv_addr;\n    this.svc_map = new ServiceMap(srv_addr);\n    // make sure we don't nuke existing sockets on accidental double-invocation\n    if (this.client_socks !== undefined)\n      LOG(PR, this.uaddr, `already configured`, [...this.client_socks.keys()]);\n    this.client_socks = new Map<NP_Address, I_NetSocket>();\n    if (this.svc_map.hasProxies())\n      LOG(PR, this.uaddr, `already configured`, this.svc_map.proxiesList());\n    this.svc_map.enableProxies();\n    // add default service message handlers here\n    this.addMessageHandler('SRV:REFLECT', data => {\n      data.info = `built-in service`;\n      return data;\n    });\n  }\n\n  /** SERVER API: Server data event handler for incoming data from a client connection.\n   *  This is the mirror to _ingestServerPacket() function used by client endpoints.\n   *  This is the entry point for incoming data from clients */\n  public _ingestClientPacket(jsonData: string, socket: I_NetSocket): NetPacket {\n    let pkt = this.newPacket().deserialize(jsonData);\n    let retPkt: NetPacket;\n\n    // 1. protocol: authentication packet (once)\n    retPkt = this._handleAuthRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    /** from this point forward, packets are authenticated **/\n\n    // 2. is this a special registration packet (anytime)\n    retPkt = this._handleRegRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    // 3. is this a special declaration packet (anytime)\n    retPkt = this._handleDeclRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    // 4. otherwise, handle the packet normally through the message interface\n    this.dispatchPacket(pkt);\n  }\n\n  /** SERVER API: when a client connects to this endpoint, register it as a socket and\n   *  allocate a uaddr for it */\n  public addClient(socket: I_NetSocket): NP_Address {\n    const fn = 'addClient:';\n    if (typeof socket !== 'object') throw Error(`${fn} invalid socket`);\n    if (socket.uaddr !== undefined) throw Error(`${fn} socket already added`);\n    const new_uaddr = AllocateAddress({ prefix: 'UR_' });\n    socket.uaddr = new_uaddr;\n    socket.age = 0;\n    socket.auth = undefined; // filled-in by socket authorization\n    socket.msglist = undefined; // filled-in by message registration\n    this.client_socks.set(new_uaddr, socket);\n    // LOG(PR,this.uaddr, `socket ${new_uaddr} registered`);\n    return new_uaddr;\n  }\n\n  /** SERVER API: when a client disconnects from this endpoint, delete its socket and\n   *  remove all message forwarding */\n  public removeClient(uaddr_obj: NP_Address | I_NetSocket): NP_Address {\n    const fn = 'removeClient:';\n    let uaddr: NP_Address =\n      typeof uaddr_obj === 'string' ? uaddr_obj : uaddr_obj.uaddr;\n    if (typeof uaddr !== 'string') {\n      LOG(PR, `${fn} invalid uaddr ${typeof uaddr}`);\n      return undefined;\n    }\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    // remoted_msgs is msg->set of uaddr, so iterate over all messages\n    this.deleteMessageForAddress(uaddr);\n    // delete the socket\n    this.client_socks.delete(uaddr);\n    // LOG(PR,this.uaddr, `socket ${uaddr} deleted`);\n    return uaddr;\n  }\n\n  /** SERVER API: given a uaddr, return the socket */\n  public getClient(uaddr: NP_Address): I_NetSocket {\n    const fn = 'getClient:';\n    if (this.client_socks === undefined) return undefined;\n    return this.client_socks.get(uaddr);\n  }\n\n  /** SERVER API: start a timer to check for dead sockets */\n  public enableClientAging(activate: boolean) {\n    const fn = 'enableClientAging:';\n    if (activate) {\n      if (this.cli_sck_timer) clearInterval(this.cli_sck_timer);\n      this.cli_sck_timer = setInterval(() => {\n        this.client_socks.forEach((socket, uaddr) => {\n          socket.age += AGE_INTERVAL;\n          if (socket.age > AGE_MAX) {\n            LOG(PR, this.uaddr, `socket ${uaddr} expired`);\n            // put stuff here\n          }\n        });\n      }, AGE_INTERVAL);\n      return;\n    }\n    if (this.cli_sck_timer) clearInterval(this.cli_sck_timer);\n    this.cli_sck_timer = null;\n    LOG(PR, this.uaddr, `timer stopped`);\n  }\n\n  /** SERVER SUPPORT: handle auth packet if the session.auth is not defined */\n  private _handleAuthRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (!socket.authenticated()) {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      const error = pkt.isBadAuthPkt();\n      if (error) {\n        console.error(PR, error);\n        pkt.data = { error };\n        return pkt;\n      }\n      /** placeholder authentication check **/\n      const { identity, secret } = pkt.data;\n      if (identity) {\n        socket.auth = identity;\n        pkt.data = { uaddr: socket.uaddr, cli_auth: 'ServerProvidedAuthToken' };\n      } else {\n        pkt.data = { error: 'invalid identity' };\n      }\n      /** end placeholder **/\n      return pkt;\n    }\n    return undefined;\n  }\n\n  /** SERVER SUPPORT: handle registration packet */\n  private _handleRegRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (!pkt.isBadRegPkt(socket)) {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      if (pkt.msg !== 'SRV:REG') {\n        pkt.data = { error: `invalid reg packet ${pkt.msg}` };\n        return pkt;\n      }\n      if (pkt.src_addr !== socket.uaddr) {\n        LOG(PR, 'src address mismatch', pkt.src_addr, '!= sock', socket.uaddr);\n        pkt.data = { error: 'address mismatch' };\n        return pkt;\n      }\n      const { name, type } = pkt.data;\n      if (name) {\n        const { uaddr } = socket;\n        const config = socket.getConfig();\n        pkt.data = {\n          ok: true,\n          status: `registered name:${name} type:${type}`,\n          config\n        };\n        return pkt;\n      }\n      pkt.data = { error: 'registration failed' };\n      return pkt;\n    }\n    return undefined;\n  }\n\n  /** SERVER SUPPORT: handle client dynamic definitions */\n  private _handleDeclRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (pkt.msg_type === '_decl') {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      if (pkt.msg !== 'SRV:DEF') {\n        console.log('invalid def packet', pkt.msg);\n        pkt.data = { error: `invalid def packet ${pkt.msg}` };\n        return pkt;\n      }\n      // currently support msg_list only\n      pkt.data.status = [];\n      const { msg_list } = pkt.data;\n      const { uaddr } = socket;\n      if (Array.isArray(msg_list)) {\n        this.registerRemoteMessagesToAddress(uaddr, msg_list);\n        pkt.data.status.push(`registered ${msg_list.length} messages`);\n      }\n      //\n      // ... other definitions can go here\n      //\n      if (pkt.data.status.length === 0) {\n        pkt.data = { error: 'no definitions' };\n        return pkt;\n      }\n    }\n    return undefined;\n  }\n\n  /** client connection handshaking - - - - - - - - - - - - - - - - - - - - **/\n\n  /** CLIENT API: client endpoints need to have an \"address\" assigned to them,\n   *  otherwise the endpoint will not work */\n  public async connectAsClient(\n    gateway: I_NetSocket,\n    auth: TClientAuth\n  ): Promise<NP_Data> {\n    const fn = 'connectAsClient:';\n    if (gateway && typeof gateway.send === 'function') {\n      this.cli_gateway = gateway;\n    } else throw Error(`${fn} invalid gateway`);\n    if (auth) {\n      const pkt = this.newAuthPacket(auth);\n      const { msg } = pkt;\n\n      /** MAGIC **/\n      /** await promise, which resolves when server responds to the auth packet */\n      let authData: NP_Data = await this._proxySend(pkt, gateway);\n      /** resumes when _handleAuthResponse() resolves the transaction **/\n      /** END MAGIC **/\n\n      // handle authdata\n      const { uaddr, cli_auth, error } = authData;\n      if (error) {\n        LOG(PR, `${fn} error:`, error);\n        return false;\n      }\n      if (!IsValidAddress(uaddr)) throw Error(`${fn} invalid uaddr ${uaddr}`);\n      this.uaddr = uaddr;\n      this.svc_map = new ServiceMap(uaddr);\n      if (cli_auth === undefined) throw Error(`${fn} invalid cli_auth`);\n      this.cli_auth = cli_auth;\n      if (DBG) LOG(PR, 'AUTHENTICATED', uaddr, cli_auth);\n      this.cli_auth = cli_auth;\n      return authData;\n    }\n    throw Error(`${fn} arg must be identity`);\n  }\n\n  /** CLIENT API: Client data event handler for incoming data from the gateway. This is\n   *  the mirror to _ingestClientPacket() function that is used by servers. This\n   *  is entry point for incoming data from server\n   */\n  public _ingestServerPacket(jsonData: string, socket: I_NetSocket): void {\n    const fn = '_ingestServerPacket:';\n    const pkt = this.newPacket().deserialize(jsonData);\n    // 1. is this connection handshaking for clients?\n    if (this.cli_gateway) {\n      // only clients have this.cli_gateway socket defined\n      // special packets are handled separately from the normal message dispatcher\n      // the parallel _ingestClientPacket() function for servers are who return\n      // these response packets\n      if (this._handleAuthResponse(pkt)) return;\n      if (this._handleRegResponse(pkt)) return;\n      if (this._handleDeclResponse(pkt)) return;\n    }\n    // 2. otherwise handle the message interface normally\n    this.dispatchPacket(pkt);\n  }\n\n  /** CLIENT API: register client with client endpoint info */\n  public async declareClientProperties(info: TClientReg): Promise<NP_Data> {\n    const fn = 'declareClientProperties:';\n    if (!this.cli_gateway) throw Error(`${fn} no gateway`);\n    const pkt = this.newRegPacket();\n    pkt.data = { ...info };\n\n    /** MAGIC **/\n    /** suspend through transaction **/\n    let regData: NP_Data = await this._proxySend(pkt, this.cli_gateway);\n    /** resumes when _handleAuthResponse() resolves the transaction **/\n    /** END MAGIC **/\n\n    const { ok, status, error } = regData;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n      return regData;\n    }\n    if (ok) {\n      if (DBG) LOG(PR, 'REGISTERED', status);\n      this.cli_reg = info; // save registration info\n      return regData;\n    }\n    throw Error(`${fn} unexpected response`, regData);\n  }\n\n  /** CLIENT API: declare client messages */\n  public async declareClientMessages() {\n    const fn = 'declareClientMessages:';\n    const msg_list = this.getNetMessageNames();\n    const response = await this._declareClientServices({ msg_list });\n    const { msg_list: rmsg_list, error } = response;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n    } else if (DBG) {\n      console.groupCollapsed(PR, `DECLARED ${rmsg_list.length} messages`);\n      rmsg_list.forEach((msg, i) => LOG(`${i + 1}\\t'${msg}'`));\n      console.groupEnd();\n    }\n    return response;\n  }\n\n  /** CLIENT SUPPORT: handle authentication response packet directly rather than through\n   *  the netcall interface in dispatchPacket() */\n  private _handleAuthResponse(pkt: NetPacket): boolean {\n    const fn = '_handleAuthResponse:';\n    if (pkt.msg_type !== '_auth') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    this.resolveRemoteHandler(pkt);\n    // auth resumes in connectAsClient() magical await requestAuth\n    return true;\n  }\n\n  /** CLIENT SUPPORT: handle registration response packet directly rather than through\n   *  the netcall interface in dispatchPacket() */\n  private _handleRegResponse(pkt: NetPacket): boolean {\n    const fn = '_handleRegResponse:';\n    if (pkt.msg_type !== '_reg') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    if (pkt.src_addr !== this.uaddr) throw Error(`${fn} misaddressed packet???`);\n    // do stuff here...\n    const { data } = pkt;\n    // resuming from declareClientProperties() await requestReg\n    this.resolveRemoteHandler(pkt);\n    return true;\n  }\n\n  /** CLIENT SUPPORT: handle declaration packet */\n  private _handleDeclResponse(pkt: NetPacket): boolean {\n    const fn = '_handleDeclResponse:';\n    if (pkt.msg_type !== '_decl') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    if (pkt.src_addr !== this.uaddr) throw Error(`${fn} misaddressed packet???`);\n    // resuming from _declareClientServices() await requestReg\n    this.resolveRemoteHandler(pkt);\n    return true;\n  }\n\n  /** message declaration and invocation - - - - - - - - - - - - - - - - - -**/\n\n  /** API: declare a message handler for a given message */\n  public addMessageHandler(msg: NP_Msg, handler: THandlerFunc) {\n    this.svc_map.addServiceHandler(msg, handler);\n  }\n\n  /** API: remove a previously declared message handler for a given message */\n  public deleteMessageHandler(msg: NP_Msg, handler: THandlerFunc) {\n    this.svc_map.deleteServiceHandler(msg, handler);\n  }\n\n  /** API: call local message registered on this endPoint only */\n  public async call(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'call:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    const promises = [];\n    handlers.forEach(handler => {\n      promises.push(\n        new Promise((resolve, reject) => {\n          try {\n            resolve(handler({ ...data })); // copy of data\n          } catch (err) {\n            reject(err);\n          }\n        })\n      );\n    });\n    if (promises.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    // wait for all promises to resolve\n    const resData = await Promise.all(promises);\n    return resData;\n  }\n\n  /** API: send local message registered on this endPoint only, returning no data */\n  public async send(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'send:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    handlers.forEach(handler => {\n      handler({ ...data }); // copy of data\n    });\n    return Promise.resolve(true);\n  }\n\n  /** API: signal local message registered on this endPoint only, returning no data.\n   */\n  public signal(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'signal:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    handlers.forEach(handler => {\n      handler({ ...data }); // copy of data\n    });\n  }\n\n  /** API: ping local message, return with number of handlers */\n  public async ping(msg: NP_Msg): Promise<NP_Data> {\n    const fn = 'ping:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    return Promise.resolve(handlers.length);\n  }\n\n  /** API: call net message, resolves when packet returns from server with data */\n  public async netCall(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'netCall:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('call', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      const hash = GetPacketHashString(pkt);\n      this.trx_mgr.setTransaction(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** API: send net message, returning promise that will resolve when the server has\n   *  received and processed/forwarded the message */\n  public async netSend(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'netSend:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('send', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      // note: this is similar to _proxySend() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      this.trx_mgr.setTransaction(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** API: signal net message, returning void (not promise)\n   *  used for the idea of 'raising signals' as opposed to 'sending data'. It\n   *  resolves immediately when the signal is sent, and does not check with the\n   *  server  */\n  public netSignal(msg: NP_Msg, data: NP_Data): void {\n    const fn = 'netSignal:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('signal', {\n      dir: 'req',\n      rsvp: false\n    });\n    /** no magic, just send and forget **/\n    this.initialSend(pkt);\n  }\n\n  /** API: returns with a list of uaddr from the server which is the uaddr of the\n   *  all clients that have registered for the message */\n  public async netPing(msg: NP_Msg): Promise<NP_Data> {\n    const fn = 'netPing:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg);\n    pkt.setMeta('ping', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      // note: this is similar to _proxySend() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      this.trx_mgr.setTransaction(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** packet utilities  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** declare client attributes is a generic declaration packet that can contain\n   *  any number of attributes that the client wants to declare to the server.\n   *  for example, see declareClientMessages() */\n  private async _declareClientServices(def: TClientDeclare): Promise<NP_Data> {\n    const fn = '_declareClientServices:';\n    if (!this.cli_gateway) throw Error(`${fn} no gateway`);\n    const pkt = this.newDeclPacket();\n    pkt.data = { ...def };\n    const { msg } = pkt;\n\n    /** MAGIC **/\n    /** suspend through transaction **/\n    let declared: NP_Data = await this._proxySend(pkt, this.cli_gateway);\n    /** resumes when _handleAuthResponse() resolves the transaction **/\n    /** END MAGIC **/\n\n    const { error, status } = declared;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n      return declared;\n    }\n    if (status) return declared;\n    // neither error or status, so something went wrong\n    throw Error(`${fn} unexpected response`, declared);\n  }\n\n  /** shuts down the gateway to server, forcing close\n   *  Chrome 125.0.6422.77 doesn't seem to send a close frame on reload\n   *  Firefox 126.0 doesn't fire beforeunload\n   */\n  public disconnectAsClient() {\n    if (this.cli_gateway === undefined) return;\n    if (typeof this.cli_gateway.close === 'function') {\n      this.cli_gateway.close();\n    }\n    this.cli_gateway = undefined;\n  }\n\n  /** endpoint lookup tables - - - - - - - - - - - - - - - - - - - -  - - - **/\n\n  /** return true if the message is handled anywhere */\n  protected packetHasAnyHandler(pkt: NetPacket): boolean {\n    const fn = 'messageHasHandler:';\n    const a = this.getMessageHandlers(pkt.msg).length > 0;\n    const b = this.isServer() && this.getMessageAddresses(pkt.msg).length > 0;\n    return a || b;\n  }\n\n  /** get list of messages allocated to a uaddr */\n  protected getMessagesForAddress(uaddr: NP_Address): NP_Msg[] {\n    return this.svc_map.getServicesForAddress(uaddr);\n  }\n\n  /** get list of UADDRs that a message is forwarded to */\n  protected getMessageAddresses(msg: NP_Msg): NP_Address[] {\n    return this.svc_map.getServiceAddress(msg);\n  }\n\n  /** return list of local handlers for given message */\n  protected getMessageHandlers(msg: NP_Msg): THandlerFunc[] {\n    return this.svc_map.getServiceHandlers(msg);\n  }\n\n  /** informational routing information - - - - - - - - - - - - - - - - - - **/\n\n  /** return handler list for this endpoint */\n  protected getMessageNames(): NP_Msg[] {\n    return this.svc_map.getServiceNames();\n  }\n\n  /** return only net messages */\n  protected getNetMessageNames(): NP_Msg[] {\n    const list = this.svc_map.getServiceNames();\n    return list.filter(msg => IsNetMessage(msg));\n  }\n\n  /** server endpoints manage list of messages in clients  - - - - -  - - - **/\n\n  /** register a message handler for a given message to passed uaddr */\n  protected registerRemoteMessagesToAddress(uaddr: NP_Address, msgList: NP_Msg[]) {\n    return this.svc_map.registerServiceToAddress(uaddr, msgList);\n  }\n\n  /** unregister message handlers for a given message to passed uaddr */\n  protected deleteMessageForAddress(uaddr: NP_Address): NP_Msg[] {\n    return this.svc_map.deleteServicesForAddress(uaddr);\n  }\n\n  /** packet interface  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** Receive a single packet from the wire, and determine what to do with it.\n   *  It's assumed that _ingestClientPacket() has already handled\n   *  authentication for clients before this method is received.\n   *  The packet has several possible processing options!\n   *  - packet is response to an outgoing transaction\n   *  - packet is a message that we handle\n   *  - packet is a message that we forward\n   *  - packet is unknown message so we return it with error\n   *  If the packet has the rsvp flag set, we need to return\n   *  it to the source address in the packet with any data\n   */\n  private async dispatchPacket(pkt: NetPacket): Promise<void> {\n    const fn = 'dispatchPacket:';\n\n    // filter out response packets\n    if (pkt.isResponse()) {\n      if (pkt.src_addr === this.uaddr) {\n        // this is a returning packet that originated from this endpoint\n        this.resolveRemoteHandler(pkt);\n      } else {\n        // otherwise, it's a response packet to a downstream client\n        this.returnToSender(pkt);\n      }\n      return; // done processing, so exit\n    }\n\n    // make sure only request packets are processed\n    if (!pkt.isRequest()) {\n      LOG(PR, this.uaddr, fn, `invalid packet`, pkt);\n      return;\n    }\n\n    // handle ping packets\n    if (pkt.msg_type === 'ping') {\n      const pingArr = this.getMessageAddresses(pkt.msg);\n      const pingHandlers = this.getMessageHandlers(pkt.msg);\n      if (pingHandlers.length > 0) pingArr.push(this.uaddr);\n      pkt.setData(pingArr);\n      this.returnToSender(pkt);\n      return;\n    }\n\n    // handle signal packets\n    if (pkt.msg_type === 'signal') {\n      await this.awaitHandlers(pkt);\n      if (this.isServer()) await this.awaitProxiedHandlers(pkt);\n      return;\n    }\n\n    // handle call and send packets\n    // note: does not forward messages back to origin as signal, ping do\n    let retData: any;\n    let remoteData: any;\n    if (this.packetHasAnyHandler(pkt)) {\n      retData = await this.awaitHandlers(pkt);\n      if (this.isServer()) {\n        remoteData = await this.awaitProxiedHandlers(pkt);\n        retData = retData.concat(remoteData);\n      }\n    } else {\n      LOG(PR, this.uaddr, fn, `unknown message ${pkt.msg}`);\n      retData = { error: `unknown message '${pkt.msg}'` };\n    }\n\n    // if the packet doesn't have an RSVP flag, then we don't\n    // have to return any data so quit\n    if (!pkt.hasRsvp()) return;\n\n    // otherwise, we need to return the appropriate data\n    // to the callee. ping and signal have already been handled\n    if (pkt.msg_type === 'call') {\n      pkt.data = NormalizeData(retData);\n    } else if (pkt.msg_type === 'send') {\n      pkt.data = true;\n    }\n    // now send the response, eventually\n    this.returnToSender(pkt);\n  }\n\n  /** Start a transaction, which returns promises to await. This method\n   *  is a queue that uses Promises to wait for the return, which is\n   *  triggered by a returning packet in dispatchPacket(pkt).\n   */\n  private async awaitProxiedHandlers(pkt: NetPacket) {\n    const fn = 'awaitProxiedHandlers:';\n    if (pkt.hop_dir !== 'req') throw Error(`${fn} packet is not a request`);\n    // prep for return\n    const { gateway, clients } = this.getRoutingInformation(pkt);\n    const promises = [];\n    if (gateway) {\n      // LOG(PR,_PKT(this, fn, '-wait-req-', pkt), pkt.data);\n      const p = this.awaitRemoteHandler(pkt, gateway);\n      if (p) promises.push(p);\n    }\n    if (Array.isArray(clients)) {\n      // LOG(PR,_PKT(this, fn, '-wait-req-', pkt), pkt.data);\n      clients.forEach(sock => {\n        // LOG(PR,fn,this.uaddr, 'await remote', pkt.msg, sock.uaddr);\n        const p = this.awaitRemoteHandler(pkt, sock);\n        if (p) promises.push(p);\n      });\n    }\n    let data = await Promise.all(promises);\n    return data; // an array of results\n  }\n\n  /** Start a handler call, which might have multiple implementors.\n   *  Returns data from all handlers as an array or a single item\n   */\n  private async awaitHandlers(pkt: NetPacket): Promise<any[]> {\n    const fn = 'awaitHandlers:';\n    const { msg } = pkt;\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0) return Promise.resolve([]);\n    const promises = [];\n    // LOG(PR,_PKT(this, fn, '-wait-hnd-', pkt), pkt.data);\n    handlers.forEach(handler => {\n      promises.push(\n        new Promise((resolve, reject) => {\n          try {\n            resolve(handler({ ...pkt.data }, pkt)); // copy of data and original pkt\n          } catch (err) {\n            reject(err);\n          }\n        })\n      );\n    });\n    let data = await Promise.all(promises);\n    return data; // an array of data\n  }\n\n  /** Send a single packet on all available interfaces based on the\n   *  message. Use for initial outgoing packets only from the\n   *  netCall, netSend, netSignal, and netPing methods.\n   */\n  private initialSend(pkt: NetPacket) {\n    const fn = 'initialSend:';\n    // sanity checks\n    if (pkt.src_addr === undefined) throw Error(`${fn}src_addr undefined`);\n    if (this.uaddr === undefined) throw Error(`${fn} uaddr undefined`);\n    if (pkt.hop_seq.length !== 0) throw Error(`${fn} pkt must have no hops yet`);\n    if (pkt.msg_type !== 'ping' && pkt.data === undefined)\n      throw Error(`${fn} data undefined`);\n    // prep for sending\n    // LOG(PR,_PKT(this, fn, '-send-req-', pkt), pkt.data);\n    const { gateway, clients } = this.getRoutingInformation(pkt);\n    // send on the wire\n    pkt.addHop(this.uaddr);\n    if (gateway) {\n      if (this.cli_reg === undefined) throw Error(`${fn} endpoint not registered`);\n      gateway.send(pkt);\n    }\n    if (Array.isArray(clients)) {\n      clients.forEach(sock => sock.send(pkt));\n    }\n  }\n\n  /** Used to forward a transaction from server to a remote client\n   */\n  private awaitRemoteHandler(pkt: NetPacket, sock: I_NetSocket): Promise<any[]> {\n    const fn = 'awaitRemoteHandler:';\n    const clone = this.clonePacket(pkt);\n    clone.id = this.assignPacketId(clone);\n    if (pkt.src_addr === sock.uaddr && SkipOriginType(pkt.msg_type)) return;\n    return this._proxySend(clone, sock);\n  }\n\n  /** Used to resolve a forwarded transaction received by server from\n   *  a remote client\n   */\n  private resolveRemoteHandler(pkt: NetPacket) {\n    const fn = 'resolveRemoteHandler:';\n    // LOG(PR, fn, this.uaddr, 'resolving', pkt.msg);\n    if (pkt.hop_rsvp !== true) throw Error(`${fn} packet is not RSVP`);\n    if (pkt.hop_dir !== 'res') throw Error(`${fn} packet is not a response`);\n    if (pkt.hop_seq.length < 2 && !pkt.isSpecialPkt())\n      throw Error(`${fn} packet has no hops`);\n    this._proxyReceive(pkt);\n  }\n\n  /** utility method for conducting transactions */\n  private _proxySend(pkt: NetPacket, sock: I_NetSocket): Promise<any> {\n    const fn = '_proxySend:';\n    const hash = GetPacketHashString(pkt);\n    return new Promise((resolve, reject) => {\n      const meta = { msg: pkt.msg, uaddr: pkt.src_addr };\n      this.trx_mgr.setTransaction(hash, { resolve, reject, ...meta });\n      sock.send(pkt);\n    });\n  }\n\n  /** utility method for completing transactions */\n  private _proxyReceive(pkt: NetPacket) {\n    const fn = '_proxyReceive:';\n    const hash = GetPacketHashString(pkt);\n    const resolver = this.trx_mgr.resolveTransaction(hash);\n    if (!resolver) throw Error(`${fn} no resolver for hash ${hash}`);\n    const { resolve, reject } = resolver;\n    const { data } = pkt;\n    // LOG(PR,_PKT(this, fn, '-recv-res-', pkt), pkt.data);\n    if (pkt.err) reject(pkt.err);\n    else resolve(data);\n  }\n\n  /** Return a packet to its source address. If this endpoint is a server,\n   *  then it might have the socket stored. Otherwise, if this endpoint is\n   *  also a client of another server, pass the back through the gateway.\n   *  This is used by server endpoints to return packets to clients.\n   */\n  private returnToSender(pkt: NetPacket) {\n    const fn = 'returnToSender:';\n    // check for validity\n    if (pkt.hop_rsvp !== true) throw Error(`${fn} packet is not RSVP`);\n    if (pkt.hop_seq.length < 1) throw Error(`${fn} packet has no hops`);\n    // prep for return\n    pkt.setDir('res');\n    pkt.addHop(this.uaddr);\n    // LOG(PR,_PKT(this, fn, '-send-res-', pkt), pkt.data);\n    const { gateway, src_addr } = this.getRoutingInformation(pkt);\n    if (this.isServer()) {\n      // LOG(PR,fn,this.uaddr, 'returning to', src_addr);\n      const socket = this.getClient(src_addr);\n      if (socket) socket.send(pkt);\n      // responses go to a single address; if we found it here,\n      // then we're done\n      return;\n    }\n    // if we have a gateway, pass the buck onward and let it\n    // find the client\n    if (gateway) {\n      gateway.send(pkt);\n      return;\n    }\n    LOG(PR, `${fn} unroutable packet`, pkt);\n  }\n\n  /** return array of sockets to use for sending packet,\n   *  based on pkt.msg and pkt.src_addr\n   */\n  private getRoutingInformation(pkt: NetPacket): PktRoutingInfo {\n    const fn = 'getRoutingInformation:';\n    const { msg, src_addr } = pkt;\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' is invalid message`);\n    // check if there's a gateway first and add it\n    const gateway = this.cli_gateway;\n    const self_addr = this.uaddr;\n    // check if we're a server\n    const msg_list = this.getMessageAddresses(msg);\n    const clients = [];\n    msg_list.forEach(uaddr => {\n      if (uaddr === this.uaddr) return; // skip self\n      const socket = this.getClient(uaddr);\n      if (socket) clients.push(socket);\n    });\n    return {\n      msg,\n      src_addr,\n      self_addr,\n      gateway,\n      clients\n    };\n  }\n\n  /** packet utility - - - - - - - - - - - - - - - - - - - - - - - - - - - -**/\n\n  private assignPacketId(pkt: NetPacket): NP_ID {\n    if (pkt.src_addr === undefined) pkt.src_addr = this.uaddr;\n    const count = ++this.pkt_counter;\n    pkt.id = `pkt[${pkt.src_addr}:${count}]`;\n    return pkt.id;\n  }\n\n  /** convert JSON to packet and return */\n  private packetFromJSON(json: string): NetPacket {\n    const pkt = new NetPacket();\n    pkt.setFromJSON(json);\n    return pkt;\n  }\n\n  /** create a new packet with proper address */\n  private newPacket(msg?: NP_Msg, data?: NP_Data): NetPacket {\n    const fn = 'newPacket:';\n    const pkt = new NetPacket(msg, data);\n    pkt.setSrcAddr(this.uaddr || UADDR_NONE);\n    if (this.cli_auth) pkt.setAuth(this.cli_auth);\n    pkt.id = this.assignPacketId(pkt);\n    return pkt;\n  }\n\n  /** clone a packet with new id */\n  private clonePacket(pkt: NetPacket): NetPacket {\n    const clone = this.newPacket(pkt.msg, pkt.data);\n    clone.setFromJSON(pkt.serialize());\n    clone.src_addr = this.uaddr;\n    clone.id = this.assignPacketId(clone);\n    return clone;\n  }\n\n  /** create an authentication packet, which is the first packet that must be sent\n   *  after connecting to the server */\n  private newAuthPacket(authObj: TClientAuth): NetPacket {\n    const pkt = this.newPacket('SRV:AUTH', { ...authObj });\n    pkt.setMeta('_auth', { rsvp: true });\n    pkt.setSrcAddr(UADDR_NONE); // provide null address\n    this.assignPacketId(pkt);\n    return pkt;\n  }\n\n  /** create a registration packet */\n  private newRegPacket(): NetPacket {\n    const pkt = this.newPacket('SRV:REG');\n    pkt.setMeta('_reg', { rsvp: true });\n    return pkt;\n  }\n\n  /** create a declaration packet shell */\n  private newDeclPacket(): NetPacket {\n    const pkt = this.newPacket('SRV:DEF');\n    pkt.setMeta('_decl', { rsvp: true });\n    return pkt;\n  }\n\n  /** environment utilities - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** return true if this endpoint is managing connections */\n  public isServer() {\n    const hasRemotes = this.svc_map.hasProxies();\n    return this.client_socks !== undefined && hasRemotes;\n  }\n\n  /** socket utilities  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** given a socket, see if it's already registered */\n  public isNewSocket(socket: I_NetSocket): boolean {\n    const fn = 'isNewSocket:';\n    if (typeof socket !== 'object') return false;\n    return socket.uaddr === undefined;\n  }\n\n  /** client endpoints need to have an authentication token to\n   *  access URNET beyond registration\n   */\n  public authorizeSocket(auth: any) {\n    const fn = 'authorizeSocket:';\n    LOG(PR, this.uaddr, 'would check auth token');\n  }\n} // end NetEndpoint class\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// export both default and named for interoperability\nexport default NetEndpoint;\nexport {\n  NetEndpoint // the class\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetSocket implements a \"socket-like\" object that consists of a send()\n  function and the original connection object. The send function implements\n  the write operation to the connection object. This way, we can provide\n  different methods for reading/writing to the connection object using the\n  same API and extend it as needed. \n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './my-class.ts';\n    const { NetSocket } = EP_DEFAULT.default; // note .default\n\n  You can import the types through dereferencing as usual:\n\n    import EP_DEFAULT, { I_NetSocket } from './my-module.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport NetPacket from './class-urnet-packet.ts';\n\n/// TYPE IMPORTS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { I_NetSocket, NP_Address, NP_Msg } from '../_types/urnet.d.ts';\nimport type {\n  NS_SendFunc,\n  NS_DataFunc,\n  NS_CloseFunc,\n  NS_GetConfigFunc,\n  NS_Options\n} from '../_types/urnet.d.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = true;\n// @ts-ignore - multiplatform definition check\nconst PR = typeof process !== 'undefined' ? 'Socket'.padEnd(13) : 'Socket:';\nconst LOG = console.log.bind(console);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** wrapper class a socket connection */\nclass NetSocket implements I_NetSocket {\n  connector: any; // the original connection object\n  sendFunc: NS_SendFunc; // the outgoing send function for this socket\n  closeFunc: NS_CloseFunc; // function to disconnect\n  onDataFunc: NS_DataFunc; // the incoming data function for this socket\n  getConfigFunc?: NS_GetConfigFunc; // function to get configuration\n  //\n  uaddr?: NP_Address; // assigned uaddr for this socket-ish object\n  auth?: any; // whatever authentication is needed for this socket\n  msglist?: NP_Msg[]; // messages queued for this socket\n  age?: number; // number of seconds since this socket was used\n  label?: string; // name of the socket-ish object\n\n  constructor(connectObj: any, io: NS_Options) {\n    this.connector = connectObj;\n    const { send, onData, close, getConfig } = io;\n    this.sendFunc = send.bind(connectObj);\n    this.closeFunc = close.bind(connectObj);\n    this.onDataFunc = onData.bind(connectObj);\n    if (typeof getConfig === 'function')\n      this.getConfigFunc = getConfig.bind(connectObj);\n  }\n\n  /** method for sending packets, using stored implementation-specific function */\n  send(pkt: NetPacket) {\n    this.sendFunc(pkt);\n  }\n\n  /** method for receiving packets, using stored implementation-specific function\n   *  that invokes the NetEndpoint's appropriate ingest method\n   */\n  onData(pkt: NetPacket) {\n    this.onDataFunc(pkt);\n  }\n\n  /** method for closing the connection, using stored implementation-specific\n   * function */\n  close() {\n    this.closeFunc();\n  }\n\n  /** method for retrieving the configuration, if available */\n  getConfig() {\n    if (typeof this.getConfigFunc === 'function') {\n      return this.getConfigFunc();\n    }\n    return { error: 'no getConfig function was defined' };\n  }\n\n  /* returns the native connector object, varies by implementation */\n  getConnector() {\n    return this.connector;\n  }\n\n  /** TODO: placeholder for authentication method */\n  authenticated() {\n    let a = this.auth !== undefined;\n    return a;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default NetSocket;\nexport { NetSocket };\nexport type { I_NetSocket, NS_SendFunc, NS_DataFunc, NS_Options };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  SNA-WEB-CONTEXT manages shared configuration and state across an SNA App\n  instance. \n\n  This module is similar to SNA-NODE-CONTEXT.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { ConsoleStyler } from '../common/util-prompts.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { OpResult, DataObj } from '../_types/dataset.ts';\nimport type { NetEndpoint } from '../common/class-urnet-endpoint.d.ts';\ntype LockState = 'init' | 'preconfig' | 'prehook' | 'locked';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log.bind(console);\nconst PR = ConsoleStyler('sna.ctxt', 'TagGray');\nconst DBG = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet APP_CFG: DataObj = {}; // pre-provided configuration object\nlet CFG_STATE: Set<LockState> = new Set();\n\n/// HELPER METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/*** return lockstate if state successfully changed, undefined otherwise */\nfunction SNA_SetLockState(state: LockState): LockState {\n  if (CFG_STATE.has(state)) return undefined;\n  // enforce order of state progression\n  if (state === 'init' && CFG_STATE.size !== 0) return undefined;\n  if (state === 'preconfig' && !CFG_STATE.has('init')) return undefined;\n  if (state === 'prehook' && !CFG_STATE.has('preconfig')) return undefined;\n  if (state === 'locked' && !CFG_STATE.has('prehook')) return undefined;\n  CFG_STATE.add(state);\n  return state;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if state is set, false otherwise */\nfunction SNA_GetLockState(state: LockState): boolean {\n  return CFG_STATE.has(state);\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: register a global configuration object for server, merging with the\n *  existing configuration */\nfunction SNA_SetAppConfig(config: DataObj): DataObj {\n  // when no config is provided, return the current global config\n  if (config === undefined) return APP_CFG;\n  // otherwise merge the new config with the existing global config\n  if (Object.keys(APP_CFG).length === 0) {\n    if (DBG) LOG(...PR(`Setting SNA Global Configuration`));\n  } else if (DBG) LOG(...PR(`Updating SNA Global Configuration`));\n  APP_CFG = Object.assign(APP_CFG, config);\n  // return a copy of the global config\n  if (DBG) LOG(...PR('SetAppConfig()', APP_CFG));\n  return { ...APP_CFG };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: return the current global configuration object for server after start */\nfunction SNA_GetAppConfig(): DataObj {\n  const fn = 'SNA_GetAppConfig:';\n  if (SNA_GetLockState('preconfig') === false) {\n    console.warn(`${fn} Derived config should be set in PreHook at earliest.`);\n    console.warn(`Complete config is guaranteed at lifecycle start.`);\n  }\n  return { ...APP_CFG };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** PRIVATE API: return the current global configuration object for server */\nfunction SNA_GetAppConfigUnsafe(): DataObj {\n  return APP_CFG;\n}\n\n/// ENABLE CONTEXT HOOK ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** internal handler for updating the global configuration */\nfunction HandleUpdateMessage(data: DataObj) {}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: app startup should invoke this during SNA/NET_ACTIVE,\n *  passing the NetEndpoint instance */\nfunction AddMessageHandlers(EP: NetEndpoint) {\n  EP.addMessageHandler('SNA/SET_APP_CONFIG', HandleUpdateMessage);\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  SNA_SetLockState, // set locks state\n  SNA_GetLockState, // get lock state\n  SNA_SetAppConfig, // set global server config\n  SNA_GetAppConfig, // get copy global server config\n  // direct access to global config object\n  SNA_GetAppConfigUnsafe, // get direct global server config\n  //\n  AddMessageHandlers // add message handlers\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  SNA WEB URNET - Shared NetEndpoint module for SNA client-side apps\n\n  This is a utility module is used for client-side system components that need to \n  connect to URNET. User components can use sna-web.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { NetEndpoint } from '../common/class-urnet-endpoint.ts';\nimport { NetSocket } from '../common/class-urnet-socket.ts';\nimport { ConsoleStyler } from '../common/util-prompts.ts';\nimport { SNA_SetAppConfig } from './sna-web-context.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { NM_Handler } from '../_types/urnet.d.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log.bind(console);\nconst PR = ConsoleStyler('sna.unet', 'TagGray');\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet SERVER_LINK: WebSocket;\nlet EP: NetEndpoint = new NetEndpoint();\n\n/// CONNECT TO URNET SERVER ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** resolves to true if the connection is successful, false if not */\nfunction SNA_NetConnect(): Promise<boolean> {\n  const wss_url = '/sna-ws';\n  const promiseConnect = new Promise<boolean>(resolve => {\n    SERVER_LINK = new WebSocket(wss_url);\n    SERVER_LINK.addEventListener('open', async () => {\n      const send = pkt => SERVER_LINK.send(pkt.serialize());\n      const onData = event => EP._ingestServerPacket(event.data, client_sock);\n      const close = () => SERVER_LINK.close();\n      const client_sock = new NetSocket(SERVER_LINK, { send, onData, close });\n      SERVER_LINK.addEventListener('message', onData);\n      SERVER_LINK.addEventListener('close', () => {\n        EP.disconnectAsClient();\n      });\n      // needed on chrome, which doesn't appear to send a websocket closeframe\n      window.addEventListener('beforeunload', EP.disconnectAsClient);\n      // 2. start client; EP handles the rest\n      const auth = { identity: 'my_voice_is_my_passport', secret: 'crypty' };\n      const resdata = await EP.connectAsClient(client_sock, auth);\n      if (resdata.error) {\n        console.error(resdata.error);\n        resolve(false);\n        return;\n      }\n      // 3. register client with server\n      const info = { name: 'WebClient', type: 'client' };\n      const regdata = await EP.declareClientProperties(info);\n      if (regdata.error) {\n        console.error(regdata.error);\n        resolve(false);\n        return;\n      }\n      // 3a. set app config if provided\n      const { config } = regdata;\n      if (config) SNA_SetAppConfig(config);\n\n      // 4. all done! declareClientProperties() and declareClientMessages()\n      // can happen any time after auth succeeds.\n      resolve(true);\n    }); // end createConnection\n  });\n  return promiseConnect;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: return the NetEndpoint instance */\nfunction ClientEndpoint() {\n  if (!EP) throw Error('ClientEndpoint not initialized');\n  return EP;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API:delare message handlers and register after authentation to be added to\n *  URNET message network */\nasync function RegisterMessages() {\n  const resdata = await EP.declareClientMessages();\n  return resdata;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: add the message handler */\nfunction AddMessageHandler(message: string, handler: NM_Handler) {\n  EP.addMessageHandler(message, handler);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: delete the message handler */\nfunction DeleteMessageHandler(message: string, handler: NM_Handler) {\n  EP.deleteMessageHandler(message, handler);\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  //\n  SNA_NetConnect,\n  //\n  ClientEndpoint,\n  RegisterMessages,\n  AddMessageHandler,\n  DeleteMessageHandler\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  PhaseMachine allows you to define \"operation phase_def\" in the lifecycle that\n  run hooks in a specific order. The addHookEntry functions that are provided can\n  return a Promise that must be resolved before the next addHookEntry is called.\n\n  When creating a PhaseMachine instance, it is given a MachineName and a phase_def\n  structure consists of PHASE_GROUPS containing PHASES. \n\n  The main API function is HookPhase(pmHookSelector, handlerFunc), which allows you\n  to add a hook to a phase or phase group. The hook selector is simply\n  PHASEGROUP+'/'+PHASEID. An event suffix can be added to the PHASEID to designate\n  :enter, :exec, or :exit events (default is :exec).\n\n  If the machine doesn't yet exist, the hook will be queued until the machine\n  with matching MachineName. On creation, the queued hooks will be processed and\n  added to the function lists held for each phase.\n\n  PhaseMachine instances are managed by a \"Game Loop\" or \"Startup Sequence\"\n  manager that calls each PHASE_GROUP in succession. If a handerFunc returns\n  a Promise, the next phase will not be called until the Promise resolves.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES & INTERFACES ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype MachineName = string; // uppercase string\ntype MachineState = {\n  _cur_phase: PhaseID;\n  _cur_group: PhaseID;\n  [key: string]: any;\n};\ntype PhaseID = string; // upper snakecase string for groups and phases\ntype PhaseGroupID = `PHASE_${PhaseID}`; // e.g. 'PHASE_UPDATE_ALL'\ntype PhaseList = PhaseID[]; // list of phase names\ntype PhaseDefinition = {\n  [phaseGroup: PhaseID]: PhaseList;\n};\ntype HookSelector = `${MachineName}/${PhaseID}`; // e.g. 'SIM/UPDATE_ALL'\ntype HookFunction = (machine?: MachineName, phase?: PhaseID) => void | Promise<any>;\ntype HookObj = {\n  phase: PhaseID;\n  enter?: HookFunction;\n  exec?: HookFunction;\n  exit?: HookFunction;\n};\ntype HookEvent =\n  | 'enter' // entering a phase\n  | 'exec' //  while inside a phase\n  | 'exit'; // exiting a phase\n\ntype Executors = [Function[], Promise<void>[]];\ntype Selectors = [MachineName, PhaseID, HookEvent];\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst LOG = console.log.bind(console);\nconst WARN = console.warn.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst m_machines: Map<MachineName, PhaseMachine> = new Map();\nconst m_queue: Map<MachineName, HookObj[]> = new Map();\n\n/// PRIVATE HELPERS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** UTILITY: extract the phase machine and phase from a string delimited by\n *  a slash. For example, 'SIM/UPDATE_ALL' designates the machine 'SIM' with\n *  a phase called 'UPDATE_ALL'. Optional :event suffix can be added to the\n *  phase name to designate the event type, otherwise it defaults to 'exec'\n *  (phase events are lowercase strings 'enter', 'exec', 'exit')\n */\nfunction m_DecodeHookSelector(sel: string): Selectors {\n  const fn = 'm_DecodeHookSelector:';\n  if (typeof sel !== 'string') throw Error('arg must be non-empty string');\n  // regex to extract machine, phase, and event from string\n  // of format 'machine/phase:event' where event is optional\n  const regex = /([^/]+)\\/([^:]+):?([^:]*)/;\n  let [_, machine, phase, event] = sel.match(regex) || [];\n  if (!machine || !phase) throw Error(`${fn} invalid hook selector '${sel}'`);\n  if (machine && machine !== machine.toUpperCase())\n    throw Error(`${fn} machine name must be uppercase`);\n  if (phase && phase !== phase.toUpperCase())\n    throw Error(`${fn} phase name must be uppercase`);\n  if (!event) event = 'exec';\n  if (!['enter', 'exec', 'exit'].includes(event))\n    throw Error(`${fn} invalid event name '${event}'`);\n  if (DBG) console.log(`${fn} ${machine} / ${phase} : ${event}`);\n  return [machine, phase, event as HookEvent];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** UTILITY: extract the phase group from a phase ID */\nfunction m_DecodePhaseGroup(pm: PhaseMachine, phaseID: PhaseID): PhaseGroupID {\n  if (!(pm instanceof PhaseMachine)) throw Error('arg1 must be PhaseMachine');\n  return pm.lookupPhaseGroup(phaseID);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** UTILITY: process queued hooks for a phasemachine name. */\nfunction m_ProcessHookQueue(pmName: MachineName) {\n  const fn = 'm_ProcessHookQueue:';\n  const machine = m_machines.get(pmName);\n  if (!machine) return; // machine not yet created\n  const qhooks = m_queue.get(pmName) || [];\n  if (DBG) LOG(`phasemachine '${pmName}' has ${qhooks.length} queued ops`);\n  try {\n    qhooks.forEach(hook => machine.addHookEntry(hook.phase, hook));\n    m_queue.delete(pmName);\n  } catch (e) {\n    console.warn('Error while processing queued phasemachine hooks');\n    throw Error(e.toString());\n  }\n}\n\n/// URSYS PhaseMachine CLASS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass PhaseMachine {\n  pm_name: string;\n  pm_state: MachineState;\n  phase_hooks: Map<PhaseID, HookObj[]>; // name -> addHookEntry[]\n  phase_membership: Map<PhaseID, PhaseGroupID>;\n  phase_def: PhaseDefinition;\n  phase_timer: ReturnType<typeof setTimeout>;\n\n  constructor(pmName: MachineName, phases: PhaseDefinition) {\n    // initialize\n    if (typeof pmName !== 'string') throw Error('arg1 must be string');\n    if (pmName.length < 1) throw Error('arg1 string.length must be > 1');\n    if (m_machines.has(pmName)) throw Error(`already registered '${pmName}'`);\n    this.pm_name = pmName.toUpperCase();\n    this.phase_hooks = new Map();\n    this.phase_membership = new Map();\n    this.phase_def = phases;\n    this.pm_state = {\n      _cur_phase: '', // current operation\n      _cur_group: '' // current operation group\n    };\n    this.phase_timer = null;\n    // parse phase_def into initial map structure\n    // note that both phases and their group containers can be hooked\n    const groupList: PhaseGroupID[] = Object.keys(this.phase_def) as PhaseGroupID[];\n    groupList.forEach(pgroup => {\n      // initialize an array to store hooks for each phase group name\n      this.phase_hooks.set(pgroup, []);\n      // now initialize array for each phase >IN< the phase group\n      this.phase_def[pgroup].forEach(p => {\n        this.phase_hooks.set(p, []); // add each op in the phase to ophooks map\n        this.phase_membership.set(p, pgroup); // add phase to group membership\n      });\n    });\n    // save instance by name\n    m_machines.set(pmName, this);\n    // check queued hooks\n    m_ProcessHookQueue(pmName);\n  } // end constructor\n\n  /// GETTER SETTER ///\n\n  /** setter: update current phase */\n  set cur_phase(phase: PhaseID) {\n    this.pm_state._cur_phase = phase;\n  }\n  /** setter: update current phase group */\n  set cur_group(group: PhaseID) {\n    this.pm_state._cur_group = group;\n  }\n  /** return current phase */\n  get cur_phase() {\n    return this.pm_state._cur_phase;\n  }\n  /** return current phase group */\n  get cur_group() {\n    return this.pm_state._cur_group;\n  }\n\n  /** return the list of phasegroups or phases in the group */\n  getPhaseList(phase?: PhaseID): string[] {\n    if (phase === undefined) {\n      const groups = Object.keys(this.phase_def);\n      return groups;\n    }\n    const group = this.phase_def[phase];\n    if (group === undefined) return [];\n    return group;\n  }\n\n  /// PHASE OPERATIONS ///\n\n  /** API: register an Operations Handler. <op> is a string constant\n   *  define in phase_def and converted into the MAP. <f> is a function that\n   *  will be invoked during the operation, and it can return a promise or value.\n   */\n  addHookEntry(phid: PhaseID, hook: HookObj) {\n    const fn = 'addHookEntry:';\n    const hookEntry = this.phase_hooks.get(phid);\n    if (hookEntry === undefined) {\n      WARN(`${fn} '${phid}' is not defined in ${this.pm_name} phase def`);\n      return;\n    }\n    this.phase_hooks.get(phid).push(hook);\n    if (DBG) LOG(`${fn} added hook for ${phid}`);\n  }\n\n  /** API: execute all hooks associated with a phase event. If any phase\n   *  returns a Promise, the function will wait for it to resolve before\n   *  returning.\n   */\n  async _promiseHookEvaluation(phid: PhaseID, evt: HookEvent): Promise<void[]> {\n    const fn = '_promiseHookEvaluation:';\n    // housekeeping for phase group\n    if (phid.startsWith('PHASE_')) this.cur_group = phid;\n    else {\n      this.cur_group = this.phase_membership.get(phid);\n      this.cur_phase = phid;\n    }\n    // check that there are executors for this phase event\n    let hooks = this.phase_hooks.get(phid); // array of hook objects\n    if (hooks.length === 0) return Promise.resolve([]);\n    // got this far, there is a mix of functions and promises\n    const promises = [];\n    // LOG(`hooks[${phid}]: ${hooks.map(h => h.phase)}`);\n    for (const hook of hooks) {\n      const hookFunc = hook[evt]; // { exec: fn, enter: fn, exit: fn }\n      // first run the executor function\n      if (hookFunc === undefined) return;\n      let retval = hookFunc(this.pm_name, phid); // can return void or promise <void>\n      // if the executor returns a promise, add it to the promises array\n      if (retval instanceof Promise) {\n        promises.push(retval);\n      }\n    }\n    // suspend operation until all promises have resolved for this phase\n    if (promises.length > 0) return await Promise.all(promises);\n  }\n\n  /** API: execute all Promises associated with a Phase Group in serial order,\n   *  waiting for each to resolve before executing the next. If there are hooks\n   *  associated with the PhaseGroup, they fire after all Phases have completed.\n   */\n  async invokeGroupHooks(pgroup: string) {\n    const fn = 'invokeGroupHooks:';\n    // housekeeping for phase group\n    this.cur_group = pgroup;\n    // LOG(`${fn} executing group ${pgroup}`);\n    // process the group enter hooks\n    await this._promiseHookEvaluation(pgroup, 'enter'); // prgroup is just another named phase in this context\n    // processes phases inside group first\n    const phaseList = this.phase_def[pgroup];\n    // if (phaseList.length === 0) return; // allow empty phase groups\n    for (const phase of phaseList) {\n      if (DBG) console.log(`${fn} entering group ${phase}`);\n      await this._promiseHookEvaluation(phase, 'enter');\n      await this._promiseHookEvaluation(phase, 'exec');\n      await this._promiseHookEvaluation(phase, 'exit');\n    }\n    // then process remaining group hooks\n    await this._promiseHookEvaluation(pgroup, 'exec'); // just another named phase\n    await this._promiseHookEvaluation(pgroup, 'exit'); // just another named phase\n  }\n\n  /** helper: return hook function array for a given phase or phase group.\n   *  It defaults to returning the 'exec' function.\n   */\n  getHookFunctions(phid: PhaseID, evt: HookEvent = 'exec') {\n    const hooks = this.phase_hooks.get(phid);\n    return hooks.map(hook => hook[evt]);\n  }\n\n  /** helper: check for phase group membership */\n  lookupPhaseGroup(phid: string): PhaseGroupID {\n    const fn = 'lookupPhaseGroup:';\n    if (typeof phid !== 'string') throw Error(`${fn} arg must be string`);\n    if (this.phase_def[phid]) return phid as PhaseGroupID;\n    return this.phase_membership.get(phid);\n  }\n\n  /** helper: check for valid phase selector */\n  hasHook(psel: string) {\n    const fn = 'hasHook:';\n    const [machine, phase] = m_DecodeHookSelector(psel);\n    return this.phase_hooks.has(phase);\n  }\n\n  /** helper: print current phase information to console */\n  consolePhaseInfo(pr = 'PhaseInfo', bg = 'MediumVioletRed') {\n    const phaseInfo = `${this.pm_name}/${this.cur_group}:${this.cur_phase}`;\n    LOG(\n      `%c${pr}%c`,\n      `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n      'color:auto;background-color:auto'\n    );\n    return phaseInfo;\n  }\n\n  /// STATIC CLASS API ///\n\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** API: Register a PhaseHook at any time. If the machine doesn't yet exist,\n   *  the hook will be queued until the machine is created */\n  static HookPhase(selector: HookSelector, fn: HookFunction) {\n    const [machine, phase, event] = m_DecodeHookSelector(selector);\n    const pm = m_machines.get(machine);\n    const hook = { phase, [event]: fn };\n    // if the phase machine exists, add the hook\n    if (pm) {\n      pm.addHookEntry(phase, hook);\n      return;\n    }\n    // otherwise, queue the request, creating the machine queue if necessary\n    if (!m_queue.has(machine)) m_queue.set(machine, []);\n    const mq = m_queue.get(machine);\n    mq.push(hook); // array of 2-element arrays\n    m_ProcessHookQueue(machine);\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** API: Execute a PhaseGroup in a machine. If the machine doesn't yet exist,\n   *  the function will throw an error. */\n  static async RunPhaseGroup(selector: HookSelector) {\n    const fn = 'RunPhaseGroup:';\n    const [machine, phaseID] = m_DecodeHookSelector(selector);\n    const pm = m_machines.get(machine);\n    if (!pm) throw Error(`machine '${machine}' not yet defined`);\n    const phaseGroup = m_DecodePhaseGroup(pm, phaseID);\n    if (phaseGroup === undefined)\n      throw Error(`${fn} phaseGroup '${phaseID}' is undefined`);\n    await pm.invokeGroupHooks(phaseGroup);\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** API: return a list of all pending machines that have not been hooked. */\n  static GetDanglingHooks() {\n    let out = [];\n    for (const [name, hooks] of m_queue)\n      for (const hook of hooks) out.push(`${name}/${hook.phase}`);\n    if (out.length === 0) return null;\n    return out;\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** API: return a string of all current machines and their phase_def */\n  static GetMachineStates() {\n    let out = [];\n    for (const [name, m] of m_machines)\n      out.push(`${name}[${m.cur_group}.${m.cur_phase}]`);\n    return out;\n  }\n\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** API: return initialized PhaseMachine if it exists */\n  static GetMachine(name: MachineName) {\n    return m_machines.get(name);\n  }\n  // end class PhaseMachine\n}\n\n/// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/**  API: Register a PhaseHook at any time. If the machine doesn't yet exist,\n *   the hook will be queued until the machine is created. The format for\n *   selector is MACHINE/PHASE_NAME, with an optional :enter :exec :exit\n *   event tag at the end. */\nfunction HookPhase(selector: HookSelector, fn: HookFunction) {\n  PhaseMachine.HookPhase(selector, fn);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Run all hooks associated with the selector in 'enter', 'exec', and\n *  'exit' order */\nasync function RunPhaseGroup(selector: HookSelector) {\n  await PhaseMachine.RunPhaseGroup(selector);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: return a list of all pending machines that have not been hooked.\n *  Used after running all phase groups to detect misdefined hooks */\nfunction GetDanglingHooks() {\n  return PhaseMachine.GetDanglingHooks();\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Create a new PhaseMachine instance with the given name and phase_def */\nfunction NewPhaseMachine(name: MachineName, phases: PhaseDefinition) {\n  return new PhaseMachine(name, phases);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: return a string of all current machines and their phase_def */\nfunction GetMachineStates() {\n  return PhaseMachine.GetMachineStates();\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: return initialized PhaseMachine if it exists */\nfunction GetMachine(name: MachineName) {\n  return m_machines.get(name);\n}\n\n/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// the class is accessible as default when imported by other ts files\nexport default PhaseMachine;\n/// when imported from node mts module, this is what is received as default\nexport {\n  PhaseMachine, // class instance\n  // static methods that work on selecttors\n  NewPhaseMachine, // (name, phases)\n  HookPhase, // (hookselector, handlerFunc, event)=>void\n  RunPhaseGroup, // (hookselector)=>void\n  GetDanglingHooks,\n  GetMachine, // (name)=>PhaseMachine\n  GetMachineStates // ()=>PhaseDef[]\n};\n/// type exports\nexport type {\n  MachineName,\n  PhaseID,\n  PhaseDefinition,\n  HookSelector,\n  HookFunction,\n  HookEvent\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  SNA_Component Support Class\n\n  Formalizes the interface of an SNA Module that participates in a lifecycle\n  driven SNA Application. SNA Modules export an instance of this class\n  as the default export.\n\n  SNA Module use HOOKS to interact with the lifecycle of the application.\n  By registering an SNA Module through RegisterModule(), the module is given\n  the chance to configure itself, hook into selected lifecycle events, and\n  also provide subscribe/unsubscribe methods for event handling. SNA Modules\n  can also have other SNA modules they are dependent on, and so can register\n  them during their own registration via the AddComponent() method.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  SNA_ComponentProps,\n  MOD_AddComponent,\n  MOD_PreConfig,\n  MOD_PreHook,\n  SNA_EvtOn,\n  SNA_EvtOff\n} from '../_types/sna.d.ts';\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass SNA_Component implements SNA_ComponentProps {\n  _name: string;\n  AddComponent?: MOD_AddComponent;\n  PreConfig?: MOD_PreConfig;\n  PreHook?: MOD_PreHook;\n  Subscribe?: SNA_EvtOn;\n  Unsubscribe?: SNA_EvtOff;\n\n  constructor(name: string, config: SNA_ComponentProps) {\n    if (typeof name !== 'string') throw Error('SNA_Component: bad name');\n    this._name = name;\n    const { AddComponent, PreConfig, PreHook, Subscribe, Unsubscribe } = config;\n    this.AddComponent = AddComponent;\n    this.PreConfig = PreConfig;\n    this.PreHook = PreHook;\n    this.Subscribe = Subscribe;\n    this.Unsubscribe = Unsubscribe;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** utility to declare an SNA_Component with a name and config object */\nfunction SNA_NewComponent(name: string, config: SNA_ComponentProps): SNA_Component {\n  return new SNA_Component(name, config);\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default SNA_Component;\nexport {\n  SNA_Component,\n  // method\n  SNA_NewComponent\n};\nexport type {\n  SNA_ComponentProps,\n  MOD_AddComponent,\n  MOD_PreConfig,\n  MOD_PreHook,\n  SNA_EvtOn,\n  SNA_EvtOff\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  SNA WEB HOOKS - Shared PhaseMachine module for SNA client-side apps\n\n  This is a utility module used for client-side system components that need to\n  access the SNA lifecycle. User components can use sna-web.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PhaseMachine } from '../common/class-phase-machine.ts';\nimport { ConsoleStyler } from '../common/util-prompts.ts';\nimport { IsSnakeCase } from '../common/util-text.ts';\nimport { SNA_Component } from '../common/class-sna-component.ts';\nimport {\n  SNA_GetAppConfigUnsafe,\n  SNA_SetLockState,\n  SNA_GetLockState\n} from './sna-web-context.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { PhaseID, HookFunction } from '../common/class-phase-machine.d.ts';\nimport type { SNA_ComponentProps } from '../_types/sna.ts';\nimport type { DataObj } from '../_types/dataset.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log.bind(console);\nconst PR = ConsoleStyler('sna.hook', 'TagGray');\nconst DBG = true;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet COMPONENTS: Set<SNA_Component> = new Set();\nlet cfg_valid: boolean = false;\nlet hooks_valid: boolean = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet PM: PhaseMachine;\n\n/// DEREFERENCED STATIC METHODS ///////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst { HookPhase, RunPhaseGroup, GetMachine, GetDanglingHooks } = PhaseMachine;\n\n/// SNA COMPONENT REGISTRATION ////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction SNA_NewComponent(name: string, config: SNA_ComponentProps): SNA_Component {\n  return new SNA_Component(name, config);\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: register a component with the SNA lifecycle */\nfunction SNA_UseComponent(component: SNA_Component) {\n  const fn = 'SNA_UseComponent:';\n  const { _name } = component;\n  if (typeof _name !== 'string')\n    throw Error(`${fn} bad SNA component: missing _name`);\n  // if (!IsSnakeCase(_name))\n  //   throw Error(`${fn} bad SNA component: _name must be snake_case`);\n  if (COMPONENTS.has(component))\n    LOG(...PR(`SNA_Component '${_name}' already registered`));\n  if (DBG) LOG(...PR(`Registering SNA_Component: '${_name}'`));\n  COMPONENTS.add(component);\n  // see if the component has a registration hook for chained registration\n  const { AddComponent } = component;\n  if (typeof AddComponent === 'function') {\n    if (DBG) LOG(...PR(`.. '${_name}' is adding modules`));\n    AddComponent({ f_AddComponent: SNA_UseComponent });\n  }\n}\n\n/// SNA LIFECYCLE /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: initialize the server's lifecycle */\nasync function SNA_LifecycleStart() {\n  const fn = 'SNA_LifecycleStart:';\n  if (PM === undefined)\n    PM = new PhaseMachine('SNA', {\n      PHASE_BOOT: [\n        'APP_PAGE', // app initial page load complete\n        'APP_BOOT' // for minimal initialization of data structure\n      ],\n      PHASE_INIT: [\n        'DOM_READY' // the app's initial page has rendered fully\n      ],\n      PHASE_CONNECT: [\n        'OpRe', // start the network connection\n        'NET_AUTH', // hook for authentication setup\n        'NET_REGISTER', // hook for registration info\n        'NET_READY', // ursys network is active and registered\n        'NET_DECLARE', // hook for declaring messages to URNET\n        'NET_ACTIVE', // system is listen for messages\n        'NET_DATASET' // hook for dataset connection\n      ],\n      PHASE_LOAD: [\n        'LOAD_DATA', // load data from server\n        'LOAD_CONFIG', // load configuration\n        'LOAD_ASSETS' // load assets\n      ],\n      PHASE_CONFIG: [\n        'APP_CONFIG', // app configure based on loaded data, config, etc\n        'APP_READY' // app is completely configured\n      ],\n      PHASE_RUN: [\n        'APP_RESET', // app sets initial settings\n        'APP_START', // app starts running\n        'APP_RUN' // app is running (terminal phase)\n      ],\n      /* independent groups */\n      PHASE_SHUTDOWN: [\n        'APP_CLOSE', // app is close hook\n        'NET_DISCONNECT', // network disconnected hook\n        'APP_STOP' // app stop hook\n      ],\n      PHASE_ERROR: ['APP_ERROR']\n    });\n\n  // advance from init->preconfig\n  if (!SNA_SetLockState('init')) LOG(...PR(`lockstate 'init' fail`));\n\n  // configure all registered components with global config\n  const APP_CFG_COPY = { ...SNA_GetAppConfigUnsafe() };\n  for (const component of COMPONENTS) {\n    const { PreConfig, _name } = component;\n    if (typeof PreConfig === 'function') {\n      if (DBG) LOG(...PR(`PreConfig SNA_Component '${_name}'`));\n      PreConfig(APP_CFG_COPY);\n    }\n  }\n\n  // advance from init->preconfig\n  if (!SNA_SetLockState('preconfig')) LOG(...PR(`lockstate 'preconfig' fail`));\n\n  // initialize all registered components\n  for (const component of COMPONENTS) {\n    const { PreHook, _name } = component;\n    if (typeof PreHook === 'function') {\n      if (DBG) LOG(...PR(`PreHook SNA_Component '${_name}'`));\n      PreHook();\n    }\n  }\n\n  // advance from preconfig->prehook\n  if (!SNA_SetLockState('prehook')) LOG(...PR(`lockstate 'prehook' fail`));\n\n  // run phase groups in order\n  if (DBG) LOG(...PR(`SNA App Lifecycle is starting`));\n  await RunPhaseGroup('SNA/PHASE_BOOT');\n  await RunPhaseGroup('SNA/PHASE_INIT');\n  await RunPhaseGroup('SNA/PHASE_CONNECT');\n  await RunPhaseGroup('SNA/PHASE_LOAD');\n  await RunPhaseGroup('SNA/PHASE_CONFIG');\n  await RunPhaseGroup('SNA/PHASE_RUN');\n\n  // advance from preconfig->locked\n  if (!SNA_SetLockState('locked')) LOG(...PR(`lockstate 'locked' fail`));\n\n  // check for mystery hooks due to typos or dependency issues\n  const dooks = GetDanglingHooks();\n  if (dooks) {\n    LOG(...PR(`*** ERROR *** dangling phase hooks detected`), dooks);\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: shortcut hook for SNA machine */\nfunction SNA_HookAppPhase(phase: PhaseID, fn: HookFunction) {\n  HookPhase(`SNA/${phase}`, fn);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: return the current phase machine state */\nfunction SNA_LifecycleStatus() {\n  const status: { [key: string]: any } = {};\n  const cfg_valid = SNA_GetLockState('preconfig');\n  const hooks_valid = SNA_GetLockState('prehook');\n\n  if (PM === undefined)\n    Object.assign(status, {\n      preconfig: cfg_valid,\n      prehook: hooks_valid,\n      phaseGroup: undefined,\n      phase: undefined,\n      message: 'SNA PhaseMachine is undefined'\n    });\n  else {\n    const { cur_group, cur_phase } = PM;\n    const lastPhaseGroup = PM.getPhaseList('PHASE_RUN');\n    const lastPhase = lastPhaseGroup[lastPhaseGroup.length - 1];\n    Object.assign(status, {\n      preconfig: cfg_valid,\n      prehook: hooks_valid,\n      phaseGroup: PM.cur_group,\n      phase: PM.cur_phase,\n      completed: cur_phase === lastPhase\n    });\n    status.message = `SNA current lifecycle: '${cur_group}/${cur_phase}'`;\n    if (status.completed) status.message += ' [completed]';\n  }\n  return status;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // sna process\n  SNA_NewComponent,\n  SNA_UseComponent,\n  SNA_HookAppPhase,\n  SNA_LifecycleStart,\n  SNA_LifecycleStatus\n};\nexport {\n  // phase machine static methods\n  HookPhase,\n  RunPhaseGroup,\n  GetMachine,\n  GetDanglingHooks\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  SNA-WEB-DATACLIENT is the client-side data manager that mirrors a \n  server-side dataset. It uses URNET network to perform data operations with\n  SNA-NODE-DATASERVER\n\n  A Dataset contains several named \"bins\" of DataBin collections which are\n  formally as a bucket with a schema. Datasets are in-memory object stores\n  intended for real-time manipulation of data. They can be either local or\n  synched with a remote server-side dataset.\n\n  KEY METHODS:\n  - Configure() is used to initialize the local dataset and select a\n    remote adapter based on the passed 'mode' parameter.\n  - Activate() is used to connect to the remote dataset and load the data.\n  - SetDataFromObject() is used to initialize the Dataset with\n    a data object that conforms to the DS_DatasetObj schema.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { ConsoleStyler } from '../common/util-prompts.ts';\nimport { SNA_HookAppPhase } from './sna-web-hooks.ts';\nimport { SNA_NewComponent } from '../common/class-sna-component.ts';\nimport {\n  AddMessageHandler,\n  ClientEndpoint,\n  RegisterMessages\n} from './sna-web-urnet-client.ts';\nimport { Dataset } from '../common/class-data-dataset.ts';\nimport { DatasetAdapter } from '../common/abstract-dataset-adapter.ts';\nimport { DecodeDataURI, DecodeDataConfig } from '../common/util-data-ops.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { SNA_EvtHandler } from '../_types/sna.ts';\nimport type {\n  IDS_DatasetAdapter,\n  DatasetReq,\n  DataObj,\n  DatasetRes,\n  DataSyncOptions,\n  DataSyncReq,\n  DataSyncRes,\n  DataSyncMode,\n  UR_Item,\n  DS_DatasetObj,\n  DS_DataURI,\n  SearchOptions,\n  OpResult,\n  RecordSet\n} from '../_types/dataset.ts';\n\n//\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PR = ConsoleStyler('SNA.DCI', 'TagBlue');\nconst LOG = console.log.bind(console);\nconst DBG = true;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet DSET: Dataset; // singleton instance of the dataset\nlet DS_URI: DS_DataURI; // the dataset URI\nlet DS_MODE: DataSyncMode; // the dataset mode\n\n/// DEFAULT SNA-DATASERVER REMOTE ///////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet F_ReadOnly: boolean = false; // set to true to prevent remote writes\nlet F_SyncInit: boolean = false; // set to true to sync data on init\nlet REMOTE: DatasetAdapter; // the remote data adapter\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass DefaultDatasetAdapter extends DatasetAdapter {\n  // inherited fields\n  // this.accToken:string\n\n  /** select the \"current dataset to use\" on master server */\n  async selectDataset(dataURI: string): Promise<OpResult> {\n    const EP = ClientEndpoint();\n    if (EP) {\n      const res = await EP.netCall('SYNC:SRV_DSET', { dataURI, op: 'LOAD' });\n      return res; // => { status, dataURI, error }\n    }\n  }\n\n  /** return either the current dataset object or the one\n   *  specified by dataURI */\n  async getDataObj(dataURI?: string): Promise<DS_DatasetObj> {\n    const EP = ClientEndpoint();\n    if (EP) {\n      const res = await EP.netCall('SYNC:SRV_DSET', {\n        dataURI: dataURI || DS_URI,\n        op: 'GET_DATA'\n      });\n      return res;\n    }\n  }\n\n  /** perform a data collection (databin) operation, returning\n   *  the status of the operation (but never data) */\n  async syncData(syncReq: DataSyncReq) {\n    const EP = ClientEndpoint();\n    if (EP) {\n      const res = await EP.netCall('SYNC:SRV_DATA', syncReq);\n      return res;\n    }\n  }\n\n  /** perform a dataset operation, returning the status of the operation */\n  async execDataset(syncReq: DatasetReq) {\n    const EP = ClientEndpoint();\n    if (EP) {\n      const res = await EP.netCall('SYNC:SRV_DSET', syncReq);\n      return res;\n    }\n  }\n\n  /** catch-all implementation-specific error handler */\n  async handleError(errData: any): Promise<any> {\n    Promise.resolve();\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet DefaultAdapter = new DefaultDatasetAdapter(); // for remotess\n\n/// DATASYNC HANDLERS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** 'SYNC:DATA_CLI' handler for incoming data sync messages from dataserver */\nfunction HandleSyncData(sync: DataSyncRes) {\n  const { binID, binType, seqNum, status, error, skipped } = sync;\n  const { items, updated, added, deleted, replaced } = sync;\n  const bin = DSET.getDataBin(binID);\n\n  /*** handle error conditions ***/\n  if (bin === undefined) {\n    LOG(...PR('ERROR: Bin not found:', binID));\n    return;\n  }\n  if (error) {\n    LOG(...PR('ERROR:', error));\n    return;\n  }\n  if (Array.isArray(skipped)) {\n    LOG(...PR('ERROR: skipped:', skipped));\n    return;\n  }\n  /*** handle change arrays ***/\n  if (Array.isArray(items)) bin.write(items);\n  if (Array.isArray(updated)) bin.update(updated);\n  if (Array.isArray(added)) bin.add(added);\n  if (Array.isArray(deleted)) bin.delete(deleted);\n  if (Array.isArray(replaced)) bin.replace(replaced);\n}\n\n/// DATASET LOCAL API /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** initialized a new Dataset with dataURI without performing ops.\n *  dataURI looks like 'sri.org:bucket-1234/sna-app/project-one'\n */\nasync function Configure(dataURI: DS_DataURI, opt: DataSyncOptions) {\n  const fn = 'SetDataURI:';\n  if (DSET !== undefined) throw Error(`${fn} dataset already set`);\n  //\n  let res: OpResult;\n  res = DecodeDataURI(dataURI);\n  if (res.error) return { error: `DecodeDataURI ${res.error}` };\n  res = DecodeDataConfig(opt);\n  if (res.error) return { error: `DecodeDataConfig ${res.error}` };\n  const { mode } = res;\n  // configure!\n  DS_URI = dataURI;\n  DSET = new Dataset(DS_URI);\n  switch (mode) {\n    case 'local':\n      F_ReadOnly = false;\n      F_SyncInit = false;\n      REMOTE = undefined;\n      break;\n    case 'local-ro':\n      F_ReadOnly = true;\n      F_SyncInit = false;\n      REMOTE = undefined;\n      break;\n    case 'sync':\n      F_ReadOnly = false;\n      F_SyncInit = true;\n      REMOTE = DefaultAdapter;\n      break;\n    case 'sync-ro':\n      F_ReadOnly = true;\n      F_SyncInit = true;\n      REMOTE = DefaultAdapter;\n      break;\n    default:\n      return { error: `unknown mode ${mode}` };\n  }\n  if (REMOTE) {\n    AddMessageHandler('SYNC:CLI_DATA', HandleSyncData);\n    await RegisterMessages();\n  }\n  // return the dataset URI, adapter, messages\n  // it's up to the caller to register messages\n  return { dataURI, adapter: REMOTE, handlers: ['SYNC:CLI_DATA'] };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** after configure is called, this method connects to the dataset */\nasync function Activate() {\n  if (DSET === undefined) return { error: 'must call Configure() first' };\n  if (F_SyncInit) {\n    const res = await REMOTE.selectDataset(DS_URI);\n    if (res.error) {\n      console.error('Activate(): error selecting dataset:', res.error);\n      return res;\n    }\n    if (res.status === 'ok') {\n      LOG(...PR(`Activate existing dataURI:`, res.dataURI));\n    } else {\n      LOG(...PR(`Activate status [${res.status}]`));\n    }\n    // next fetch the data\n    const ds = await REMOTE.getDataObj();\n    if (ds.error) {\n      console.error('Activate(): error fetching dataset:', ds.error);\n      return ds;\n    }\n    const found = DSET._setFromDataObj(ds);\n    return { dataURI: DS_URI, found: Object.keys(found) };\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** sets the dataset's content from a DS_DatasetObj. must be called after\n *  Configure() */\nasync function SetDataFromObject(data: DS_DatasetObj): Promise<OpResult> {\n  const fn = 'SetDataFromObject:';\n  if (DSET === undefined) return { error: 'must call Configure() first' };\n  LOG(...PR(fn, 'data:', data));\n  const { _dataURI } = data;\n  if (_dataURI !== DS_URI) return { error: 'dataURI mismatch' };\n\n  // create the bins manually\n  const { ItemLists } = data;\n  for (const [binID, binDataObj] of Object.entries(ItemLists)) {\n    LOG(...PR('SetDataFromObject: creating', binID));\n    const bin = DSET.createDataBin(binID, 'ItemList');\n    bin._setFromDataObj(binDataObj);\n  }\n\n  /*/ \n  note: implementors of databin (e.g. ItemList) fire notifications\n  for data changes, which registed via the Subscribe() API below\n  /*/\n\n  // return the dataURI and the list of ItemLists\n  return { dataURI: DS_URI, ItemLists: Object.keys(ItemLists) };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Persist() {\n  if (REMOTE) {\n    const res = await REMOTE.execDataset({ dataURI: DS_URI, op: 'PERSIST' });\n    return res;\n  }\n  return { error: 'no remote adapter' };\n}\n\n/// DATASET OPERATIONS ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Get(binID: string, ids: string[]): Promise<OpResult> {\n  const syncReq: DataSyncReq = { op: 'GET', binID, ids };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    LOG(...PR('Get:', binID, res));\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.get(ids);\n  throw Error(`Get: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Add(binID: string, items: UR_Item[]): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'ADD', binID, items };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.add(items);\n  throw Error(`Add: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Update(binID: string, items: UR_Item[]): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'UPDATE', binID, items };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.update(items);\n  throw Error(`Update: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Write(binID: string, items: UR_Item[]): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'WRITE', binID, items };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.write(items);\n  throw Error(`Write: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Delete(binID: string, items: UR_Item[]): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'DELETE', binID, items };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.delete(items);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function DeleteIDs(binID: string, ids: string[]): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'DELETE', binID, ids };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.deleteIDs(ids);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Replace(binID: string, items: UR_Item[]): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'REPLACE', binID, items };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.replace(items);\n  throw Error(`Replace: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nasync function Clear(binID: string): Promise<OpResult> {\n  if (F_ReadOnly) return { error: 'readonly mode' };\n  const syncReq: DataSyncReq = { op: 'CLEAR', binID };\n  if (REMOTE) {\n    const res = await REMOTE.syncData(syncReq);\n    return res;\n  }\n  const bin = DSET.getDataBin(binID);\n  bin.clear();\n  if (bin) return {};\n  throw Error(`Clear: bin [${binID}] not found`);\n}\n\n/// SEARCH METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** search for matches in the local dataset, which is assumed to be up-to\n *  date if synched mode is set */\nasync function Find(binID: string, crit?: SearchOptions): Promise<UR_Item[]> {\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.find(crit);\n  throw Error(`Find: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use to Find in datasets other than what is configured. good for one-time\n *  queries to remote datasets */\nasync function DS_RemoteFind(\n  dataURI: DS_DataURI,\n  binID: string,\n  crit?: SearchOptions\n): Promise<UR_Item[]> {\n  return [];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/* return a RecordSet of items that match the query criteria in the local\n * dataset, which is assumed to be up-to-date if synched mode is set */\nasync function Query(binID: string, query: SearchOptions): Promise<RecordSet> {\n  const bin = DSET.getDataBin(binID);\n  if (bin) return bin.query(query);\n  throw Error(`Query: bin [${binID}] not found`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use to Query datasets other than what is configured. good for one-time\n *  queries to remote datasets */\nasync function DS_RemoteQuery(\n  dataURI: DS_DataURI,\n  binID: string,\n  query: SearchOptions\n) /* :Promise<RecordSet> */ {\n  return {};\n}\n\n/// SNA MODULE API ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** PreConfig is called before the network is available, so starting data\n *  is provided by the app itself in some way */\nfunction PreConfig(config: DataObj) {\n  const { dataset } = config;\n  if (dataset) {\n    const { dataURI, syncMode } = dataset;\n    if (!dataURI) return { error: 'missing dataURI property' };\n    if (!syncMode) return { error: 'missing syncMode property' };\n    DS_URI = dataURI;\n    DS_MODE = syncMode;\n    return { dataURI, syncMode };\n  }\n  return { error: 'missing dataset property' };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** PreHook is called just before the SNA Lifecycle is started, so here is\n *  where your module can declare where it needs to do something */\nfunction PreHook() {\n  // hook into NET_DATASET to initialize dataclient connection to dataserver\n  SNA_HookAppPhase('NET_DATASET', async () => {\n    let dataURI = DS_URI;\n    const opts = { mode: DS_MODE };\n    let res: OpResult;\n    // configure the dataset\n    res = await Configure(dataURI, opts); // => { adapter, handlers }\n    if (res.error) throw Error(`Configure ${res.error}`);\n    res = await Activate(); // => { dataURI, ItemLists }\n  });\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Subscribe to a bin's events. The binID must be a string */\nfunction Subscribe(binID: string, evHdl: SNA_EvtHandler) {\n  if (typeof binID !== 'string') return { error: 'binID must be a string' };\n  if (typeof evHdl !== 'function') return { error: 'evHdl must be a function' };\n  if (DSET === undefined) return { error: 'must call Configure() first' };\n  const bin = DSET.getDataBin(binID);\n  if (bin) {\n    bin.on('*', evHdl);\n    if (DBG) LOG(...PR('Subscribe:', binID, 'subscribed'));\n    return { binID, eventName: '*', success: true };\n  }\n  if (DBG) LOG(...PR('Subscribe:', binID, 'not found'));\n  return { error: `bin [${binID}] not found` };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Unsubscribe from a bin's events. The binID must be a string */\nfunction Unsubscribe(binID: string, evHdl: SNA_EvtHandler) {\n  if (DSET === undefined) return { error: 'must call Configure() first' };\n  const bin = DSET.getDataBin(binID);\n  if (bin) bin.off('*', evHdl);\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** SNA_Component defines a component that can participate in the SNA Lifecycle\n *  by \"hooking\" into it. Once a SNA_Component is registered, it will be called\n *  with the PreConfig() and PreHook() methods to allow the module to\n *  independently manage itself and its data */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default SNA_NewComponent('dataclient', {\n  PreConfig,\n  PreHook,\n  Subscribe,\n  Unsubscribe\n});\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // api data initialization\n  Configure, // (dataURI, {mode}) => {adapter, handlers}\n  Activate,\n  SetDataFromObject,\n  Persist,\n  // SNA module methods\n  Subscribe,\n  Unsubscribe,\n  // api data operations\n  Get,\n  Add,\n  Update,\n  Write,\n  Delete,\n  DeleteIDs,\n  Replace,\n  Clear,\n  Find,\n  Query\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS Data Normalization and Validation Utility Module\n\n  A Normalized UR_Item merely means that it has been checked that it has\n  an _id field and it is a string value. \n  \n  Optional enforcement criteria:\n  - all string values are stripped of script tags\n  - all numbers are forced to string types\n  - all property names are forced to lower case\n\n  The Conforming and Cloning methods in this module are designing to adhere\n  to these criteria by providing a set of options to enforce them.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  UR_EntID,\n  DataObj,\n  UR_Item,\n  UR_ItemDict,\n  UR_ItemList\n} from '../_types/dataset.ts';\n\n/// SINGLE OBJ HELPERS ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given an ID, return a new ID that is guaranteed to be a string by converting\n *  numbers to strings */\nfunction m_NormEntityID(id: UR_EntID): UR_EntID {\n  const fn = 'm_NormEntityID:';\n  if (typeof id === 'string') return id;\n  if (typeof id === 'number') return String(id);\n  return undefined;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Shallow normalize a single DataObj, which does not have _id field.\n *  Detects and returns the normalized _id field if found */\nfunction m_NormDataObj(obj: DataObj): [DataObj, foundID: string] {\n  const fn = 'm_NormDataObj:';\n  if (typeof obj !== 'object') throw Error(`${fn} invalid input ${obj}`);\n  let foundID;\n  const norm = {};\n  for (const key of Object.keys(obj)) {\n    if (key === '_id') {\n      foundID = m_NormEntityID(obj[key]);\n      if (foundID === undefined) throw Error(`${fn} invalid _id ${obj[key]}`);\n      continue;\n    }\n    if (typeof obj[key] === 'string') {\n      // todo: remove bad characters\n      // norm[key] = encodeURIComponent(obj[key]);\n      norm[key] = obj[key];\n    } else {\n      norm[key] = obj[key];\n    }\n  }\n  return [norm, foundID];\n}\n\n/// STRING VALUE CONVERSION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Normalize a string to detected number or booleans */\nfunction NormStringToValue(str: string): string | number | boolean {\n  const fn = 'NormString:';\n  if (str === '') return undefined;\n  if (str === 'true') return true;\n  if (str === 'false') return false;\n  if (str.match(/^\\d+$/)) return Number(str);\n  return str;\n}\n\n/// DATA FORMAT CHECKING //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// datasets are standardized collections of objects, defined in ursys.d.ts\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Normalize a single Item, which is DataObj plus _id field. It leverages\n *  m_NormDataObj to normalize the object and detect the _id field which\n *  is roundabout */\nfunction NormItem(item: UR_Item, schema?: any): UR_Item {\n  const fn = ' NormItem:';\n  // first normalize the base object\n  let [dataObj, foundID] = m_NormDataObj(item);\n  return { _id: foundID, ...dataObj };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Given an array of objects, return a new array of objects that are\n *  guaranteed to have an _id field, or undefined if any object doesn't have\n *  an _id field. The copied objects are also filtered for suspicious\n *  property strings that are HTML or script tags\n *  Returns [ item[], error ] */\nfunction NormItemList(\n  items: UR_ItemList,\n  schema?: any\n): [UR_ItemList, error?: string] {\n  const fn = 'NormItemList:';\n  const normeds = [];\n  for (const item of items) {\n    const normed = NormItem(item, schema);\n    if (normed === undefined) return [undefined, `${fn} invalid item ${item}`];\n    normeds.push(normed);\n  }\n  return [normeds, undefined];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Given an object of objects, return a new object of objects that are\n *  guaranteed to have an _id field, or undefined if any object doesn't have\n *  an _id field. The copied objects are also filtered for suspicious property\n *  strings that are HTML or script tags.\n *  Returns [ {}, error ] */\nfunction NormItemDict(\n  dict: UR_ItemDict,\n  schema?: any\n): [UR_ItemDict, error?: string] {\n  const fn = 'NormItemDict:';\n  const normeds = {};\n  for (const key in dict) {\n    const normed = NormItem(dict[key], schema);\n    if (normed === undefined) return [undefined, `${fn} invalid item ${dict[key]}`];\n    normeds[key] = normed;\n  }\n  return [normeds, undefined];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Given an array of IDs, return a new array of ids that are guaranteed\n *  to be strings, or undefined if any id is not a string */\nfunction NormIDs(ids: string[] | number[]): UR_EntID[] {\n  const fn = 'NormItemIDs:';\n  let normed = ids.map(id => m_NormEntityID(id));\n  // if any ids in normed are undefined, return undefined\n  if (normed.includes(undefined)) return undefined;\n}\n\n/// ITEM CLONING //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: make a deep clone of an array by copying arrays and object by value\n */\nfunction DeepCloneArray(arr: any[]): any[] {\n  const fn = 'DeepCloneArray:';\n  if (!Array.isArray(arr)) throw Error(`${fn} invalid input ${arr}`);\n  return arr.map(item => {\n    if (Array.isArray(item)) return DeepCloneArray(item);\n    if (typeof item === 'object') return DeepCloneObject(item);\n    return item;\n  });\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: make a deep clone of an object by copying arrays and object by value\n */\nfunction DeepCloneObject(obj: any): any {\n  const fn = 'DeepCloneObject:';\n  if (typeof obj !== 'object') throw Error(`${fn} invalid input ${obj}`);\n  const clone = {};\n  if (obj === null) return null;\n  Object.keys(obj).forEach(key => {\n    const val = obj[key];\n    if (Array.isArray(val)) {\n      clone[key] = DeepCloneArray(val);\n      return;\n    }\n    if (typeof val === 'object') {\n      clone[key] = DeepCloneObject(val);\n      return;\n    }\n    clone[key] = val;\n  });\n  return clone;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: make a shallow clone of an object by copying arrays and object by value\n */\nfunction DeepClone(obj: any): any {\n  // walk object and clone arrays and objects\n  const clone = {};\n  for (const key in obj) {\n    const val = obj[key];\n    if (Array.isArray(val)) {\n      clone[key] = DeepCloneArray(val);\n      continue;\n    }\n    if (typeof val === 'object') {\n      clone[key] = DeepCloneObject(val);\n      continue;\n    }\n    if (typeof val === 'number') clone[key] = String(val);\n    else clone[key] = val;\n  }\n  return clone;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  m_NormEntityID as NormEntID, // normalize an ID\n  NormItem, // normalize a single object for serialized storage\n  NormItemList, // normalize multiple objects for storage\n  NormItemDict, // normalize dictionary of multiple objects for storage\n  NormIDs, //  should be strings\n  NormStringToValue, // convert string to number or boolean\n  //\n  DeepClone,\n  DeepCloneObject,\n  DeepCloneArray\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  A set of utilities that work on an array of items, providing advanced\n  filtering and matching.\n\n  MAIN API METHODS\n\n    Find(items: UR_Item[], criteria: SearchOptions) => UR_Item[]\n    Query(items: UR_Item[], criteria: SearchOptions) => RecordSet\n\n  QUERY OPTIONS MAIN PROPERTIES\n\n    preFilter: (items: UR_Item[]) => UR_Item[] - pre-filter function\n    missingFields: string[] - check for these missing fields\n    hasFields: string[] - check that these fields are present\n    matchCount: number - limit the number of matches\n    matchExact: MatchObj - match these exact values no more no less\n    matchRange: RangeObj - match these ranges for values\n    postFilter: (items: UR_Item[]) => UR_Item[] - post-filter function\n\n  QUERY OPTIONS SPECIAL PROPERTIES\n\n    _lowercaseProps: booleean - force prop keys to lowercase\n    _forceNull: boolean - force undefined to null\n    _forceValue: 'number' | 'string' - force numeric values to strings\n    _cloneItems: boolean - return cloned items, not originals\n\n\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { DeepClone } from './util-data-norm.ts';\nimport { RecordSet } from './class-data-recordset.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  UR_Item,\n  SearchOptions,\n  MatchObj,\n  RangeObj,\n  SearchFlags,\n  SearchProps,\n  SearchState\n} from '../_types/dataset.ts';\n\n/// CONSTANT DECLARATIONS /////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst QUERY_STATE: SearchState = { criteria: {}, flags: {}, props: {} };\n\n/// QUERY STATE METHODS ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: set the search criteria for the query */\nfunction m_SetCriteria(criteria: SearchOptions): SearchState {\n  QUERY_STATE.criteria = criteria;\n  QUERY_STATE.flags = u_getFlagsFromSearchOptions(criteria);\n  // props are reset after each query operation\n  return QUERY_STATE;\n}\n/** API: get the current query state */\nfunction m_GetCriteria(): SearchState {\n  return QUERY_STATE;\n}\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** convert the verbose search options to object with shorter names */\nfunction u_getFlagsFromSearchOptions(criteria: SearchOptions): SearchFlags {\n  // processing options\n  const { _lowercaseProps, _forceValue, _forceNull, _cloneItems } = criteria;\n  const _flcp = _lowercaseProps || false;\n  const _fval = _forceValue || undefined;\n  const _fnul = _forceNull || false;\n  const _clone = _cloneItems === undefined ? true : _cloneItems;\n  if (typeof _flcp !== 'boolean') throw Error('_lowercaseProps invalid type');\n  if (typeof _fval !== 'string' && _fval !== undefined)\n    throw Error('_forceValue invalid type');\n  if (typeof _fnul !== 'boolean') throw Error('_forceNull invalid type');\n  if (typeof _clone !== 'boolean') throw Error('_cloneItems invalid type');\n  // fields and values to match\n  const { missingFields, hasFields, matchExact, matchRange, matchCount } = criteria;\n  const b_miss = Array.isArray(missingFields) ? missingFields : undefined;\n  const b_has = Array.isArray(hasFields) ? hasFields : undefined;\n  const match_exact = typeof matchExact === 'object' ? matchExact : undefined;\n  const match_range = typeof matchRange === 'object' ? matchRange : undefined;\n  const count = typeof matchCount === 'number' ? matchCount : undefined;\n  // pre and post filter functions\n  const { preFilter, postFilter } = criteria;\n  const f_pre = typeof preFilter === 'function' ? preFilter : undefined;\n  const f_post = typeof postFilter === 'function' ? postFilter : undefined;\n  // return the flags object\n  return {\n    _flcp, // force prop keys to lowercase\n    _fval, // force numeric values to strings or numeric strings to numbers\n    _fnul, // force undefined to null\n    _clone, // return cloned items, not originals\n    b_miss, // check for these missing fields\n    b_has, // check that these fields are present\n    match_exact, // match these exact values no more no less\n    match_range, // match these ranges for values\n    count, // limit the number of matches\n    f_pre, // pre-filter function\n    f_post // post-filter function\n  };\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Given an object, recursively apply all the forcing constraints to its\n *  values. The 'mutable' object is mutated in place and returned. Converts numbers\n *  to strings, undefined to null, handles arrays, and optionally forces\n *  lowercase prop keys. */\nfunction u_conformObject(mutable: UR_Item, flags?: SearchFlags): UR_Item {\n  const { _fval, _fnul, _flcp } = flags || QUERY_STATE.flags;\n  if (mutable === null) return null;\n  Object.keys(mutable).forEach(key => {\n    let value = mutable[key];\n    if (_flcp) {\n      mutable.delete(key);\n      key = key.toLowerCase();\n      mutable[key] = value;\n    }\n    if (Array.isArray(value)) {\n      mutable[key] = u_conformArray(value);\n      return;\n    }\n    if (typeof value === 'string' && !_fval) {\n      const num = Number(value);\n      if (!isNaN(num)) mutable[key] = num;\n    }\n    if (typeof value === 'number' && _fval) {\n      mutable[key] = String(value);\n      return;\n    }\n    if (value === undefined && _fnul) {\n      mutable[key] = null;\n      return;\n    }\n    if (typeof value === 'object') {\n      mutable[key] = u_conformObject(value);\n      return;\n    }\n    mutable[key] = value;\n  });\n  return mutable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Given array, recursively apply all the forcing constraints to the values.\n *  Iterates over the array and also calls u_conformObject on any object\n *  members. The 'muts' array is mutated in place and returned */\nfunction u_conformArray(muts: any[]): any[] {\n  return muts.map(item => {\n    if (Array.isArray(item)) return u_conformArray(item);\n    if (typeof item === 'object') return u_conformObject(item);\n    return item;\n  });\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if item has all the fields in the passed list,\n *  no more, no less */\nfunction u_hasProps(item: UR_Item, plist: string[]): boolean {\n  let foundCount = 0;\n  for (const key of plist) if (item[key] !== undefined) foundCount++;\n  return foundCount === plist.length;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** check if item does not have any of the fields in the passed list */\nfunction u_hasMissingProps(item: UR_Item, plist: string[]): boolean {\n  const missing = [];\n  for (const key of plist) if (item[key] === undefined) missing.push(key);\n  return missing.length > 0;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** check if item has any extra fields not in the passed list */\nfunction u_hasExtraProps(item: UR_Item, plist: string[]): boolean {\n  const extra = [];\n  for (const key in item) if (!plist.includes(key)) extra.push(key);\n  return extra.length > 0;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** check if item has all the fields and values in the passed dictionary */\nfunction u_matchValues(item: UR_Item, mObj: MatchObj): boolean {\n  let match = true;\n  for (const [key, value] of Object.entries(mObj)) {\n    match &&= item[key] === value;\n  }\n  return match;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Given a value, return a string or number, or throw an error if the value\n *  is not a string or number */\nfunction u_cast_value(val: any): string | number {\n  if (!isNaN(parseFloat(val))) return Number(parseFloat(val));\n  if (typeof val === 'string') return String(val);\n  throw Error('u_cast_num: value is not string or number');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** check if item has all the fields and values in the passed dictionary\n *  RangeObj: { [key: string]: RangeType }\n *  RangeType: `op value [value]`\n */\nfunction u_matchRanges(item: UR_Item, rObj: RangeObj): boolean {\n  const fn = 'u_matchRanges:';\n  let match = true;\n  for (const [prop, parms] of Object.entries(rObj)) {\n    let bits = parms.split(' ');\n    let [op, arg1, arg2] = bits.filter(bit => bit.trim() !== '');\n    let ival = u_cast_value(item[prop]);\n    let a = u_cast_value(arg1);\n    // we're assuming that javascript's weird string-to-number coercion will\n    // handle both string and numeric comparisons correctly\n    if (op === 'gt') match &&= ival > a;\n    if (op === 'lt') match &&= ival < a;\n    if (op === 'gte') match &&= ival >= a;\n    if (op === 'lte') match &&= ival <= a;\n    if (op === 'eq') match &&= ival === a;\n    if (op === 'ne') match &&= ival !== a;\n    if (op === 'between') {\n      let b = u_cast_value(arg2);\n      match &&= ival >= a && ival <= b;\n    }\n  }\n  return match;\n}\n\n/// HELPER METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Given an item, apply all the forcing constraints to the values.\n *  The provided item is mutated in place and returned. */\nfunction m_EnforceFlags(mutable: UR_Item): UR_Item {\n  const {\n    _fval, // force prop values to strings\n    _fnul, // force undefined to null\n    _flcp, // force prop keys to lowercase\n    _clone // clone the item\n  } = QUERY_STATE.flags;\n  if (_clone) mutable = DeepClone(mutable);\n  Object.keys(mutable).forEach(key => {\n    let value = mutable[key];\n    if (_flcp) {\n      delete mutable[key];\n      key = key.toLowerCase();\n      mutable[key] = value;\n    }\n    if (Array.isArray(value)) {\n      mutable[key] = u_conformArray(value);\n      return;\n    }\n    if (typeof value === 'number' && _fval) {\n      mutable[key] = String(value);\n      return;\n    }\n    if (value === undefined && _fnul) {\n      mutable[key] = null;\n      return;\n    }\n    if (typeof value === 'object') {\n      mutable[key] = u_conformObject(value);\n      return;\n    }\n    mutable[key] = value;\n  });\n\n  return mutable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return found, missing, extra props in item based on passed list of desired\n *  properties */\nfunction m_AssessPropKeys(item: UR_Item, plist: string[]): SearchProps {\n  const ff = []; // found\n  const mm = []; // missing\n  const xx = []; // extra\n  // check keys against exact match list\n  Object.keys(item).forEach(key => {\n    if (plist.includes(key)) ff.push(key);\n    else xx.push(key);\n  });\n  // figure out what is missing\n  Object.keys(plist).forEach(key => {\n    if (!ff.includes(key)) mm.push(key);\n  });\n  const found = ff.length === 0 ? ff : undefined;\n  const missing = mm.length === 0 ? mm : undefined;\n  const extra = xx.length === 0 ? xx : undefined;\n  QUERY_STATE.props = { found, missing, extra };\n  return QUERY_STATE.props;\n}\n\n/// QUERY OPERATIONS //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Find the first item that matches the criteria, returning the item or\n *  undefined if no item is found.\n *  - if _clone is set, the returned item will be a clone of the original\n *  - if _deep is set, then the clone will be a deep clone of the original\n *    that also has _fval, _fnul, and _flcp applied to the values\n */\nfunction Find(items: UR_Item[], criteria?: SearchOptions): UR_Item[] {\n  const fn = 'Find:';\n  if (criteria === undefined) return [];\n  if (Object.keys(criteria).length === 0) return [];\n  const { flags } = m_SetCriteria(criteria);\n  const { _clone, b_miss, b_has, match_exact, match_range, count } = flags;\n  // get the raw items\n  if (items === undefined) throw Error(`${fn} items are undefined`);\n  // apply the pre-filter function if it exists\n  // if (flags.f_pre) items = flags.f_pre(items);\n  //\n  let item: UR_Item; // the original item\n  let ii: UR_Item; // the mutated copy with force lc, str, null applied\n  //\n  const found = [];\n  for (item of items) {\n    // bail out if we've found the number of matches we're looking for\n    if (found.length >= count) break;\n    // create a deep clone of the item, otherwise use the original\n    // deepClone will apply _fval, _fnul, _flcp to the values if they\n    // are set in flags.\n    ii = _clone ? { ...item } : item;\n    let match = true;\n    if (b_miss) match &&= u_hasMissingProps(ii, b_miss);\n    if (b_has) match &&= u_hasProps(ii, b_has);\n    if (match_exact) match &&= u_matchValues(ii, match_exact);\n    if (match_range) match &&= u_matchRanges(ii, match_range);\n    if (match) found.push(ii);\n  }\n  // apply the pre-filter function if it exists\n  //if (flags.f_post) items = flags.f_post(items);\n  return found;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** API: Find the first item that matches the criteria, returning a recordset\n *  wrapping the results\n */\nfunction Query(items: UR_Item[], criteria?: SearchOptions): RecordSet {\n  return new RecordSet(Find(items, criteria));\n}\n\n/// EXPORTS ////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  Find, // (items: UR_Item[], criteria: SearchOptions) => UR_Item\n  Query // (items: UR_Item[], criteria: SearchOptions) => RecordSet\n};\n\n/// for testing only\nexport {\n  m_SetCriteria, // (criteria: SearchOptions) => SearchState\n  m_GetCriteria, // () => SearchState\n  m_EnforceFlags, // (mutable: UR_Item) => UR_Item\n  m_AssessPropKeys, // (item: UR_Item, plist: PropKey[]) => SearchProps\n  //\n  u_matchValues, // (item: UR_Item, mObj: MatchObj) => boolean\n  u_matchRanges // (item: UR_Item, rObj: RangeObj) => boolean\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  RecordSet is a class that provides a chainable interface for transforming\n  and analyzing data. It is designed to work with UR_Item arrays, which are\n  passed to the constructor. \n\n  Each \"Chaining Method\" returns the RecordSet object, mutating the internal\n  items with each subsequent method call. The final items can be retrieved\n  using \"Terminal Methods\" which \n  \n  CHAINING METHODS:\n\n  * sort(opt) - sort the items\n    opt.preFilter:items=>items - filter items before sorting\n    opt.sortBy:{ [field]:function } - sort by fields\n    opt.postFilter:items=>items - filter items after sorting\n\n  * format(opt) - format the items\n    opt.includeFields:[] - include only these fields\n    opt.excludeFields:[] - exclude these fields\n    opt.transformBy:{ [field]:function } - transform field\n\n  * analyze(opt) - analyze the items\n    opt.groupBy:{ [group]:function } - group items by a field\n    opt.statTests:{ [testProp]:function } - test items for statistics\n\n  * paginate(size) - paginate the current items\n    size : number of items per page (default 10)\n  * goPage(index) - go to a specific page (1-based)\n  * nextPage() - go to the next page\n  * prevPage() - go to the previous page\n\n  * reset() - reset the current items back to source items\n    \n  TERMINAL METHODS:\n\n  * getItems() : return the current items\n  * getSrcItems() : return the original source items\n  * getStats() : return the results of analyze()\n  * getPage() : return the current page items\n  * getPageIndex() : return the current page index (1-based)\n  * getPageCount() : return the total number of pages\n  * isLastPage() : return true if this is the last page\n  * isFirstPage() : return true if this is the first page\n  \n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport {\n  NormItemList, //\n  DeepCloneArray\n} from './util-data-norm.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  SortOptions, //\n  UR_Item,\n  DataObj,\n  //\n  ItemFormatOptions,\n  ItemStatsOptions,\n  ItemStatsResult,\n  IRecordSet\n} from '../_types/dataset.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst fn = 'RecordSet';\n\n/// PREDEFINED TRANSFORMER METHODS ////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// PLACEHOLDER\n/// Transformer methods are used to transform the data in the recordset\n/// in common ways. These methods are used in the format() method.\n///\nconst tx_option_id = (item: UR_Item) => (item.opt = `opt${item._id}`);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nclass RecordSet implements IRecordSet {\n  //\n  src_items: UR_Item[]; // source items\n  cur_items: UR_Item[]; // transformed items\n  cur_meta: ItemStatsResult; // metadata\n  //\n  page_index: number; // current page index (0-based)\n  page_size: number; // current page size in items\n  page_count: number; // total number of pages\n  pages: UR_Item[][]; // paginated items\n  //\n  constructor(items: UR_Item[]) {\n    if (!Array.isArray(items)) {\n      throw Error(`${fn} requires an array of items`);\n    }\n    const [normed, error] = NormItemList(items);\n    if (error) throw Error(`${fn} ${error}`);\n    this.src_items = normed;\n    this.reset(); // set current items to source items\n  }\n\n  /** return true if the current list is paginated */\n  _nop(): string | void {\n    if (this.page_index !== undefined) return;\n    return 'call paginate() first';\n  }\n\n  /// NON-CHAINING TERMINAL LIST METHODS ///\n\n  /** return the current transformed items */\n  getItems(): UR_Item[] {\n    return DeepCloneArray(this.cur_items);\n  }\n\n  /** return the current metadata. can provide a name which will\n   *  be searched first in groups, then in the top level metadata.\n   */\n  getStats(name?: string): ItemStatsResult {\n    let result;\n    if (name === undefined) result = this.cur_meta;\n    else if (this.cur_meta.groups && this.cur_meta.groups[name])\n      result = this.cur_meta.groups[name];\n    else if (this.cur_meta[name]) result = this.cur_meta[name];\n    return result;\n  }\n\n  /** return the original source items */\n  getSrcItems(): UR_Item[] {\n    return DeepCloneArray(this.src_items);\n  }\n\n  /// CHAINING METHODS ///\n\n  /** sorts the current list. if no sort options are passed,\n   *  the list is sorted by the first field in ascending order\n   */\n  sort(sOpt?: SortOptions): RecordSet {\n    let { sortBy, preFilter, postFilter } = sOpt || {};\n    // apply pre filter\n    if (preFilter) {\n      this.cur_items = preFilter(this.cur_items);\n    }\n    // default sort by first field\n    if (sortBy === undefined) {\n      const [firstKey] = Object.keys(this.cur_items[0]);\n      sortBy = { [firstKey]: 'sort_asc' };\n    }\n    // apply successive sort operations\n    Object.keys(sortBy).forEach(sortField => {\n      const sortType = sortBy[sortField];\n      switch (sortType) {\n        case 'sort_asc':\n          this.cur_items.sort((a, b) => (a[sortField] > b[sortField] ? 1 : -1));\n          break;\n        case 'sort_desc':\n          this.cur_items.sort((a, b) => (a[sortField] < b[sortField] ? 1 : -1));\n          break;\n        case 'random':\n          this.cur_items.sort(() => Math.random() - 0.5);\n          break;\n        default:\n          break;\n      }\n    });\n    // apply post filter\n    if (postFilter) {\n      this.cur_items = postFilter(this.cur_items);\n    }\n    // method-chaining return\n    return this;\n  }\n\n  /** */\n  format(fOpt: ItemFormatOptions): RecordSet {\n    const { includeFields, transformBy } = fOpt || {};\n    let items = [];\n    this.cur_items.forEach(item => {\n      let newItem = {};\n      // include only specified fields\n      if (includeFields) {\n        includeFields.forEach(field => {\n          if (item[field] !== undefined) newItem[field] = item[field];\n          else console.warn(`${fn} missing field: ${field}`);\n        });\n      }\n      // apply field transformations\n      if (transformBy) {\n        Object.entries(transformBy).forEach(entry => {\n          const [field, xform] = entry;\n          if (typeof xform === 'function') newItem[field] = xform(item);\n          else console.warn(`${fn} invalid transform function for field: ${field}`);\n        });\n      }\n      // save new item\n      items.push(newItem);\n    });\n    // method-chaining return\n    return this;\n  }\n\n  /** */\n  analyze(testOpts: ItemStatsOptions): RecordSet {\n    const { groupBy, statTests } = testOpts || {};\n    let groups: DataObj;\n    let stats: DataObj;\n    // group by fields\n    if (groupBy) {\n      groups = {};\n      Object.entries(groupBy).forEach(entry => {\n        const [groupField, groupTest] = entry;\n        groups[groupField] = groupTest(this.cur_items);\n      });\n    }\n    // summarize fields\n    if (statTests) {\n      stats = {};\n      Object.entries(statTests).forEach(entry => {\n        const [stat, test] = entry;\n        if (stat === 'groups') throw Error(`${fn} 'groups' is a reserved stat name`);\n        stats[stat] = test(this.cur_items);\n      });\n    }\n    // check for useless method call\n    if (!groups && !stats)\n      throw Error(`${fn} no groupBy or summarizeBy options provided`);\n    // save metadata\n    this.cur_meta = { groups, ...stats };\n    // method-chaining return\n    return this;\n  }\n\n  /** resets the current item set to beginning */\n  reset(): RecordSet {\n    this.cur_items = DeepCloneArray(this.src_items);\n    // method-chaining return\n    return this;\n  }\n\n  /// CHAINING PAGINATION ///\n\n  /** API: main pagination, using 1-based indexing */\n  paginate(pageSize: number = 10): RecordSet {\n    const fn = 'paginate:';\n    let pidx = 0; // zero-based page index for local use\n    // calculate new page size and index\n    this.page_size = pageSize;\n    this.page_index = 1;\n    // calculate new page count\n    this.pages = [];\n    this.cur_items.forEach((item, ii) => {\n      if (ii % this.page_size === 0) pidx++;\n      if (this.pages[pidx - 1] === undefined) this.pages[pidx - 1] = [];\n      this.pages[pidx - 1].push(item);\n    });\n    this.page_count = this.pages.length;\n    // method-chaining return\n    return this;\n  }\n\n  /** API: set the current page index */\n  goPage(index: number): RecordSet {\n    const fn = 'goPage:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    if (index < 1 || index > this.page_count)\n      throw Error(`${fn} invalid index ${index}`);\n    this.page_index = index;\n    // method-chaining return\n    return this;\n  }\n\n  /** API: advance to the next page */\n  nextPage(): RecordSet {\n    const fn = 'nextPage:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    const total = this.page_count;\n    if (this.page_index < total) this.page_index++;\n    // method-chaining return\n    return this;\n  }\n\n  /** API: go back a page */\n  prevPage(): RecordSet {\n    const fn = 'prevPage:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    if (this.page_index > 1) this.page_index--;\n    // method-chaining return\n    return this;\n  }\n\n  /// TERMINAL PAGINATION METHODS ///\n\n  /** return the page items of the current page */\n  getPage(): UR_Item[] {\n    const fn = 'pageItems:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    return this.pages[this.page_index - 1];\n  }\n\n  /** return the current 1-based page index */\n  getPageIndex(): number {\n    const fn = 'pageIndex:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    return this.page_index;\n  }\n\n  /** return the total number of pages */\n  getPageCount(): number {\n    const fn = 'pageCount:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    return this.page_count;\n  }\n\n  /** return the current page size */\n  getPageSize(): number {\n    const fn = 'getPageSize:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    return this.page_size;\n  }\n\n  /** return true if this is the last page */\n  isLastPage(): boolean {\n    const fn = 'isLastPage:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    return this.page_index === this.page_count - 1;\n  }\n\n  /** return true if this is the first page */\n  isFirstPage(): boolean {\n    const fn = 'isFirstPage:';\n    if (this._nop()) throw Error(`${fn} ${this._nop()}`);\n    return this.page_index === 0;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default RecordSet;\nexport { RecordSet };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  EventMachine is the URSYS version of EventEmitter, which implements these\n  functions for compatibility. It is a class that manages a set of named\n  events for pub/sub communication between modules. \n\n  .on(event, listener) - add a listener for an event\n  .once(event, listener) - add a one-time listener for an event\n  .off(event, listener) - remove a listener for an event\n  .emit(event, ...args) - emit an event with optional arguments\n\n  For comparison, these are all the current types of named invocations that\n  are part of URSYS\n\n  'NET:MESSAGE_NAME' - used for URNET messages\n  'URSYS/PHASE_NAME:eventName' - used for phase machine hooks\n  'eventName' - used by event machine events\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES & INTERFACES ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { DataObj } from '../_types/ursys.d.ts';\nimport type { DataEncoding } from './declare-encodings.d.ts';\nimport type { SNA_EvtName, SNA_EvtHandler } from '../_types/sna.d.ts';\n\ntype EVM_Descriptor = {\n  name: SNA_EvtName; // name of the event\n  description?: string; // description of the event\n  [prop: DataEncoding]: string; // description of each prop\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst LOG = console.log.bind(console);\nconst WARN = console.warn.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst m_machines: Map<string, EventMachine> = new Map();\n\n/// PRIVATE HELPERS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/// URSYS PhaseMachine CLASS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass EventMachine {\n  //\n  emClass: string;\n  listeners: Map<SNA_EvtName, Set<SNA_EvtHandler>>;\n  eventNames: Map<SNA_EvtName, EVM_Descriptor>;\n\n  /// INITIALIZATION ///\n\n  /** require a unique class name for the event machine */\n  constructor(emClass: string) {\n    if (!this._okClassName(emClass)) throw Error(`bad classname ${emClass}`);\n    this.emClass = emClass;\n    this.listeners = new Map();\n    m_machines.set(emClass, this);\n  }\n\n  /** validate event class name, which must be lower_snake_case */\n  _okClassName(eventClass: string) {\n    let validClass = typeof eventClass === 'string' && eventClass.length > 0;\n    validClass = validClass && eventClass.indexOf('_') !== -1;\n    validClass = validClass && eventClass === eventClass.toLowerCase();\n    return validClass;\n  }\n\n  /// EVENT NAME REGISTRATION ///\n\n  /** validate event names  */\n  _okEventName(eventName: SNA_EvtName) {\n    let validType = typeof eventName === 'string' && eventName.length > 0;\n    validType = validType && eventName[0] === eventName[0].toLowerCase();\n    if (this.eventNames !== undefined)\n      validType = validType && this.eventNames.has(eventName);\n    return validType;\n  }\n\n  /** define event descriptions for the event machine */\n  defineEvent(eventName: SNA_EvtName, eventDesc: EVM_Descriptor) {\n    if (!this._okEventName(eventName)) throw Error(`bad event name ${eventName}`);\n    if (this.eventNames.has(eventName)) throw Error('Event name already defined');\n    if (this.eventNames === undefined) this.eventNames = new Map();\n    this.eventNames.set(eventName, eventDesc);\n  }\n\n  /// EVENT MACHINE METHODS ///\n\n  /** Add a listener for an event. You can subscribe '*' wildcard event handlers */\n  on(eventName: SNA_EvtName, listener: SNA_EvtHandler) {\n    if (!this._okEventName(eventName)) throw Error(`bad event name ${eventName}`);\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, new Set());\n    }\n    this.listeners.get(eventName).add(listener);\n  }\n\n  /** Remove a listener for an event. Remove '*' wildcard events here too */\n  off(eventName: SNA_EvtName, listener: SNA_EvtHandler) {\n    if (!this._okEventName(eventName)) throw Error(`bad event name ${eventName}`);\n    if (this.listeners.has(eventName)) {\n      this.listeners.get(eventName).delete(listener);\n    }\n  }\n\n  /** Add a one-time listener for an event. Wildcard '*' listeners are disallowed. */\n  once(eventName: SNA_EvtName, listener: SNA_EvtHandler) {\n    if (!this._okEventName(eventName)) throw Error(`bad event name ${eventName}`);\n    if (eventName === '*') throw Error('wildcard once events are not allowed');\n    const onceListener = (eventName: SNA_EvtName, param: DataObj) => {\n      listener(eventName, param);\n      this.off(eventName, onceListener);\n    };\n    this.on(eventName, onceListener);\n  }\n\n  /** Emit an event with optional arguments. Wildcard event listeners are registered to\n   *  '*' and fired on every event */\n  emit(eventName: SNA_EvtName, param?: DataObj) {\n    if (!this._okEventName(eventName)) throw Error(`bad event name ${eventName}`);\n    const dispatchTo = new Set<SNA_EvtHandler>();\n    if (this.listeners.has(eventName)) {\n      this.listeners.get(eventName).forEach(listener => {\n        dispatchTo.add(listener);\n      });\n    }\n    if (this.listeners.has('*')) {\n      this.listeners.get('*').forEach(listener => {\n        dispatchTo.add(listener);\n      });\n    }\n    dispatchTo.forEach(listener => {\n      listener(eventName, param);\n    });\n    dispatchTo.clear();\n  }\n}\n\n/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// accessible from ts files via import EM from 'class-event-machine.ts'\nexport default EventMachine;\n/// accessible from mts files via import EM from './class-event-machine.ts'\nexport { EventMachine };\nexport type { SNA_EvtName, SNA_EvtHandler };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  DataBin is the abstract base class for all collection classes.\n\n  abstract class DataBin\n    add, read, update, replace, write, deleteIDs, delete, clear, get\n    find, query\n    decodeID, _maxID, newID\n    on, off, notifyChange\n    _serializeToJSON, _deserializeFromJSON\n  \n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { RecordSet } from './class-data-recordset.ts';\nimport { EventMachine } from './class-event-machine.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  UR_EntID,\n  UR_NewItem,\n  UR_Item,\n  //\n  DataBinID,\n  DataBinType,\n  //\n  SearchOptions,\n  DataObj,\n  OpResult\n} from '../_types/dataset.ts';\nimport type { SNA_EvtName, SNA_EvtHandler } from '../_types/sna.d.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = true;\n\n/// CLASS DECLARATION //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { IDS_DataBin, IDS_Serialize } from '../_types/dataset.ts';\nabstract class DataBin implements IDS_DataBin, IDS_Serialize {\n  //\n  name: DataBinID; // name of this collection\n  _type: DataBinType; // type of this collection (.e.g ItemList);\n  _prefix: string; // when set, this is the prefix for the ids\n  _ord_digits: number; // if _prefix is set, then number of zero-padded digits\n  _ord_highest: number; // current highest ordinal\n  _notifier: EventMachine; // event machine for listeners\n\n  /// INITIALIZE ///\n\n  /** base constuctor. call with super(). by default, the _prefix is empty and\n   *  the ids created will be simple integers. If you define an idPrefix,\n   *  then the ids will be the prefix + zero-padded number */\n  constructor(col_name: string) {\n    this.name = col_name;\n    this._init();\n  }\n\n  _init(): void {\n    this._prefix = '';\n    this._ord_digits = 3;\n    this._ord_highest = 0;\n  }\n\n  /// SERIALIZATION METHODS ///\n\n  /** API: create a new instance from a compatible state object. note that\n   *  OVERRIDING derived classes must handle the _ord_highest calculation */\n  _setFromDataObj(data: DataObj): OpResult {\n    let { name, _prefix, _ord_digits, _ord_highest } = data;\n    // assign defaults if undefined\n    if (_prefix === undefined) _prefix = '';\n    if (_ord_digits === undefined) _ord_digits = 3;\n    if (_ord_highest === undefined) _ord_highest = 0;\n    // required name\n    if (name === undefined) return { error: 'name missing' };\n    if (typeof name !== 'string') return { error: 'name must be a string' };\n    // type checks\n    if (typeof _prefix !== 'string') return { error: '_prefix must be a string' };\n    if (typeof _ord_digits !== 'number')\n      return { error: '_ord_digits must be a number' };\n    if (typeof _ord_highest !== 'number')\n      return { error: '_ord_highest must be a number' };\n    // assign\n    this.name = name;\n    this._prefix = _prefix;\n    this._ord_digits = _ord_digits;\n    this._ord_highest = _ord_highest;\n    return { name, _prefix, _ord_digits, _ord_highest };\n  }\n\n  /** API: return a data object that represents the current state */\n  _getDataObj(): OpResult {\n    return {\n      name: this.name,\n      _prefix: this._prefix,\n      _ord_digits: this._ord_digits,\n      _ord_highest: this._ord_highest\n    };\n  }\n\n  /** API: serialize JSON into the appropriate data structure */\n  abstract _serializeToJSON(): string;\n\n  /** API: deserialize data structure into the appropriate JSON */\n  abstract _deserializeFromJSON(json: string): OpResult;\n\n  /// ID METHODS ///\n\n  /** abstract method to return the highest id in the _list, since the\n   *  _id may be stored differently depending on the bin type */\n  abstract _findMaxID(): number;\n\n  /** find the highest id in the _list. EntityIDs are _prefix string + padded number, so\n   *  we can just sort the _list and return the last one */\n  newID(): UR_EntID {\n    const fn = 'newID:';\n    let id: UR_EntID;\n    // if ord_highest is set, we can just increment it since we don't reuse ids\n    if (this._ord_highest > 0) {\n      id = (++this._ord_highest).toString();\n    } else {\n      // otherwise, we need to scan the existing list\n      let maxID = this._findMaxID();\n      this._ord_highest = maxID;\n      id = (++this._ord_highest).toString();\n    }\n    const idstr = this._prefix ? id.padStart(this._ord_digits, '0') : id;\n    return `${this._prefix}${idstr}`;\n  }\n\n  /** decode an id into its _prefix and number */\n  decodeID(id: UR_EntID): OpResult {\n    const fn = 'decodeID:';\n    // skip foreign ids with different prefix\n    if (!id.startsWith(this._prefix)) return { foreign: id };\n    // otherwise, decode the id\n    const ord = id.slice(this._prefix.length);\n    return { prefix: this._prefix, ord: parseInt(ord) };\n  }\n\n  /// COLLECTION METHODS ///\n\n  /** given the name of a _list and an array of objects, add the objects to the\n   *  _list and return the _list if successful, undefined otherwise */\n  abstract add(items: UR_NewItem[]): { added?: UR_Item[]; error?: string };\n\n  /** return the entire _list or the subset of ids\n   *  identified in the ids array, in order of the ids array. Return a COPY\n   *  of the objects, not the original objects */\n  abstract read(ids?: UR_EntID[]): { items?: UR_Item[]; error?: string };\n\n  /** Update the objects in the _list with the items provided through shallow\n   *  merge. If there items that don't have an _id field or if the _id field\n   *  doesn't already exist in the _list, return { error }. Return a copy of _list\n   *  if successful */\n  abstract update(items: UR_Item[]): { updated?: UR_Item[]; error?: string };\n\n  /** Overwrite the objects. Unlike ListUpdate, this will not merge but replace\n   *  the items. The items must exist to be replaced */\n  abstract replace(items: UR_Item[]): {\n    replaced?: UR_Item[];\n    skipped?: UR_Item[];\n    error?: string;\n  };\n\n  /** Add the items to the _list. If an already exists in the _list, update it\n   *  instead. Return a copy of the _list */\n  abstract write(items: UR_Item[]): {\n    added?: UR_Item[];\n    updated?: UR_Item[];\n    error?: string;\n  };\n\n  /** Delete the objects in the _list with the ids provided. If there are any\n   *  ids that don't exist in the _list, return { error }. Return a copy of the\n   *  deleted items if successful */\n  abstract deleteIDs(ids: UR_EntID[]): { deleted?: UR_Item[]; error?: string };\n\n  /** Given a set of objects, delete them from the _list by looking-up their id\n   *  fields. Return a copy of the _list */\n  abstract delete(items: UR_Item[]): { deleted?: UR_Item[]; error?: string };\n\n  /** erase all the entries in the _list, but do not reset the max_ord or _prefix */\n  abstract clear(): void;\n\n  /** alternative getter returning unwrapped items */\n  abstract get(ids?: UR_EntID[]): any[];\n\n  /// NOTIFIER METHODS ///\n\n  /** add a listener to the event machine */\n  on(event: SNA_EvtName, lis: SNA_EvtHandler): OpResult {\n    if (!this._notifier) this._notifier = new EventMachine(`databin_${this.name}`);\n    this._notifier.on(event, lis);\n    return {};\n  }\n\n  /** remove a listener from the event machine */\n  off(event: SNA_EvtName, lis: SNA_EvtHandler): OpResult {\n    if (this._notifier) this._notifier.off(event, lis);\n    return { error: `off: no notifier for listener ${lis.name}` };\n  }\n\n  /** notify listeners of 'change' event */\n  notify(evt: SNA_EvtName, data: DataObj): OpResult {\n    if (typeof evt !== 'string') return { error: 'notify: evt must be a string' };\n    if (this._notifier) this._notifier.emit(evt, data);\n    return {};\n  }\n\n  /// SEARCH METHODS ///\n\n  /** Search for matching items in the list using options, return found items.\n   *  The implementor should provide the items from the instance */\n  abstract find(criteria?: SearchOptions): UR_Item[];\n\n  /** Search for matching items in the list, return Recordset,\n   *  The implementor should provide the items from the instance */\n  abstract query(criteria?: SearchOptions): RecordSet;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default DataBin; // the class\nexport {\n  DataBin // the class\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ItemList Class - Manage a list of UR_Items\n\n  When instancing an Itemlist without an ItemListOptions object, the ids\n  will be simple integers. If you define an idPrefix, then the ids will be\n  the prefix + zero-padded number. See ItemListOptions for more details.\n\n  Its sibling class is ItemDict. Its parent manager is Dataset.\n  \n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { NormItemList, NormIDs } from './util-data-norm.ts';\nimport { Find, Query } from './util-data-search.ts';\nimport { DataBin } from './abstract-data-databin.ts';\nimport { RecordSet } from './class-data-recordset.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  UR_EntID,\n  UR_NewItem,\n  UR_Item,\n  UR_ItemList,\n  DataObj,\n  OpResult,\n  DataBinID,\n  DataBinType,\n  IDS_Serialize,\n  //\n  SearchOptions\n} from '../_types/dataset.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype ItemListOptions = {\n  idPrefix?: string; // prefix to use for ids, otherwise simple ids\n  startOrd?: number; // starting number (default 0)\n  ordDigits?: number; // number of digits (default 3)\n};\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass ItemList extends DataBin implements IDS_Serialize {\n  // from base class\n  // name: DataBinID; // name of this collection\n  // _type: DataBinType; // type of this collection (.e.g ItemList);\n  // _prefix: string; // when set, this is the prefix for the ids\n  // _ord_digits: number; // if _prefix is set, then number of zero-padded digits\n  // _ord_highest: number; // current highest ordinal\n  _list: UR_ItemList; // list storage\n\n  /// INITIALIZATION ///\n\n  /** constuctor takes ItemListOptions. If there are no options defined,\n   *  the ids created will be simple integers. If you define an idPrefix,\n   *  then the ids will be the prefix + zero-padded number */\n  constructor(col_name: string, opt?: ItemListOptions) {\n    super(col_name);\n    const fn = 'ItemList:';\n    this._list = [];\n    this._type = this.constructor.name as DataBinType;\n    let { idPrefix, startOrd, ordDigits } = opt || {};\n    if (col_name === undefined) throw Error(`${fn} collection name is required`);\n    if (typeof col_name !== 'string')\n      throw Error(`${fn} collection name must be a string`);\n    this.name = col_name;\n    if (idPrefix === undefined) idPrefix = '';\n    if (typeof idPrefix !== 'string')\n      throw Error(`${fn} idPrefix must be a string when specified`);\n    this._prefix = idPrefix || ''; // default to no prefix\n    // optional\n    this._ord_digits = ordDigits || 3;\n    this._ord_highest = startOrd || 0;\n  }\n\n  /// SERIALIZATION METHODS ///\n\n  /** implement search for max_id in the current list */\n  _findMaxID(): number {\n    let maxID = 0;\n    for (const li of this._list) {\n      const { prefix, ord, foreign } = this.decodeID(li._id);\n      if (foreign) continue; // skip foreign ids\n      if (ord > maxID) maxID = ord;\n    }\n    return maxID;\n  }\n\n  /** API: create a new instance from a compatible state object */\n  _setFromDataObj(data: DataObj) {\n    const fn = 'ItemList._setFromDataObj:';\n    // call base class to setup defaults\n    let result = super._setFromDataObj(data);\n    if (result.error) return { error: `${fn} ${result.error}` };\n    // now handle our list\n    const { items } = data;\n    if (!Array.isArray(items)) return { error: `${fn} _list must be an array` };\n    const [norm_list, norm_error] = NormItemList(items);\n    if (norm_error) return { error: `${fn} ${norm_error}` };\n    this._list = norm_list;\n    this._ord_highest = this._findMaxID(); // set the highest ordinal\n    return { items: [...this._list] };\n  }\n\n  /** API: return a data object that represents the current state */\n  _getDataObj() {\n    const data = super._getDataObj();\n    if (data.error) return { error: data.error };\n    return { ...data, items: [...this._list] };\n  }\n\n  /** API: serialize JSON into the appropriate data structure */\n  _serializeToJSON(): string {\n    const data = this._getDataObj();\n    return JSON.stringify(data);\n  }\n\n  /** API: deserialize data structure into the appropriate JSON */\n  _deserializeFromJSON(json: string): OpResult {\n    const fn = '_deserializeFromJSON:';\n    try {\n      const sobj = JSON.parse(json);\n      const { error } = this._setFromDataObj(sobj);\n      if (error) throw Error(error);\n      return { instance: this };\n    } catch (err) {\n      return { error: `${fn} ${err.message}` };\n    }\n  }\n\n  /// LIST ID METHODS ///\n\n  // DataBin base methods: decodeID, newID\n\n  /// LIST METHODS ///\n\n  /** given the name of a _list and an array of objects, add the objects to the\n   *  _list and return the _list if successful, undefined otherwise */\n  add(items: UR_NewItem[]): { added?: UR_Item[]; error?: string } {\n    const fn = 'add:';\n    if (!Array.isArray(items))\n      return { error: `${fn} items must be an array of objects` };\n    if (items.length === 0) return { error: `${fn} items array is empty` };\n\n    // make sure that items do not have _id fields and assign new ones\n    const copies = items.map(item => ({ ...item }));\n    for (let item of copies) {\n      if (item._id !== undefined)\n        return { error: `${fn} item already has an _id ${item._id}` };\n      item._id = this.newID();\n    }\n    // add the items to the _list\n    // make sure that the _list doesn't have these items already\n    for (let item of items) {\n      if (this._list.find(obj => obj._id === item._id))\n        return { error: `${fn} item ${item._id} already exists in ${this.name}` };\n    }\n    // add the items to the _list if no remote\n    const added = [...(copies as UR_Item[])];\n    this._list.push(...added);\n    // notify subs\n    this.notify('add', { added });\n    return { added }; // return a copy of the _list\n  }\n\n  /** return the entire _list or the subset of ids\n   *  identified in the ids array, in order of the ids array. Return a COPY\n   *  of the objects, not the original objects */\n  read(ids?: UR_EntID[]): { items?: UR_Item[]; error?: string } {\n    const fn = 'read:';\n    // if no ids are provided, return the entire _list\n    if (ids === undefined) {\n      return { items: [...this._list] }; // return a copy of the _list\n    }\n    // otherwise, return the specific objects in the order of the ids array\n    // as a copy of the objects\n    const items = ids.map(id => this._list.find(obj => obj._id === id));\n    if (items.includes(undefined)) {\n      return { error: `${fn} one or more ids not found in ${this.name}` };\n    }\n    return { items }; // return found items\n  }\n\n  /** Update the objects in the _list with the items provided through shallow\n   *  merge. If there items that don't have an _id field or if the _id field\n   *  doesn't already exist in the _list, return { error }. Return a copy of _list\n   *  if successful */\n  update(items: UR_Item[]): { updated?: UR_Item[]; error?: string } {\n    const fn = 'update:';\n    if (!Array.isArray(items) || items === undefined)\n      return { error: `${fn} items must be an array` };\n    if (items.length === 0) return { error: `${fn} items array is empty` };\n    const [norm_items, norm_error] = NormItemList(items);\n    if (norm_error) return { error: `${fn} ${norm_error}` };\n    // got this far, items are normalized and we can merge them.\n    for (const item of norm_items) {\n      const idx = this._list.findIndex(obj => obj._id === item._id);\n      if (idx === -1)\n        return { error: `${fn} item ${item._id} not found in ${this.name}` };\n      Object.assign(this._list[idx], item);\n    }\n    // notify subs\n    const updated = [...this._list]; // use a copy of the list\n    this.notify('update', { updated });\n    return { updated };\n  }\n\n  /** Overwrite the objects. Unlike ListUpdate, this will not merge but replace\n   *  the items. The items must exist to be replaced */\n  replace(items: UR_Item[]): {\n    replaced?: UR_Item[];\n    skipped?: UR_Item[];\n    error?: string;\n  } {\n    const fn = 'replace:';\n    if (!Array.isArray(items) || items === undefined)\n      return { error: `${fn} items must be an array` };\n    if (items.length === 0) return { error: `${fn} items array is empty` };\n    const [norm_items, norm_error] = NormItemList(items);\n    if (norm_error) return { error: `${fn} ${norm_error}` };\n    // got this far, items are normalized and we can overwrite them.\n    const replaced = [];\n    const skipped = [];\n    for (const item of norm_items) {\n      const idx = this._list.findIndex(obj => obj._id === item._id);\n      if (idx === -1) {\n        skipped.push({ ...item });\n        continue;\n      }\n      const old_obj = { ...this._list[idx] };\n      replaced.push(old_obj);\n      this._list[idx] = item;\n    }\n    const error =\n      skipped.length > 0\n        ? `${fn} ${skipped.length} items not found in ${this.name}`\n        : undefined;\n\n    // notify subs\n    this.notify('replace', { replaced, skipped, error });\n    return { replaced, skipped, error }; // return results\n  }\n\n  /** Add the items to the _list. If an already exists in the _list, update it\n   *  instead. Return a copy of the _list */\n  write(items: UR_Item[]): {\n    added?: UR_Item[];\n    updated?: UR_Item[];\n    error?: string;\n  } {\n    const fn = 'write:';\n    const added = [];\n    const updated = [];\n    // update the items that already exist in the _list\n    for (const item of items) {\n      const idx = this._list.findIndex(obj => {\n        if (obj._id === undefined) return false;\n        return obj._id === item._id;\n      });\n      if (idx === -1) {\n        item._id = this.newID();\n        this._list.push(item);\n        added.push({ ...item });\n      } else {\n        Object.assign(this._list[idx], item);\n        updated.push({ ...this._list[idx] });\n      }\n    }\n    // notify subs\n    this.notify('write', { updated, added });\n    return { added, updated }; // return a copy of the _list\n  }\n\n  /** Delete the objects in the _list with the ids provided. If there are any\n   *  ids that don't exist in the _list, return { error }. Return a copy of the\n   *  deleted items if successful */\n  deleteIDs(ids: UR_EntID[]): { deletedIDs?: UR_Item[]; error?: string } {\n    const fn = 'deleteIDs:';\n    if (!Array.isArray(ids) || ids === undefined)\n      return { error: `${fn} ids must be an array` };\n    const del_ids = NormIDs(ids);\n    // got this far, ids are normalized and we can delete them\n    const itemIDs = [];\n    for (const id of del_ids) {\n      const idx = this._list.findIndex(obj => obj._id === id);\n      if (idx === -1) return { error: `${fn} item ${id} not found in ${this.name}` };\n      itemIDs.push(id);\n    }\n    // good to go, delete the items\n    const deletedIDs = [];\n    for (const id of itemIDs) {\n      const idx = this._list.findIndex(obj => obj._id === id);\n      const item = this._list.splice(idx, 1);\n      deletedIDs.push(...item);\n    }\n    // notify subs\n    this.notify('deleteID', { deletedIDs });\n    return { deletedIDs }; // return a copy of the _list\n  }\n\n  /** Given a set of objects, delete them from the _list by looking-up their id\n   *  fields. Return a copy of the _list */\n  delete(items: UR_Item[]): { deleted?: UR_Item[]; error?: string } {\n    const fn = 'delete:';\n    if (!Array.isArray(items) || items === undefined)\n      return { error: `${fn} items must be an array of objects` };\n    if (items.length === 0) return { error: `${fn} items array is empty` };\n    const [norm_items, norm_error] = NormItemList(items);\n    if (norm_error) return { error: `${fn} ${norm_error}` };\n    // got this far, items are normalized and we can delete them\n    const deleted = [];\n    for (const item of norm_items) {\n      const idx = this._list.findIndex(obj => obj._id === item._id);\n      if (idx === -1)\n        return { error: `${fn} item ${item._id} not found in ${this.name}` };\n      const del_item = this._list.splice(idx, 1);\n      deleted.push(...del_item);\n    }\n    // notify subs\n    this.notify('delete', { deleted });\n    return { deleted }; // return a copy of the _list\n  }\n\n  /** erase all the entries in the _list, but do not reset the max_ord or _prefix */\n  clear() {\n    this._list = [];\n    this._ord_highest = 0;\n    // notify subs\n    this.notify('clear', {});\n  }\n\n  /** alternative getter returning unwrapped items */\n  get(ids?: UR_EntID[]): UR_Item[] {\n    const { items } = this.read(ids);\n    return items;\n  }\n\n  /// SEARCH METHODS ///\n\n  /** Search for matching items in the list using options, return found items */\n  find(criteria?: SearchOptions): UR_Item[] {\n    const items = this._list;\n    return Find(items, criteria);\n  }\n\n  /** Search for matching items in the list, return Recordset */\n  query(criteria?: SearchOptions): RecordSet {\n    const items = this._list;\n    return Query(items, criteria);\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default ItemList; // the class\nexport {\n  ItemList // the class\n};\nexport type { ItemListOptions }; // the options type\n", "/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Asset and Dataset Utility Module \n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/\n\nimport { NormStringToValue } from './util-data-norm.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { ErrObj, DS_DataURI } from '../_types/dataset.ts';\nimport type { DatasetOp, DataSyncReq, DatasetReq } from '../_types/dataset.ts';\nimport type { DataBinType, DataSyncOp, DataSyncMode } from '../_types/dataset.ts';\nimport type { UR_ManifestObj } from '../_types/dataset.ts';\n//\ntype DecodedManifest = UR_ManifestObj & ErrObj;\ntype DecodedDataURI = {\n  orgDomain?: string;\n  bucketID?: string;\n  instanceID?: string;\n  appID?: string; // first part of instanceID\n  tags?: any;\n} & ErrObj;\ntype DecodedSyncReq = {\n  binID?: string;\n  op?: DataSyncOp;\n  accToken?: string;\n  ids?: string[];\n  items?: any[];\n  searchOpt?: any;\n} & ErrObj;\ntype DecodedDatasetReq = {\n  dataURI?: DS_DataURI;\n  authToken?: string;\n  op?: DatasetOp;\n} & ErrObj;\ntype DecodedSchema = {\n  root?: string;\n  name?: string;\n  version?: string;\n  tags?: { [tag: string]: any };\n} & ErrObj;\n\n/// DATASET CONSTANTS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DSET_MODES: DataSyncMode[] = ['local', 'local-ro', 'sync', 'sync-ro'];\nconst DSET_FSMAP = {\n  'itemdicts': { type: 'ItemDict', ext: 'json' },\n  'itemlists': { type: 'ItemList', ext: 'json' }\n  // 'schemas': { type: 'Schema', ext: 'json' },\n  // 'stringlists': { type: 'StringList' },\n  // 'filelists': { type: 'FileList' },\n  // 'appconfigs': { type: 'AppConfig' },\n  // 'runconfigs': { type: 'RunConfig' },\n  // 'runstates': { type: 'RunState' },\n  // 'runlogs': { type: 'RunLog' },\n  // 'sessions': { type: 'RunSession' },\n  // 'templates': { type: 'Template', ext: 'json' },\n  // 'sprites': { type: 'Sprite', ext: 'png' },\n};\n/** derived constants - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\nconst DATASET_BINS: DataBinType[] = Object.keys(DSET_FSMAP) as DataBinType[];\nconst DATASET_DIRS = Object.keys(DSET_FSMAP);\n\n/// DATASYNC CONSTANTS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DATA_SYNCOPS: DataSyncOp[] = [];\nDATA_SYNCOPS.push('CLEAR', 'GET', 'ADD', 'UPDATE', 'WRITE', 'DELETE', 'REPLACE');\nDATA_SYNCOPS.push('FIND', 'QUERY');\nconst DATASET_OPS: DatasetOp[] = [\n  'LOAD',\n  'UNLOAD',\n  'PERSIST',\n  'GET_MANIFEST',\n  'GET_DATA'\n];\n\n/// ACCESSORS /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return a copy of the dataset databin keys */\nfunction GetDatasetObjectProps() {\n  return [...DATASET_BINS];\n}\n\n/// ASSET API METHODS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** returns true if the given dirname is a valid asset directory name */\nfunction IsAssetDirname(dirname: string): boolean {\n  return DATASET_DIRS.includes(dirname);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsDataSyncOp(op: DataSyncOp): boolean {\n  return DATA_SYNCOPS.includes(op);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsDatasetOp(op: DatasetOp): boolean {\n  return DATASET_OPS.includes(op);\n}\n\n/// SCHEMA DECODE /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** inspect schema for validity */\nfunction DecodeSchemaID(schemaID: string): DecodedSchema {\n  if (typeof schemaID !== 'string') return { error: 'schema must be a string' };\n  const [root, name, param3, ...extra] = schemaID.split(':');\n  if (extra.length > 0) return { error: `extra segment(s) '${extra.join(':')}'` };\n  const [version, ...param4] = param3.split(';');\n  if (version === undefined) return { error: 'missing version tag' };\n  const tags = {};\n  if (param4) {\n    param4.forEach(tag => {\n      if (tag.length === 0) return;\n      let [key, val] = tag.split('=');\n      tags[key] = NormStringToValue(val);\n    });\n  }\n  return {\n    root,\n    name,\n    version,\n    tags\n  };\n}\n\n/// MANIFEST DECODE ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** decode and validate the manifest object */\nfunction DecodeManifest(manifest: UR_ManifestObj): DecodedManifest {\n  const { _dataURI, _meta } = manifest;\n  if (typeof _dataURI !== 'string') return { error: 'bad _dataURI' };\n  if (typeof _meta !== 'object') return { error: 'bad _metaInfo' };\n  const { itemlists, itemdicts } = manifest;\n  return {\n    _dataURI,\n    _meta,\n    itemlists,\n    itemdicts\n  };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** reverse lookup of assetDir to contained type, where dirname is\n *  a pluralized version of the type name */\nfunction GetBinPropsByDirname(dirname: string) {\n  const entry = DSET_FSMAP[dirname];\n  if (entry) return entry;\n}\n\n/// DATASET API METHODS ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** decode a dataURI into its components */\nfunction DecodeDataURI(dataURI: string): DecodedDataURI {\n  // rapt:bucketID/path/to/data:version=1;tag1=foo;tag2\n  // ${OrgDomain}:${BucketID}/${InstanceID}::${TagString}\n  if (typeof dataURI !== 'string') return { error: 'not a string' };\n  const [orgDomain, param2, param3, ...extra] = dataURI.split(':');\n  if (extra.length > 0) return { error: `extra segment '${extra.join(':')}'` };\n  if (param2 === undefined) return { error: 'missing bucketID' };\n  const [bucketID, ...instancePath] = param2.split('/');\n  if (instancePath && instancePath.length < 1) return { error: 'missing instanceID' };\n  const instanceID = instancePath.join('/');\n  const appID = instancePath[0];\n  const tags = {};\n  if (param3 !== undefined) {\n    param3.split(';').forEach(tag => {\n      if (tag.length === 0) return;\n      let [key, val] = tag.split('=');\n      tags[key] = NormStringToValue(val);\n    });\n  }\n  return {\n    orgDomain,\n    bucketID,\n    instanceID,\n    appID,\n    tags\n  };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** check the values of DataClient config object */\nfunction DecodeDataConfig(configObj: any) {\n  if (configObj === undefined) return { error: 'missing configObj' };\n  const { mode } = configObj;\n  if (!DSET_MODES.includes(mode)) return { error: 'invalid mode' };\n  return { mode };\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if the dataURI is a valid dataset URI */\nfunction IsValidDataURI(dataURI: string): boolean {\n  return DecodeDataURI(dataURI).error === undefined;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsValidDataConfig(configObj: any): boolean {\n  return DecodeDataConfig(configObj).error === undefined;\n}\n\n/// DATASET and DATA PACKETS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** confirm that parameters are correct for synchronizing data */\nfunction DecodeSyncReq(syncReq: DataSyncReq): DecodedSyncReq {\n  const { accToken, op, binID, ids, items, searchOpt } = syncReq;\n  // required params\n  // TODO: if (accToken === undefined) return { error: 'accToken is required' };\n  if (IsDataSyncOp(op) === false) return { error: `op ${op} not recognized` };\n  if (!binID) return { error: 'binID is required' };\n  if (typeof binID !== 'string') return { error: 'binID must be a string' };\n  // optional params\n  if (ids) {\n    if (!Array.isArray(ids)) return { error: 'ids must be an array' };\n    if (ids.some(id => typeof id !== 'string'))\n      return { error: 'ids must be an array of string IDs' };\n  }\n  if (items) {\n    if (!Array.isArray(items)) return { error: 'items must be an array' };\n    if (items.some(item => typeof item !== 'object'))\n      return { error: 'items must be an array of objects' };\n  }\n  if (searchOpt) {\n    if (typeof searchOpt !== 'object')\n      return { error: 'searchOpt must be an object' };\n    if (Object.keys(searchOpt).length === 0)\n      return { error: 'searchOpt must have at least one key' };\n    if (searchOpt.preFilter || searchOpt.postFilter) {\n      return { error: 'filters not supported for remote ops' };\n    }\n  }\n  // everything good, then return the data\n  return { binID, op, accToken, ids, items, searchOpt };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** confirm that parameters are correct for connecting to a datastore */\nfunction DecodeDatasetReq(req: DatasetReq): DecodedDatasetReq {\n  const fn = 'DecodeDatasetReq:';\n  const { dataURI, authToken, op } = req;\n  if (!dataURI) return { error: `${fn} dataURI is required` };\n  // TODO: check authToken?\n  if (!op) return { error: `${fn} op is required` };\n  if (!IsDatasetOp(op)) return { error: `${fn} op [${op}] not recognized` };\n  if (typeof dataURI !== 'string') return { error: `${fn} dataURI must be a string` };\n  return { dataURI: dataURI as DS_DataURI, authToken, op };\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  IsAssetDirname,\n  IsValidDataURI,\n  IsValidDataConfig,\n  IsDataSyncOp,\n  IsDatasetOp,\n  DecodeDataURI,\n  DecodeManifest,\n  DecodeSchemaID,\n  DecodeDataConfig,\n  DecodeDatasetReq,\n  DecodeSyncReq,\n  GetDatasetObjectProps,\n  GetBinPropsByDirname\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Dataset is a storage class for managing different \"bins\" of the same type\n  of collection.\n\n  class Dataset\n    getDataBin, getDataBinByType, \n    createDataBin, deleteDataBin, openDataBin, closeDataBin\n    createItemList, clearItemList, getItemList\n    createDocFolder, clearDocFolder, getDocFolder\n\n  A \"bin\" is a named collection that is stored in the dataset. A dataset\n  is associated with a home location called a \"bucket\". \n\n  Bins are instances of DataBin, which exposes the following methods:\n    add, read, update, replace, write, deleteIDs, delete, clear, get\n    find, query\n    on, off\n    _serializeToJSON, _deserializeFromJSON\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { ItemList } from './class-data-itemlist.ts';\n// import { ItemDict } from './class-data-itemdict.ts';\nimport { DecodeDataURI, DecodeManifest } from './util-data-ops.ts';\nimport { DataBin } from './abstract-data-databin.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  DataBinID,\n  DataBinType,\n  IDS_Serialize,\n  UR_ManifestObj,\n  DS_DatasetObj,\n  OpResult,\n  DS_DataURI\n} from '../_types/dataset.d.ts';\nimport type { ItemListOptions } from './class-data-itemlist.ts';\ntype DataAccessTok = string;\ntype DataAccessTokSet = Set<DataAccessTok>;\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst LOG = console.log.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CTYPES = ['ItemDict', 'ItemList']; // mirror DataBinType\n\n/// HELPER METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if the dataURI is a valid dataset URI */\nfunction m_IsValidDatasetURI(dataURI: string): boolean {\n  return DecodeDataURI(dataURI).error === undefined;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if the given bag type is recognized */\nfunction m_IsValidBinType(cType: DataBinType): boolean {\n  return CTYPES.includes(cType);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** conform bag names to be snake case and is only lower case */\nfunction m_IsValidBinName(bName: string): boolean {\n  const noSpaces = !/\\s/.test(bName);\n  const snakeCase = /^[a-z_]+$/.test(bName);\n  return noSpaces && snakeCase;\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** knows how to manage the different kinds of collections */\nclass Dataset implements IDS_Serialize {\n  //\n  dataset_name: string; // the name of this list manager\n  manifest: UR_ManifestObj;\n  _dataURI: DS_DataURI; // the URI of the dataset\n  open_bins: Set<DataBinID>; // open bins are subject to sync\n  acc_toks: Map<DataBinID, DataAccessTokSet>; // access tokens for each bin\n  //\n  LISTS: { [ref_name: DataBinID]: ItemList };\n  // FOLDERS: { [ref_name: DataBinID]: ItemDict };\n  // see https://github.com/dsriseah/ursys/discussions/25 for other bin types\n  // docfolders\n  // files\n  // state\n  // logs\n  // templates\n  // config\n\n  /// CONSTRUCTOR ///\n\n  constructor(dataURI: DS_DataURI, manifest?: UR_ManifestObj) {\n    if (m_IsValidDatasetURI(dataURI)) {\n      this._dataURI = dataURI;\n    } else {\n      console.error('bad dataURI', dataURI);\n      throw Error(`invalid dataURI passed to Dataset`);\n    }\n    if (manifest !== undefined) {\n      if (typeof manifest === 'object' && DecodeManifest(manifest)) {\n        this.manifest = manifest;\n      } else {\n        console.warn('bad manifest', manifest);\n        throw Error(`invalid optional manifest passed to Dataset`);\n      }\n    }\n    // got this far? allocate storage\n    this._init();\n  }\n\n  /** private: initialize the dataset */\n  _init() {\n    this.open_bins = new Set();\n    this.LISTS = {};\n    // this.FOLDERS = {};\n  }\n\n  /** private: mark a bin as open */\n  _markBinOpen(binName: DataBinID) {\n    const fn = '_markBinOpen:';\n    if (this.open_bins.has(binName))\n      throw Error(`${fn} bin '${binName}' is already open`);\n    this.open_bins.add(binName);\n  }\n\n  /** private: mark a bin as closed */\n  _markBinClosed(binName: DataBinID) {\n    const fn = '_markBinClosed:';\n    if (!this.open_bins.has(binName))\n      throw Error(`${fn} bin '${binName}' is already closed`);\n    this.open_bins.delete(binName);\n  }\n\n  /// SERIALIZATION METHODS ///\n\n  /** return DataObj representation of the dataset */\n  _getDataObj(): DS_DatasetObj {\n    const lists = {};\n    for (const [binID, bin] of Object.entries(this.LISTS)) {\n      lists[binID] = bin._getDataObj();\n    }\n    const docs = {};\n    // for (const [binID, bin] of Object.entries(this.FOLDERS)) {\n    //   docs[binID] = bin._getDataObj();\n    // }\n    return {\n      _dataURI: this._dataURI,\n      ItemLists: lists,\n      ItemDicts: docs\n    };\n  }\n\n  /** given a dataset object, set the dataset properties */\n  _setFromDataObj(dataObj: DS_DatasetObj): OpResult {\n    const { _dataURI, ItemDicts, ItemLists } = dataObj;\n    if (_dataURI) this._dataURI = _dataURI;\n    const found: { [binType: string]: string[] } = {};\n    if (ItemLists) {\n      found.ItemLists = [];\n      for (const [name, dataBinObj] of Object.entries(ItemLists)) {\n        const bin = this.createDataBin(name, 'ItemList');\n        const { error, items: i } = bin._setFromDataObj(dataBinObj);\n        if (error) return { error };\n        found.ItemLists.push(name);\n      }\n    }\n    if (ItemDicts) {\n      found.ItemDicts = [];\n      for (const [name, dataBinObj] of Object.entries(ItemDicts)) {\n        const bin = this.createDataBin(name, 'ItemDict');\n        const { error, items: i } = bin._setFromDataObj(dataBinObj);\n        if (error) return { error };\n        found.ItemDicts.push(name);\n      }\n    }\n    return found;\n  }\n\n  _serializeToJSON(): string {\n    return JSON.stringify(this._getDataObj());\n  }\n\n  _deserializeFromJSON(json: string) {\n    this._setFromDataObj(JSON.parse(json));\n  }\n\n  /// UNIVERSAL BIN METHODS ///\n\n  /** API: Retrieve the manifest object for the dataset */\n  getManifest(): UR_ManifestObj {\n    return this.manifest;\n  }\n\n  /** API: Given a bin name, return the bin. Since bin names are unique, this\n   *  method will return just one bin. */\n  getDataBin(binName: DataBinID, binType?: DataBinType): DataBin {\n    const fn = 'openDataBin:';\n    // if binType is passed, use that for lazy API\n    if (binType && m_IsValidBinType(binType))\n      return this.getDataBinByType(binName, binType);\n    // otherwise look for the bins\n    let bin: DataBin;\n    // search all bins\n    bin = this.LISTS[binName];\n    // if (!bin) bin = this.FOLDERS[binName];\n\n    // return found bin or undefined\n    return bin;\n  }\n\n  /** API: Given a bin name and type, return the bin. */\n  getDataBinByType(binName: DataBinID, binType: DataBinType): DataBin {\n    const fn = 'openBinByType:';\n    let bin: DataBin;\n    switch (binType) {\n      case 'ItemList':\n        bin = this.getItemList(binName);\n        break;\n    }\n\n    // return found bin or undefined\n    return bin;\n  }\n\n  /** API: create a new bin by name and type. */\n  createDataBin(binName: DataBinID, binType: DataBinType): DataBin {\n    const fn = 'createDataBin:';\n    let bin: DataBin;\n    switch (binType) {\n      case 'ItemList':\n        bin = this.createItemList(binName);\n        break;\n      default:\n        throw Error(`${fn} bin type '${binType}' not recognized`);\n    }\n    return bin;\n  }\n\n  /** API: close a bin by name */\n  deleteDataBin(binName: DataBinID): void {\n    const fn = 'closeDataBin:';\n    if (this.LISTS[binName] === undefined)\n      throw Error(`${fn} bin '${binName}' not found`);\n    delete this.LISTS[binName];\n  }\n\n  // track open vs closed bins (speculative need)\n\n  /** API: Given a bin name, return the bin. Since bin names are unique, this\n   *  method will return just one bin. */\n  openDataBin(binName: DataBinID, binType?: DataBinType): DataBin {\n    let bin: DataBin = this.getDataBin(binName, binType);\n    this._markBinOpen(binName);\n    return bin;\n  }\n\n  /** API: close bin */\n  closeDataBin(binName: DataBinID): DataBinID {\n    const fn = 'closeDataBin:';\n    if (!this.open_bins.has(binName))\n      throw Error(`${fn} bin '${binName}' not opened`);\n    this._markBinClosed(binName);\n    return binName;\n  }\n\n  /// ITEM LIST METHODS ///\n\n  /** Given the name of a list, create a new list and return the list\n   *  instance */\n  createItemList(listName: string, opt?: ItemListOptions): ItemList {\n    const fn = 'createItemList:';\n    if (this.LISTS[listName] !== undefined)\n      throw Error(`${fn} list '${listName}' already exists`);\n    const list = new ItemList(listName, opt);\n    this.LISTS[listName] = list;\n    return this.LISTS[listName];\n  }\n\n  /** Given the name of a list, clear the list of all items and retain the\n   *  same list instance and max ordinal count */\n  clearItemList(listName: string): ItemList {\n    const fn = 'clearItemList:';\n    const list = this.LISTS[listName];\n    if (list === undefined) throw Error(`${fn} list '${listName}' not found`);\n    list.clear();\n    return list;\n  }\n\n  /** Given the name of a list, return the entire list */\n  getItemList(listName: string): ItemList {\n    const fn = 'getItemList:';\n    const list = this.LISTS[listName];\n    if (list === undefined) throw Error(`${fn} list '${listName}' not found`);\n    return list;\n  }\n\n  /// DOC FOLDER METHODS ///\n\n  /** Given the name of a folder, create a new folder and return the folder\n   *  instance */\n  createDocFolder(folderName: string) {}\n  clearDocFolder(folderName: string) {}\n  getDocFolder(folderName: string) {}\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default Dataset; // the class\nexport {\n  Dataset // the class\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Base class for DatasetAdapters, which provide the bridge interface between\n  a dataclient implementing dataset protocol and the remote server.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nimport type {\n  IDS_DatasetAdapter,\n  DatasetReq,\n  DatasetRes,\n  DataSyncOptions,\n  DataSyncReq,\n  DataSyncRes,\n  DS_DataURI,\n  DS_DatasetObj\n} from '../_types/dataset.ts';\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nabstract class DatasetAdapter implements IDS_DatasetAdapter {\n  /** access token **/\n  accToken: string;\n\n  /** select the \"current dataset to use\" on master server */\n  abstract selectDataset(dataURI: DS_DataURI): Promise<DatasetRes>;\n\n  /** return either the current dataset object or the one\n   *  specified by dataURI */\n  abstract getDataObj(dataURI?: DS_DataURI): Promise<DS_DatasetObj>;\n\n  /** perform a data collection (databin) operation, returning\n   *  the status of the operation (but never data) */\n  abstract syncData(synReq: DataSyncReq): Promise<DataSyncRes>;\n\n  /** perform a dataset operation, returning the status of the\n   *  operation (but never data) */\n  abstract execDataset(req: DatasetReq): Promise<DatasetRes>;\n\n  /** catch-all implementation-specific error handler */\n  abstract handleError(errData: any): Promise<any>;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default DatasetAdapter;\nexport { DatasetAdapter };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Text and String Processing Utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// HELPERS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction BadString(str: string) {\n  if (typeof str !== 'string') return true;\n  if (str.length === 0) return true;\n  if (str.trim().length === 0) return true;\n  return false;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction ThrowBadString(str: string) {\n  if (BadString(str)) throw Error(`${str} is not a string`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** returns a number if the input is a number or a string that can be parsed\n *  to a number. Otherwise, it throws an error. */\nfunction AssertNumber(num: number | string): number {\n  if (typeof num === 'number') return num;\n  if (typeof num === 'string') {\n    const parsed = parseFloat(num);\n    if (!isNaN(parsed)) return parsed;\n  }\n  throw Error(`Expected number, got ${num}`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction AssertString(str: string): string {\n  if (BadString(str)) throw Error('AssertString: not a string');\n  return str;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** a keyword is a string with no spaces and is alphanumeric. */\nfunction AssertKeyword(str: string): string {\n  if (!IsAtomicKeyword(str)) throw Error('AssertKeyword: not a keyword');\n  return str;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction AssertAlphanumeric(str: string): string {\n  if (BadString(str)) throw Error('AssertAlphanumeric: not a string');\n  if (IsAlphaNumeric(str)) return str;\n  throw Error(`AssertAlphanumeric: ${str} is not alphanumeric`);\n}\n\n/// PARSER INPUT NORMALIZER ////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Format a multi-line string to make parsing operations easier. It\n *  conforms newlines, replaces tabs. It removes whitespace around\n *  delimiters and collapses quoted whitespace to a single space.\n *  Finally, it ensures that there is a trailing newline.\n */\nfunction PreprocessDataText(str: string): string {\n  if (BadString(str)) throw Error('PreprocessDataText: not a string');\n  let normalizedStr = str.replace(/\\r\\n|\\r/g, '\\n'); // conform newlines\n  normalizedStr = normalizedStr // remove trailing/preserve leading whitespace\n    .split('\\n')\n    .map(line => line.replace(/\\s+$/, '')) // remove trailing\n    .map(line => line.replace(/^\\s+/, '')) // remove leading\n    .join('\\n');\n  normalizedStr = normalizedStr.replace(/\\t/g, '  '); // replace tabs with 2 spaces\n  let lines = normalizedStr.split('\\n'); // split string into lines\n  /** process whitespace around delimiters */\n  const processDelimited = (line, delimiter) => {\n    let parts = line.split(delimiter); // split lines based on delimiter\n    for (let i = 0; i < parts.length; i++) {\n      parts[i] = parts[i].trim();\n      parts[i] = parts[i].replace(/\\s+/g, ' ');\n    }\n    return parts.join(delimiter);\n  };\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = processDelimited(lines[i], ',');\n    lines[i] = processDelimited(lines[i], ':');\n  }\n  normalizedStr = lines.join('\\n').trim();\n  return normalizedStr + '\\n';\n}\n\n/// CHECKS ////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsAlphaNumeric(str: string) {\n  ThrowBadString(str);\n  const alphaNumeric = /^[a-zA-Z0-9\\s]+$/.test(str);\n  const singleSpaces = !/\\s{2,}/.test(str);\n  const trimmed = str.trim() === str;\n  const noLeadNum = !/^[0-9]/.test(str);\n  return alphaNumeric && singleSpaces && noLeadNum && trimmed;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction HasNoSpaces(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  return noSpaces;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction HasSingleDash(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  const singleDash = str.split('-').length - 1 === 1;\n  return noSpaces && singleDash;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsSnakeCase(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  const snakeCase = /^[a-z_]+$/.test(str);\n  return noSpaces && snakeCase;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsCamelCase(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  const camelCase = /^[a-z]+[A-Z][a-z]*$/.test(str);\n  return noSpaces && camelCase;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsPascalCase(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  const pascalCase = /^[A-Z][a-z]*$/.test(str);\n  return noSpaces && pascalCase;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsKebabCase(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  const kebabCase = /^[a-z]+(-[a-z]+)*$/.test(str);\n  return noSpaces && kebabCase;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction IsUpperSnakeCase(str: string) {\n  ThrowBadString(str);\n  const noSpaces = !/\\s/.test(str);\n  const upperSnakeCase = /^[A-Z_]+$/.test(str);\n  return noSpaces && upperSnakeCase;\n}\n\n/// SPECIALIZED CHECKS ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** web components must be lower case with one and only one dash */\nfunction IsValidCustomTag(tagName: string) {\n  ThrowBadString(tagName);\n  const noSpaces = !/\\s/.test(tagName);\n  const oneDash = tagName.split('-').length - 1 === 1;\n  const lowerCase = tagName === tagName.toLowerCase();\n  return noSpaces && oneDash && lowerCase;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** alphanumeric, no spaces, no leading numbers, and no special characters,\n *  lowercase */\nfunction IsAtomicKeyword(str: string) {\n  ThrowBadString(str);\n  const noSpaces = HasNoSpaces(str);\n  const isAN = IsAlphaNumeric(str);\n  const noLeadNum = !/^[0-9]/.test(str);\n  const noSpecial = !/[^a-zA-Z0-9]/.test(str);\n  const isLower = str === str.toLowerCase();\n  return noSpaces && isAN && noLeadNum && noSpecial && isLower;\n}\n\n/// CONFORMING UTILITIES //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** convert all non-alphanumeric characters to a space, and replace multiple\n *  spaces with a single space */\nfunction ForceAlphanumeric(str: string, delimiter: string = ' ') {\n  ThrowBadString(str);\n  const alphaNumeric = str.trim().replace(/[^a-zA-Z0-9\\s]/g, ' ');\n  return alphaNumeric.replace(/\\s+/g, delimiter);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction MakeLowerSnakeCase(str: string) {\n  return ForceAlphanumeric(str, '_').toLowerCase();\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction MakeUpperSnakeCase(str: string) {\n  return ForceAlphanumeric(str, '_').toUpperCase();\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction MakeKebabCase(str: string) {\n  return ForceAlphanumeric(str, '-').toLowerCase();\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction MakePascalCase(str: string) {\n  const alphaNumeric = ForceAlphanumeric(str, ' ');\n  const parts = alphaNumeric.split(' ');\n  const capitalized = parts.map(part => part.charAt(0).toUpperCase() + part.slice(1));\n  return capitalized.join('');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction MakeCamelCase(str: string) {\n  const alphaNumeric = ForceAlphanumeric(str, ' ');\n  const parts = alphaNumeric.split(' ');\n  const capitalized = parts.map(part => part.charAt(0).toUpperCase() + part.slice(1));\n  capitalized[0] = capitalized[0].toLowerCase(); // lower case first part\n  return capitalized.join('');\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // BASE CHECKS\n  BadString, // 0-length and empty strings also fail\n  ThrowBadString, // throw error if bad/empty string\n  IsAlphaNumeric, // alphanumeric with single spaces, trimmed\n  HasSingleDash, // true if one and only one dash\n  HasNoSpaces, // true if no spaces\n  // FANCY CHECKS\n  IsSnakeCase,\n  IsCamelCase,\n  IsPascalCase,\n  IsKebabCase,\n  IsUpperSnakeCase,\n  IsValidCustomTag, // check is lower case with one dash\n  IsAtomicKeyword, // true if alphanumeric with no spaces, lowercase\n  // PROCESSING UTILITIES\n  AssertNumber, // return number|parsed number or throw Error\n  AssertString, // return string or throw Error\n  AssertAlphanumeric, // return alphanumeric string or throw Error\n  AssertKeyword, // return single alphanum word or throw Error\n  ForceAlphanumeric, // non-alphanumeric chars -> delimiter\n  MakeLowerSnakeCase, // conformers uses ForceAlphanumeric as base\n  // FANCY PROCESSING\n  PreprocessDataText, // normalize text for parsing\n  MakeUpperSnakeCase,\n  MakeKebabCase,\n  MakePascalCase,\n  MakeCamelCase\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Universal ID Module\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype Schema = `${string}:`;\ntype EntityPrefix = `${string}-`;\ntype EntityID = `${number}`;\ntype UniversalID = `${Schema}${EntityPrefix}${EntityID}`;\ntype ShortUID = `${EntityPrefix}${EntityID}`;\n\n/// TYPE ENUMERATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SCHEMAS = {\n  'meme': {\n    'n': 'node',\n    'e': 'edge',\n    'p': 'project'\n  }\n};\nlet DEFAULT_SCHEMA = '';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet ID_COUNTER = 0;\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Given a string, return the elements of the ID. The schema is optional\n *  and if it isn't present, the schema is an empty string.\n *  The return value is an array of strings: [schema, prefix, id]\n *  If the ID is not in a valid format, an empty array is returned.\n */\nfunction DecodeID(uid: string): string[] {\n  if (!IsValidFormat(uid)) return [];\n  let bits = uid.split(':');\n  if (bits.length < 1 || bits.length > 2) return [];\n  if (bits.length === 1) bits.unshift(''); // empty schema is ok\n  const [schema, prefix] = bits;\n  bits = prefix.split('-');\n  if (bits.length !== 2) return [];\n  // return schema, entity prefix code, entity\n  return [schema, ...bits];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Create a new Short Universal ID string */\nfunction NewID(prefix: string, int?: number): ShortUID {\n  const fn = 'ShortID:';\n  if (int !== undefined) {\n    if (typeof int !== 'number') throw new Error(`${fn} invalid id ${int}`);\n    if (int < 0) throw new Error(`${fn} negative id ${int}`);\n    if (int % 1 !== 0) throw new Error(`${fn} non-integer id ${int}`);\n  } else {\n    int = ID_COUNTER++;\n  }\n  const uid: ShortUID = `${prefix}-${int}`;\n  return uid;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Create a new Full Universal ID string */\nfunction NewFullID(schema: string, prefix: string, int?: number): UniversalID {\n  const fn = 'EncodeID:';\n  const shortUID = NewID(prefix, int);\n  if (!IsValidSchema(schema)) throw new Error(`${fn} unknown schema ${schema}`);\n  if (!IsValidPrefix(`${schema}:${prefix}`))\n    throw new Error(`${fn} unknown prefix ${prefix}`);\n  const uid: UniversalID = `${schema}:${prefix}-${int}`;\n  return uid;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a valid short ID, return a derivative ID with a different prefix */\nfunction PrefixShortID(uid: string, prefix: string): ShortUID {\n  const [_, id] = DecodeID(uid);\n  return NewID(prefix, parseInt(id));\n}\n\n/// VALIDATION ////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return true if the ID is in a valid format.\n *  - full form:  [schema]:[entity_code]-[entity_id]\n *  - short form: [entity_code]-[entity_id]`\n *  must be all lowercase\n */\nfunction IsValidFormat(uid: string): boolean {\n  const isLowerCase = uid === uid.toLowerCase();\n  const isFullForm = /^[\\w]+:[\\w]+-[\\d]+$/.test(uid);\n  const isShortForm = /^[\\w]+-[\\d]+$/.test(uid);\n  return isLowerCase && (isFullForm || isShortForm);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return true if the schema is found in the Schema table. All schemas\n *  are lowercase */\nfunction IsValidSchema(schema: string): boolean {\n  return Object.keys(SCHEMAS).includes(schema);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return true if the entitty prefix is found in the Schema table, optionally\n *  with a schema match string. All prefixes are lowercase */\nfunction IsValidPrefix(sch_pre: string): boolean {\n  const fn = 'IsValidPrefix:';\n  const bits = sch_pre.split(':');\n  if (bits.length > 2) throw new Error(`${fn} Invalid schema prefix ${sch_pre}`);\n  if (bits.length === 1) bits.unshift('');\n  const [schema, prefix] = bits;\n  const isValidSchema = IsValidSchema(schema);\n  const isValidPrefix = Object.keys(SCHEMAS[schema]).includes(prefix);\n  return isValidSchema && isValidPrefix;\n}\n\n/// CONFIGURATION /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** set the default schema that will be returned by DecodeID if this is\n *  desirable for some reason */\nfunction SetDefaultSchema(schema: string): void {\n  const fn = 'SetDefaultSchema:';\n  if (!IsValidSchema(schema)) throw new Error(`${fn} Invalid schema ${schema}`);\n  DEFAULT_SCHEMA = schema;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** get the default schema, which is manually set by SetDefaultSchema */\nfunction GetDefaultSchema(): string {\n  return DEFAULT_SCHEMA;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // create and decode\n  NewID, // [prefix, id] => id\n  NewFullID, // [schema, prefix, id] => id\n  PrefixShortID, // [id, prefix] => id\n  DecodeID, // id => [schema, prefix, id] or []\n  // validation\n  IsValidFormat, // id => boolean\n  IsValidSchema, // schema => boolean\n  IsValidPrefix, // schema:prefix  => boolean\n  // config\n  SetDefaultSchema, // schema => void\n  GetDefaultSchema // () => schema\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  master entrypoint for ur common classes library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// UTILITY CLASSS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: EventMachine\n *  types: SNA_EvtName, SNA_EvtHandler */\nimport { EventMachine } from './class-event-machine.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: ModeMachine */\nimport { ModeMachine } from './class-mode-machine.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: OpSequencer\n *  types: TOpNode, TOpChangeFunc */\nimport { OpSequencer } from './class-op-seq.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named:  PhaseMachine\n *  static: NewPhaseMachine, HookPhase, RunPhaseGroup, GetDanglingHooks,\n *          GetMachine, GetMachineStates\n *  types:  MachineName, PhaseID, PhaseDefinition, HookSelector, HookFunction,\n *          HookEvent */\nimport { PhaseMachine } from './class-phase-machine.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: SNA_Component\n *  types: SNA_ComponentProps, MOD_AddComponent, MOD_PreConfig,\n *         MOD_PreHook, SNA_EvtOn, SNA_EvtOff */\nimport { SNA_Component } from './class-sna-component.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: StateMgr\n *  types: TStateObj, TGroupName, TStateChangeFunc, TEffectFunc, IStateMgr */\nimport { StateMgr } from './class-state-mgr.ts';\n\n/// NETWORKING CLASSES/////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: NetEndpoint */\nimport { NetEndpoint } from './class-urnet-endpoint.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: NetPacket */\nimport { NetPacket } from './class-urnet-packet.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: ServiceMap\n *  types: THandlerFunc */\nimport { ServiceMap } from './class-urnet-servicemap.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: NetSocket\n *  types: I_NetSocket, NS_SendFunc, NS_DataFunc, NS_Options */\nimport { NetSocket } from './class-urnet-socket.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: TransactionMgr */\nimport { TransactionMgr } from './class-urnet-transaction.ts';\n\n/// DATA CLASSES //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: DataBin */\nimport { DataBin } from './abstract-data-databin.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: DataObjAdapter */\nimport { DataObjAdapter } from './abstract-dataobj-adapter.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: DataAdapter */\nimport { DatasetAdapter } from './abstract-dataset-adapter.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: Dataset */\nimport { Dataset } from './class-data-dataset.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: Itemlist */\nimport { ItemList } from './class-data-itemlist.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: DatasetManifest */\nimport { DatasetManifest } from './class-data-manifest.ts';\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** named: RecordSet */\nimport { RecordSet } from './class-data-recordset.ts';\n\n/// COMPATABILITY DEFAULT EXPORT //////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// export both named and default exports for compatibility\nexport {\n  EventMachine,\n  ModeMachine,\n  OpSequencer,\n  PhaseMachine,\n  SNA_Component,\n  StateMgr,\n  NetEndpoint,\n  NetPacket,\n  ServiceMap,\n  NetSocket,\n  TransactionMgr,\n  DataBin,\n  DataObjAdapter,\n  DatasetAdapter,\n  Dataset,\n  ItemList,\n  DatasetManifest,\n  RecordSet\n};\nexport default {\n  EventMachine,\n  ModeMachine,\n  OpSequencer,\n  PhaseMachine,\n  SNA_Component,\n  StateMgr,\n  NetEndpoint,\n  NetPacket,\n  ServiceMap,\n  NetSocket,\n  TransactionMgr,\n  DataBin,\n  DataObjAdapter,\n  DatasetAdapter,\n  Dataset,\n  ItemList,\n  DatasetManifest,\n  RecordSet\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ModeMachine\n\n  composites sets of input triggers to produce derived output triggers\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES & INTERFACES ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { DataObj } from '../_types/dataset.ts';\nimport type { DataEncoding } from './declare-encodings.d.ts';\ntype ModeMachineClass = string; // lower_snake_case\ntype ModeName = `::${string}`; // PascalCase\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst LOG = console.log.bind(console);\nconst WARN = console.warn.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst m_machines: Map<ModeMachineClass, ModeMachine> = new Map();\n\n/// PRIVATE HELPERS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/// URSYS PhaseMachine CLASS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass ModeMachine {\n  //\n  mmClass: ModeMachineClass;\n  modeNames: Set<ModeName>;\n\n  /// INITIALIZATION ///\n\n  /** require a unique class name for the event machine */\n  constructor(mmClass: ModeMachineClass) {\n    if (!this._okClass(mmClass)) throw Error(`bad emClass ${mmClass}`);\n    this.mmClass = mmClass;\n    m_machines.set(mmClass, this);\n  }\n\n  /** validate mode machine class name, which must be lower_snake_case */\n  _okClass(mmClass: ModeMachineClass) {\n    let validClass = typeof mmClass === 'string' && mmClass.length > 0;\n    validClass = validClass && mmClass.indexOf('_') !== -1;\n    validClass = validClass && mmClass === mmClass.toLowerCase();\n    return validClass;\n  }\n\n  /// MODE NAME REGISTRATION ///\n\n  /** validate mode names  */\n  _okMode(modeName: ModeName) {\n    let validType = typeof modeName === 'string' && modeName.length > 0;\n    validType = validType && modeName.slice(0, 2) === '::';\n    validType = validType && modeName[3] === modeName[3].toUpperCase();\n  }\n}\n\n/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default ModeMachine;\nexport { ModeMachine };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Operation Sequencer\n\n  A simple sequencer that is initialized with TOpNode objects:\n  { name, data? } one after the other with addOp(). \n\n  The sequencer can be started, stopped, and moved forward and backward, \n  and can notify subscribers when the current operation changes.\n\n  usage:\n\n  const sequencer = new OpSequencer('MY SEQUENCER'); // unique UC name\n  sequencer.addOp('op1', { ... });\n  sequencer.addOp('op2', { ... });\n  sequencer.subscribe('op1', (newOp, oldOp) => { ... });\n  const op = sequencer.start();\n  while (op) op = sequencer.next();\n  sequencer.dispose();\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES /////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TOpSeqMap = Map<string, OpSequencer>;\ntype TOpChangeFunc = (newOp: TOpNode, oldOp: TOpNode, ops?: OpSequencer) => void;\ntype TDataObj = { [key: string]: any };\ntype TOpNode = {\n  data: TDataObj;\n  _seqName?: string;\n  _opName?: string;\n  _opIndex?: number;\n};\ntype TNodeOptions = {\n  mutable?: boolean; // data is frozen by default\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst OPSEQS: TOpSeqMap = new Map(); // lookup table of operation sequencers\n\n/// HELPER FUNCTIONS //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateSeqName(sn: string) {\n  const fn = 'm_ValidateSeqName';\n  const pcErr = 'name must be PascalCase string';\n  if (sn === '') throw Error(`${fn}: ${pcErr}`);\n  if (sn === undefined) throw Error(`${fn}: ${pcErr}`);\n  if (typeof sn !== 'string') throw Error(`${fn}: ${pcErr}`);\n  if (sn !== sn[0].toUpperCase() + sn.slice(1)) throw Error(`${fn}: ${pcErr}`);\n  if (sn.trim() !== sn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateActiveSeq(seq: OpSequencer) {\n  if (seq instanceof OpSequencer) {\n    if (seq._disposed) throw Error(`sequencer ${seq.seqName} is disposed`);\n    else return;\n  }\n  throw Error('not a sequence instance or undefined');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateNodeName(nn: string) {\n  const fn = 'm_ValidateNodeName';\n  if (nn === '') throw Error(`${fn}: name must be lc string`);\n  if (nn === undefined) throw Error(`${fn}: name must be lc string`);\n  if (typeof nn !== 'string') throw Error(`${fn}: name must be lc string`);\n  if (nn !== nn.toLowerCase()) throw Error(`${fn}: name must be lc`);\n  if (nn.trim() !== nn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass OpSequencer {\n  ops: TOpNode[]; // array of operations\n  seqName: string; // sequencer name\n  lastOp: TOpNode; // last operation\n  currentOp: TOpNode; // current operation\n  opIndex: number; // current operation index\n  opsMap: Map<string, number>; // map opname to index in ops array\n  subs: Map<string, Set<TOpChangeFunc>>; // map opname to set of subscribers\n  _disposed: boolean; // true if disposed\n\n  constructor(seqName: string) {\n    m_ValidateSeqName(seqName);\n    seqName = seqName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (OPSEQS.has(seqName)) {\n      console.warn(\n        `(not an error) '${seqName}' construction duplicate, returning existing instance`\n      );\n      return OPSEQS.get(seqName);\n    }\n    // otherwise, create a new instance and save it\n    this.seqName = seqName;\n    this.ops = [];\n    this.opsMap = new Map();\n    this.opIndex = -1;\n    this.currentOp = null;\n    this.lastOp = null;\n    this.subs = new Map();\n    this._disposed = false;\n    OPSEQS.set(seqName, this);\n  }\n\n  /* --- add nodes --- */\n\n  /** given nodeName and a source TOpNode, add a clone of the source node to the sequencer */\n  addOp(name: string, data: TDataObj, opt?: TNodeOptions): TOpNode {\n    const fn = 'addOp';\n    //\n    if (data === undefined) throw Error(`${fn}: arg2 must be TOpNode`);\n    if (typeof name !== 'string') throw Error(`${fn}: arg1 must be name:string`);\n    if (typeof data._name === 'string') throw Error(`${fn}: node ${name} reused`);\n    if (data._index !== undefined) throw Error(`${fn}: node ${name} reused`);\n    //\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    //\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.hasOp(name)) throw Error(`${fn}: node '${name}' already exists`);\n    //\n    const index = this.ops.length;\n    this.opsMap.set(name, index); // save lookup index by name\n    const newData = { ...data }; // copy of user data\n    if (opt?.mutable) Object.freeze(newData); // default is frozen\n    const newNode: TOpNode = {\n      _opIndex: index,\n      _seqName: this.seqName,\n      _opName: name,\n      data: newData\n    };\n    this.ops.push(newNode);\n    return newNode;\n  }\n\n  deleteOp(name: string): void {\n    const fn = 'deleteOp';\n    console.error(`${fn}: not implemented by design`);\n  }\n\n  /* --- access operations --- */\n\n  data(key?: string): TDataObj {\n    m_ValidateActiveSeq(this);\n    if (typeof key === 'string') return this.currentOp.data[key];\n    return this.currentOp.data;\n  }\n\n  length(): number {\n    m_ValidateActiveSeq(this);\n    return this.ops.length;\n  }\n\n  /* --- sequencer operations --- */\n\n  start(): TOpNode {\n    const fn = 'start';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.ops.length === 0) throw Error(`${fn}: no operations to run`);\n    this.opIndex = 0;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  current(): TOpNode {\n    const fn = 'current';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  stop(): TOpNode {\n    const fn = 'stop';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error('stop: sequencer not started');\n    this.opIndex = -1;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  next(): TOpNode {\n    const fn = 'next';\n    if (this.opIndex === -1) return this.start();\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === this.ops.length - 1) return undefined;\n    ++this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  previous(): TOpNode {\n    const fn = 'previous';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    if (this.opIndex === 0) return undefined;\n    --this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  /* --- node events --- */\n\n  subscribe(opName: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    if (!this.subs.has(opName)) this.subs.set(opName, new Set());\n    this.subs.get(opName).add(subf);\n  }\n\n  unsubscribe(name: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    if (!this.hasOp(name)) throw Error(`${fn}: node '${name}' does not exist`);\n    const subs = this.subs.get(name);\n    if (subs.has(subf)) subs.delete(subf);\n  }\n\n  _update() {\n    const fn = '_update';\n    m_ValidateActiveSeq(this);\n    this.lastOp = this.currentOp;\n    this.currentOp = this.ops[this.opIndex];\n  }\n\n  _notifyChange(): void {\n    const fn = '_notifyChange';\n    m_ValidateActiveSeq(this);\n    const subs = this.subs.get(this.currentOp._opName);\n    if (subs) subs.forEach(subf => subf(this.currentOp, this.lastOp, this));\n  }\n\n  /* --- node utilities --- */\n\n  hasOp(opName: string): boolean {\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    return this.ops.some(op => op._opName === opName);\n  }\n\n  matchOp(opName: string): boolean {\n    const fn = 'matchOp';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    return opName === this.ops[this.opIndex]._opName;\n  }\n\n  /** remove all nodes and subscribers */\n  dispose(): void {\n    OpSequencer.DeleteSequencer(this.seqName);\n  }\n\n  /* --- static utilities --- */\n\n  static GetSequencer(seqName: string): OpSequencer {\n    m_ValidateSeqName(seqName);\n    return OPSEQS.get(seqName);\n  }\n\n  static DeleteSequencer(seqName: string): void {\n    const seq = OpSequencer.GetSequencer(seqName);\n    seq.opsMap.clear();\n    seq.subs.forEach(subs => subs.clear());\n    seq.ops.length = 0;\n    seq._disposed = true;\n    OPSEQS.delete(seqName);\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default OpSequencer;\nexport { OpSequencer };\nexport type { TOpNode, TOpChangeFunc };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS State Manager Class\n  ported from GEMSTEP circa 2021\n\n  For use by modular application core features that require a centralized\n  state object that can be shared between modules. It manages named groups\n  of flattened state (react compatible) that are not allowed to have\n  overlapping property names across any group. This is to prevent lazy\n  reuse of property names in different parts of the app.\n\n  In general, methods that begin with _ are the tricky ones that are used\n  internally by an \"appcore\" module that is the single source of initialization\n  and truth. \n\n  DATA STRUCTURES\n\n  * vmStateEvent is an object with event-specific properties. When sent\n    to subscribers, it contains a groupName property matching the name of\n    the StateManager instance (e.g. LOCALE). This is not required (or even\n    settable) when using SendState( vmStateEvent )\n  * The difference between vmStateEvent and vmState is that the latter is\n    the complete state object, whereas the event has the same shape but\n    only includes the changed properties\n\n  SIMPLE EXAMPLE\n\n  // in managing appcore module\n  const STORE = new StateMgr('ScriptWizard');\n  STORE._initializeState({\n    prop1: 'value1',\n    prop2: 'value2'\n  });\n  const { prop1, prop2 } = STORE.State();\n\n  // in read-only module\n  const OTHER = StatMgr.GetStateManager('ScriptWizard');\n  const { prop1, prop2 } = OTHER.State();\n  \n  API REFERENCE\n\n  State: groupName => TStateObj;\n  SendState: TStateObj => void;\n  subscribeState: TStateChangeFunc => void;\n  unsubscribeState: TStateChangeFunc => void;\n  queueEffect: TEffectFunc => void;\n\n  INTERNAL API for APPCORE MANAGERS ONLY\n\n  _initializeState: TStateObj => void;\n  _setState: TStateObj => void;\n  _insertStateEvent: (TStateObj, TEffectFunc) => void;\n  _interceptState: TTapFunc => void;\n  _isValidState: TStateObj => boolean;\n  _mergeState: TStateObj => TStateObj;\n  _notifySubs: TStateObj => void;\n  _enqueue: TQueuedAction => void;\n  _dequeue: void => void;\n  _doEffect: void => void;\n\n  STATIC API\n  \n  GetStateManager: groupName => StateMgr;\n  GetStateData: groupName => TStateObj;\n  GetInstance: groupName => StateMgr;\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TStateObj = { [key: string]: any };\ntype TGroupName = string; // must be uppercase\ntype TPropName = string; // must be lowercase\ntype TGroupMap = Map<TGroupName, StateMgr>; // group name --> class instance\ntype TUsedProps = Map<TPropName, TGroupName>; // unique prop --> owning group\ntype TStateChangeFunc = (newState: TStateObj, curState: TStateObj) => void;\ntype TEffectFunc = () => void;\ntype TTapFunc = (state: TStateObj) => void;\ntype TQueuedAction = { stateEvent: TStateObj; callback: Function };\ninterface IStateMgr {\n  State: (key: string) => TStateObj;\n  SendState: (vmStateEvent: TStateObj, callback: Function) => void;\n  subscribeState: (subFunc: TStateChangeFunc) => void;\n  unsubscribeState: (subFunc: TStateChangeFunc) => void;\n  queueEffect: (effectFunc: TEffectFunc) => void;\n  _initializeState: (stateObj: TStateObj) => void;\n  _setState: (vmState: TStateObj) => void;\n  _interceptState: (tapFunc: TTapFunc) => void;\n  _insertStateEvent: (stateEvent: TStateObj, callback: TEffectFunc) => void;\n  _isValidState: (stateObj: TStateObj) => boolean;\n  _mergeState: (stateObj: TStateObj) => TStateObj;\n  _notifySubs: (stateObj: TStateObj) => void;\n  _enqueue: (action: TQueuedAction) => void;\n  _dequeue: () => void;\n  _doEffect: () => void;\n}\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst VM_STATE: TStateObj = {}; // global viewstate\nconst GROUPS: TGroupMap = new Map(); // lookup table of state managers\nconst USED_PROPS: TUsedProps = new Map(); // owner of registered properties\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass StateMgr {\n  name: string; // the name of this state group\n  init: boolean; // true if _initializeState has been called\n  subs: Set<TStateChangeFunc>;\n  queue: any[]; // queued state changes\n  taps: TTapFunc[]; // queued state interceptor hooks\n  effects: TEffectFunc[]; // queued side effects\n\n  /// CONSTRUCTOR /////////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  constructor(groupName: TGroupName) {\n    if (typeof groupName !== 'string') throw Error('groupName must be a string');\n    groupName = groupName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (GROUPS.has(groupName)) {\n      console.warn(\n        `(not an error) '${groupName}' construction duplicate, returning existing instance`\n      );\n      return GROUPS.get(groupName);\n    }\n    // otherwise create a new instance and save it\n    this.name = groupName;\n    this.init = false;\n    this.subs = new Set();\n    this.queue = [];\n    this.taps = [];\n    this.effects = [];\n    VM_STATE[this.name] = {};\n    // bind 'this' for use with async code\n    // if you don't do this, events will probably not have instance context\n    this.state = this.state.bind(this);\n    this.sendState = this.sendState.bind(this);\n    this.subscribeState = this.subscribeState.bind(this);\n    this.unsubscribeState = this.unsubscribeState.bind(this);\n    this.queueEffect = this.queueEffect.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this._setState = this._setState.bind(this);\n    this._insertStateEvent = this._insertStateEvent.bind(this);\n    this._interceptState = this._interceptState.bind(this);\n    this._isValidState = this._isValidState.bind(this);\n    this._mergeState = this._mergeState.bind(this);\n    this._notifySubs = this._notifySubs.bind(this);\n    this._enqueue = this._enqueue.bind(this);\n    this._dequeue = this._dequeue.bind(this);\n    this._doEffect = this._doEffect.bind(this);\n    // save the instance\n    GROUPS.set(this.name, this);\n  }\n\n  /// MAIN CLASS METHODS //////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a COPY of the current clonedEvent */\n  state(key: string): TStateObj {\n    // const state = { ...VM_STATE[this.name] };\n    const state = this._derefProps({ ...VM_STATE[this.name] });\n    if (typeof key === 'string' && key.length > 0) return state[key];\n    return state;\n  }\n\n  /** Handle a clonedEvent update from a subscribing module. The incoming\n   *  vmstateEvent is checked against the master state object to ensure it\n   *  contains valid keys. Any filter functions are allowed to mutate a copy of\n   *  the incoming state event.\n   *  @param {object} vmStateEvent - object with group-specific props\n   */\n  sendState(vmStateEvent: TStateObj, callback: Function) {\n    if (this._isValidState(vmStateEvent)) {\n      const clonedEvent = this._cloneStateObject(vmStateEvent);\n      this.taps.forEach(tap => tap(clonedEvent));\n      // queue the action for processing\n      const action = { stateEvent: clonedEvent, callback };\n      this._enqueue(action);\n    } else throw Error('SendState: invalid vmState update received, got:');\n  }\n\n  /** Subscribe to state. The subscriber function looks like:\n   *  ( vmStateEvent, currentState ) => void\n   */\n  subscribeState(subFunc: TStateChangeFunc) {\n    if (typeof subFunc !== 'function') throw Error('subscriber must be function');\n    if (this.subs.has(subFunc)) console.warn('duplicate subscriber function');\n    this.subs.add(subFunc);\n  }\n\n  /** Unsubscribe state */\n  unsubscribeState(subFunc: TStateChangeFunc) {\n    if (!this.subs.delete(subFunc))\n      console.warn('function not subscribed for', this.name);\n  }\n\n  /** When executing a side effect from a component, use this method to\n   *  hold it until after all state updates have completed, so the DOM\n   *  is stable\n   */\n  queueEffect(effectFunc: TEffectFunc) {\n    if (typeof effectFunc !== 'function') throw Error('effect must be a function');\n    this.effects.push(effectFunc);\n    this._doEffect();\n  }\n\n  /// CLASS HELPER METHODS ////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Set the state object directly. used to initialize the state from within\n   *  an appcore module. skips state validation because the VM_STATE entry\n   *  is an empty object\n   */\n  _initializeState(stateObj: TStateObj) {\n    // only allow this once per instance\n    if (this.init)\n      throw Error(`_initializeState: store '${this.name}' already initialized`);\n    // validate stateObj\n    Object.keys(stateObj).forEach(k => {\n      // must be all lowercase\n      if (k.toLowerCase() !== k)\n        throw Error(`_initializeState: props must be lowercase, not '${k}'`);\n      // must not contain undefined keys\n      if (stateObj[k] === undefined)\n        throw Error(\n          `_initializeState: prop '${k}' value can't be undefined (use null instead)`\n        );\n    });\n    // check that VM_STATE entry is valid (should be created by constructor)\n    if (VM_STATE[this.name]) {\n      Object.keys(stateObj).forEach(k => {\n        // skip the viewStateEvent key\n        if (k === '_group') return;\n        // check for duplicate keys. they must be unique across ALL state groups\n        const assTo = USED_PROPS.get(k);\n        if (assTo !== undefined) throw Error(`${k} already assigned to ${assTo}`);\n        // register the property name so it can't be used by another manager\n        USED_PROPS.set(k, this.name);\n      });\n      VM_STATE[this.name] = stateObj; // initialize!\n      this.init = true;\n    } else throw Error(`${this.name} does't exist in VM_STATE`);\n  }\n\n  /** In some cases, we want to update state but not trigger subscribers\n   *  related to it. Alias for _mergeState()\n   */\n  _setState(vmState: TStateObj) {\n    this._mergeState(vmState);\n  }\n\n  /** When SendState() is invoked, give the instance manager a change to\n   *  inspect the incoming state and do a side-effect and/or a filter.\n   *  They will run in order of interceptor registration\n   *  @param {function} tapFunc - receive stateEvent to mutate or act-on\n   */\n  _interceptState(tapFunc: TTapFunc) {\n    if (typeof tapFunc !== 'function') throw Error(`'${tapFunc}' is not a function`);\n    this.taps.push(tapFunc);\n  }\n\n  /** Allow synthesis of a state event by adding to queue without\n   *  immediately executing it. For use by _interceptState only.\n   *  Creates an action { stateObj, callback }\n   */\n  _insertStateEvent(stateEvent: TStateObj, callback: TEffectFunc) {\n    this._enqueue({ stateEvent, callback });\n  }\n\n  /** Return true if the event object conforms to expectations (see below) */\n  _isValidState(stateObj: TStateObj) {\n    // test 1 - is this event handled this manager instance?\n    // const grp = stateObj._group.trim().toUpperCase();\n    // if (grp !== this.name) return false;\n\n    // test 2 - any keys must already be defined in the store to\n    // avoid typo-based errors and other such crapiness\n    const curState = VM_STATE[this.name];\n    let keysOk = true;\n    Object.keys(stateObj).forEach(k => {\n      const keyTest = keysOk && curState[k] !== undefined;\n      if (keyTest === false) console.warn(`isValidState: '${k}' not a valid key`);\n      keysOk = keysOk && keyTest;\n    });\n    return keysOk;\n  }\n\n  /** Scan the object properties for arrays, and mutate with a new array.\n   *  In the case of an array containing references, the references will still\n   *  be the same but the array itself will be different\n   */\n  _derefProps(stateObj: TStateObj) {\n    Object.keys(stateObj).forEach(k => {\n      if (Array.isArray(stateObj[k])) stateObj[k] = [...stateObj[k]];\n    });\n    return stateObj;\n  }\n\n  /** Utility method to clone state event. It handles array cloning as well but\n   *  is otherwise a shallow clone\n   */\n  _cloneStateObject(stateObj: TStateObj) {\n    const clone = this._derefProps({ ...stateObj });\n    return clone;\n  }\n\n  /** Take a clonedEvent event object and update the VM_STATE entry with\n   *  its property values. This creates an entirely new state object\n   */\n  _mergeState(stateObj: TStateObj) {\n    if (!this._isValidState(stateObj)) return undefined;\n    // first make a new state object with copies of arrays\n    const newState = this._derefProps({\n      ...VM_STATE[this.name],\n      ...stateObj\n    });\n    // set the state\n    VM_STATE[this.name] = newState;\n    // also return the new state object\n    return newState;\n  }\n\n  /** Forward the event to everyone. The vmStateEvent object contains\n   *  properties that changed only, appending a 'stateGroup' identifier\n   *  that tells you who sent it. Sends a read-only copy.\n   */\n  _notifySubs(stateObj: TStateObj) {\n    // fire notification in the next event cycle to make sure\n    // that prior unsubscribes took effect\n    setTimeout(() => {\n      const subs = [...this.subs.values()];\n      stateObj.stateGroup = this.name; // mixed-case names reserved by system\n      // also include the total state\n      const currentState = this._derefProps({ ...VM_STATE[this.name] });\n      subs.forEach(sub => sub(stateObj, currentState));\n    });\n  }\n\n  /** Placeholder queueing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _enqueue(action: TQueuedAction) {\n    const { stateEvent, callback } = action;\n    if (!this._isValidState(stateEvent)) {\n      console.warn('bad vmStateEvent', stateEvent);\n      return;\n    }\n    if (callback && typeof callback !== 'function') {\n      console.warn('call must be function, not', typeof callback, callback);\n      return;\n    }\n    this.queue.push(action);\n    // placeholder processes immediately\n    this._dequeue();\n  }\n\n  /** Placeholder dequeing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _dequeue() {\n    const callbacks = [];\n    // iterate over all actions in queue\n    let action = this.queue.shift();\n    while (action !== undefined) {\n      const { vmStateEvent, callback } = action;\n      this._mergeState(vmStateEvent); // merge partial state into state\n      this._notifySubs(vmStateEvent); // send partial state to subs\n      if (typeof callback === 'function') callbacks.push(callback);\n      // get next action in queue\n      action = this.queue.shift();\n    }\n    // issues callbacks after ALL actions have completed\n    callbacks.forEach(f => f());\n    this._doEffect();\n  }\n\n  /** execute effect functions that have been queued, generally if there\n   *  are no pending state changes\n   */\n  _doEffect() {\n    if (this.queue.length > 0) return;\n    setTimeout(() => {\n      let effect = this.effects.shift();\n      while (effect !== undefined) {\n        effect();\n        effect = this.effects.shift();\n      }\n    });\n  }\n\n  /// STATIC METHODS //////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a state manager instance if it exists, undefined if not. Throws\n   *  errors if there are issues with the name */\n  static GetStateManager(groupName: string): StateMgr {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    return GROUPS[bucket];\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a locked copy of the state of a particular named state group.\n   *  Unlike GetStateManager, this returns just the data object.\n   */\n  static GetStateData(groupName: string) {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    const state = VM_STATE[bucket];\n    if (!state) throw Error(`stateGroup ${bucket} is not defined`);\n\n    // create a read-only copy of state and set all its properties to\n    // unwriteable\n    const readOnlyState = { ...state };\n    for (const prop of Object.keys(readOnlyState)) {\n      Object.defineProperty(readOnlyState, prop, {\n        writable: false\n      });\n    }\n    return readOnlyState;\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a Stage Manager instance. This just hides the new operator that\n   *  purposefully always returns an instance of an existing group if it\n   *  already exists\n   */\n  static GetInstance(groupName: string) {\n    return new StateMgr(groupName);\n  }\n}\n\n/// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return a READ-ONLY object containing state for a particular group */\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default StateMgr;\nexport { StateMgr };\nexport type { TStateObj, TGroupName, TStateChangeFunc, TEffectFunc };\nexport type { IStateMgr };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  DataObjectAdapters are the bridge between the SNA Dataset API and the\n  underlying data storage mechanism. This adapter provides access to\n  pure data objects inside a Dataset pointed-to by a DataURI. \n\n  A Dataset is a collection of DataBins that organize their content with\n  a _id key such as lists or dictionaries. The DataObjectAdapter provides\n  the means to read/write the entire dataset or its data bins. \n\n  A dataset is not the same as a dataobjectstore, though they are related.\n  The dataURI is the unique identifier for a dataset. The  dataobjectstore\n  is the persisted data for the dataset. In the reference implementation,\n  the dataobject store is a directory of JSON files, each file representing\n  a data bin in serialized form. \n\n  To convert that identifier to a particular storage location that contains\n  the actual contents of the dataset, the dataobjectstore adapter is used. \n  Its API performs read/write operations based on the dataURI, providing \n  the means to read/write the dataset files.\n\n  The reference implementation is a filesystem-based adapter that works\n  with JSON files in a directory, described by a manifest file that declares\n  what storage resources are assigned to the dataset.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { DecodeDataURI, IsAssetDirname } from './util-data-ops.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  IDS_DataObjectAdapter,\n  IDS_Serialize,\n  DS_DatasetObj,\n  UR_ManifestObj,\n  DataBinID,\n  DS_DataURI\n} from '../_types/dataset.ts';\ntype DSObj = DS_DatasetObj;\ntype DSMan = UR_ManifestObj;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport type DOA_Options = {\n  dataURI?: DS_DataURI;\n  accToken?: string;\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst MANIFEST_FILENAME = '00-manifest';\nlet manifest_id_counter = 1000; // asset id counter\n\n/// DATA STORAGE ADAPTER //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nabstract class DataObjAdapter implements IDS_DataObjectAdapter {\n  //\n  dataURI: DS_DataURI;\n  accToken: string; // access token\n  //\n  constructor(opt?: DOA_Options) {\n    if (typeof opt === 'object') {\n      const { dataURI, accToken } = opt;\n      this.dataURI = dataURI;\n      this.accToken = accToken;\n    }\n  }\n\n  abstract getManifest(dataURI: DS_DataURI): Promise<UR_ManifestObj>;\n  abstract readDatasetObj(dataURI: string): Promise<DS_DatasetObj>;\n  abstract writeDatasetObj(dataURI: string, dsObj: DS_DatasetObj): Promise<any>;\n  abstract readDataBinObj(dataURI: string, binID: DataBinID): Promise<any>;\n  abstract writeDataBinObj(\n    dataURI: string,\n    binID: DataBinID,\n    dataObj: any\n  ): Promise<any>;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default DataObjAdapter;\nexport { DataObjAdapter };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n    \n  Manifest is a utility class that handles the resource declaration that\n  specifies where serialized data collections are stored. \n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport {\n  DecodeManifest,\n  DecodeSchemaID,\n  DecodeDataURI\n} from '../common/util-data-ops.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type {\n  UR_ManifestObj,\n  DS_ContentMeta,\n  DataBinID,\n  DataBinType,\n  DataBinURIs,\n  ResourceURI,\n  UR_SchemaID,\n  DS_DataURI\n} from '../_types/dataset.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log;\nconst WARN = console.warn;\n\n/// HELPER METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass DatasetManifest {\n  //\n  _manifest: UR_ManifestObj;\n  _dataURI: DS_DataURI;\n  _metaInfo: DS_ContentMeta;\n  _bins: Map<DataBinType, DataBinURIs>;\n  //\n  constructor(maniObj?: UR_ManifestObj) {\n    // if there is no manifest provided, then make a blank one\n    if (maniObj === undefined) {\n      this._manifest = {};\n      return;\n    }\n    // otherwise initialize from the provided object\n    this._setFromManifestObj(maniObj);\n  }\n\n  /// INITIALIZERS ///\n\n  /** utility method to set the instance from an object */\n  _setFromManifestObj(maniObj: UR_ManifestObj): void {\n    const { error, ...decoded } = DecodeManifest(maniObj);\n    if (error) throw Error(`error constructing DatasetManifest: ${error}`);\n    const { _dataURI, _meta, ...bins } = decoded;\n    this._manifest = decoded;\n    // memory note: ? none-duplicated pointers ?\n    this._dataURI = _dataURI;\n    /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*\\\n      bins: {\n        ItemListURIs: { name1: resource_uri1, name2: resource_uri2 }\n        DocFolderURIs: { name3: resource_uri3, name4: resource_uri4 }\n    \\*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/\n    if (typeof bins !== 'object') return;\n    this._bins = new Map();\n    Object.keys(bins).forEach(binType => {\n      const binDict = bins[binType]; // { [binName] : resourceURI }\n      this._bins.set(binType as DataBinType, binDict);\n    });\n  }\n\n  /// BUILDERS ///\n\n  setDataURI(dataURI: DS_DataURI): void {\n    const { error } = DecodeDataURI(dataURI);\n    if (error) throw Error(`error setting dataURI '${dataURI}': ${error}`);\n    this._dataURI = dataURI;\n  }\n\n  setMeta(meta: DS_ContentMeta): void {\n    this._metaInfo = meta;\n  }\n\n  /** add a bin to the manifest */\n  addBinEntry(binType: DataBinType, binName: DataBinID, binURI: ResourceURI): void {\n    if (!this._bins.has(binType)) this._bins.set(binType, {});\n    const bin = this._bins.get(binType);\n    if (bin[binName]) WARN(`addBin: overwriting existing bin ${binName}`);\n    bin[binName] = binURI;\n  }\n\n  /// GENERATORS ///\n\n  /** return a new manifest object */\n  getManifestObj(): UR_ManifestObj {\n    const { _dataURI, _metaInfo } = this;\n    const bins = {};\n    this._bins.forEach((dict, type) => {\n      bins[type] = { ...dict };\n    });\n    return {\n      _dataURI,\n      _meta: _metaInfo,\n      ...bins\n    };\n  }\n\n  /// ACCESSORS (RETURN COPIES) ///\n\n  /** retrieve the dataURI of this manifest*/\n  get dataURI(): string {\n    return this._dataURI;\n  }\n\n  /** retrieve a copy of the meta info for this manifest */\n  get meta(): DS_ContentMeta {\n    return { ...this._metaInfo };\n  }\n\n  /** return a copy of the bins map as object */\n  getBinURIs(): DataBinURIs {\n    const bins = {};\n    this._bins.forEach((binDict, binType) => {\n      bins[binType] = { ...binDict };\n    });\n    return bins;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default DatasetManifest;\nexport { DatasetManifest };\n"],
  "mappings": "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",
  "names": ["SNA_NewComponent", "PR", "fn", "fn", "PR", "LOG", "fn", "LOG", "PR", "PR", "LOG", "fn", "DBG", "PR", "LOG", "fn", "LOG", "PR", "DBG", "PR", "LOG", "LOG", "PR", "DBG", "fn", "EP", "LOG", "PR", "DBG", "LOG", "fn", "PreConfig", "PreHook", "Subscribe", "Unsubscribe", "LOG", "PR", "DBG", "SNA_NewComponent", "fn", "LOG", "PR", "DBG", "PreConfig", "PreHook", "Find", "Query", "fn", "fn", "fn", "LOG", "WARN", "m_machines", "eventName", "fn", "fn", "fn", "LOG", "fn", "PR", "LOG", "DBG", "EP", "fn", "Find", "Query", "DBG", "LOG", "PR", "LOG", "PR", "fn", "LOG", "WARN", "m_machines", "fn", "WARN"]
}
