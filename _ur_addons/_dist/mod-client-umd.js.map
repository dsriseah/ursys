{
  "version": 3,
  "sources": ["../@addons-client.ts", "../../_ur/common/declare-colors.js", "../../_ur/common/util-prompts.js", "../../_ur/common/util-text.js", "../../_ur/browser-client/@client.ts", "../../_ur/common/class-op-seq.ts", "../../_ur/common/class-state-mgr.ts", "../../_ur/common/lib-uid.ts", "../../_ur/common/class-urnet-socket.ts", "../../_ur/common/types-urnet.ts", "../../_ur/common/class-urnet-packet.ts", "../../_ur/common/class-urnet-endpoint.ts", "../../_ur/common/constants-urnet-web.ts", "../net/urnet-types.ts", "../net/class-urnet-packet.ts", "../net/class-urnet-endpoint.ts", "../net/class-urnet-socket.ts"],
  "sourcesContent": ["/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  entrypoint for client-side addons\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport * as UR from '@ursys/core'; // this is a .js file\nimport { NetEndpoint } from './net/class-urnet-endpoint.ts';\nimport { NetSocket } from './net/class-urnet-socket.ts';\nimport { NetPacket } from './net/class-urnet-packet.ts';\n\n/// ASSEMBLE MODULES //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst { ConsoleStyler } = UR;\nconst PF = ConsoleStyler('UR/ADD', 'TagPink');\nconst CLASS = {\n  NetEndpoint,\n  NetSocket,\n  NetPacket\n};\n\n/// TEST METHODS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction AddonClientTest() {\n  console.log(...PF('System Integration of new URSYS addon successful!'));\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  CLASS, //\n  AddonClientTest\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Console colors for both browser and terminal environments\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\n/// COLORS BY NAME ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst COLOR_NAMES = [\n  'Black',\n  'White',\n  'Red',\n  'Orange',\n  'Yellow',\n  'Green',\n  'Cyan',\n  'Blue',\n  'Purple',\n  'Pink',\n  'Gray'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst TERM_COLORS = {\n  // TOUT = makeTerminalOut(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Orange: '\\x1b[38;5;202m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Purple: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgGray: '\\x1b[100m',\n  BgWhite: '\\x1b[47m',\n  BgRed: '\\x1b[41m',\n  BgOrange: '\\x1b[48;5;202m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgPink: '\\x1b[105m',\n\n  // FORMATS\n  TagBlack: '\\x1b[30;1m',\n  TagWhite: '\\x1b[37;1m',\n  TagRed: '\\x1b[41;37m',\n  TagOrange: '\\x1b[43;37m',\n  TagYellow: '\\x1b[43;30m',\n  TagGreen: '\\x1b[42;30m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[44;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[105;1m',\n  TagGray: '\\x1b[100;37m',\n  TagNull: '\\x1b[2;37m'\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst CSS_COMMON = 'padding:3px 5px;border-radius:2px;';\nconst CSS_COLORS = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Orange: 'color:orange',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  Pink: 'color:pink',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_COMMON}`,\n  TagOrange: `color:#000;background-color:#fa4;${CSS_COMMON}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_COMMON}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_COMMON}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_COMMON}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_COMMON}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_COMMON}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_COMMON}`,\n  TagGray: `color:#fff;background-color:#999;${CSS_COMMON}`,\n  TagNull: `color:#999;border:1px solid #ddd;${CSS_COMMON}`,\n  // COLOR BACKGROUND DARK (BROWSER ONLY)\n  TagDkRed: `color:white;background-color:maroon;${CSS_COMMON}`,\n  TagDkOrange: `color:white;background-color:burntorange;${CSS_COMMON}`,\n  TagDkYellow: `color:white;background-color:brown;${CSS_COMMON}`,\n  TagDkGreen: `color:white;background-color:forestgreen;${CSS_COMMON}`,\n  TagDkCyan: `color:white;background-color:cerulean;${CSS_COMMON}`,\n  TagDkBlue: `color:white;background-color:darkblue;${CSS_COMMON}`,\n  TagDkPurple: `color:white;background-color:indigo;${CSS_COMMON}`,\n  TagDkPink: `color:white;background-color:fuchsia;${CSS_COMMON}`\n};\n\n/// COLORS BY MEANING /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SEMANTIC_FORMATS = [\n  'Build',\n  'Error',\n  'Alert',\n  'Test',\n  // system startup and components\n  'System',\n  'Server',\n  'Database',\n  'Network',\n  // urnet framework\n  'UR',\n  'URNET',\n  'URMOD',\n  // application\n  'AppMain',\n  'AppModule',\n  'AppState',\n  'AppCore',\n  'DataCore',\n  // user interface\n  'UI',\n  // events\n  'Phase',\n  'Event',\n  'Stream'\n];\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTERM_COLORS.TagBuild = TERM_COLORS.TagGray;\nTERM_COLORS.TagError = TERM_COLORS.TagRed;\nTERM_COLORS.TagAlert = TERM_COLORS.TagOrange;\nTERM_COLORS.TagTest = TERM_COLORS.TagRed;\n//\nTERM_COLORS.TagSystem = TERM_COLORS.TagGray;\nTERM_COLORS.TagServer = TERM_COLORS.TagGray;\nTERM_COLORS.TagDatabase = TERM_COLORS.TagCyan;\nTERM_COLORS.TagNetwork = TERM_COLORS.TagCyan;\n//\nTERM_COLORS.TagUR = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURNET = TERM_COLORS.TagBlue;\nTERM_COLORS.TagURMOD = TERM_COLORS.TagBlue;\n//\nTERM_COLORS.TagAppMain = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppModule = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppState = TERM_COLORS.TagGreen;\nTERM_COLORS.TagAppCore = TERM_COLORS.TagGreen;\nTERM_COLORS.TagDataCore = TERM_COLORS.TagGreen;\n//\nTERM_COLORS.TagUI = TERM_COLORS.TagPurple;\n//\nTERM_COLORS.TagPhase = TERM_COLORS.TagPink;\nTERM_COLORS.TagEvent = TERM_COLORS.TagPink;\nTERM_COLORS.TagStream = TERM_COLORS.TagPink;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCSS_COLORS.TagDebug = `color:#fff;background-color:IndianRed;${CSS_COMMON}`;\nCSS_COLORS.TagWarning = `color:#fff;background:linear-gradient(\n  -45deg,\n  rgb(29,161,242),\n  rgb(184,107,107),\n  rgb(76,158,135)\n);${CSS_COMMON}`;\nCSS_COLORS.TagTest = CSS_COLORS.TagRed;\n//\nCSS_COLORS.TagSystem = CSS_COLORS.TagGray;\nCSS_COLORS.TagServer = CSS_COLORS.TagGray;\nCSS_COLORS.TagDatabase = CSS_COLORS.TagCyan;\nCSS_COLORS.TagNetwork = CSS_COLORS.TagCyan;\n//\nCSS_COLORS.TagUR = `color:CornflowerBlue;border:1px solid CornflowerBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURNET = `color:#fff;background-color:MediumSlateBlue;${CSS_COMMON}`;\nCSS_COLORS.TagURMOD = `color:#fff;background:linear-gradient(\n  -45deg,\n  CornflowerBlue 0%,\n  LightSkyBlue 25%,\n  RoyalBlue 100%\n);${CSS_COMMON}`;\nCSS_COLORS.TagAppMain = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppModule = CSS_COLORS.TagGreen;\nCSS_COLORS.TagAppState = `color:#fff;background-color:Navy;${CSS_COMMON}`;\nCSS_COLORS.TagUI = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagEvent = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagStream = CSS_COLORS.TagDkOrange;\nCSS_COLORS.TagPhase = `color:#fff;background-color:MediumVioletRed;${CSS_COMMON}`;\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM_COLORS,\n  CSS_COLORS\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/* added for pull request #81 so 'npm run lint' test appears clean */\n/* eslint-disable no-unused-vars */\n\nconst IS_NODE = typeof window === 'undefined';\nconst IS_MOBILE =\n  !IS_NODE &&\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\nconst D_CONSOLE = require('./declare-colors.js');\nconst { TERM_COLORS, CSS_COLORS } = D_CONSOLE;\n\nconst DEFAULT_PADDING = IS_NODE\n  ? 10 // nodejs\n  : 8; // not nodejs\nconst DEFAULT_SPACE = IS_NODE\n  ? ' '.padStart(DEFAULT_PADDING, ' ')\n  : ' '.padStart(DEFAULT_PADDING + 4, ' ');\n\nconst DEFAULT_COLOR = 'TagNull';\n\n// div console\nconst HTCONSOLES = {};\n\n/// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** define\n */\nconst SHOW = true;\nconst HIDE = false;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  'UR': [SHOW, 'TagRed'],\n  // SERVERS\n  'APPSRV': [SHOW, 'Yellow'],\n  'GEMSRV': [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\nfunction padString(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  const nbsp = String.fromCharCode(0x00a0); // unicode non-break space\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`;\n  // must be non-node environment, so do dynamic string adjust\n  if (padding === 0) return `${str}`;\n  // if this far, then we're truncating\n  if (len >= padding) str = str.substr(0, padding);\n  else str = str.padEnd(padding, nbsp);\n  return `${str}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** add a color to the PROMPT_DICT for a particular PREFIX */\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) colorTable = IS_NODE ? CSS_COLORS : TERM_COLORS;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor)\n    throw Error(`prompt color ${color} is not defined in either table`);\n  // turn on color prompt\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an array suitable for destructuring inside console.log() in\n *  either Node or the browser with color\n */\nfunction m_MakeColorArray(prompt, colorName) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, colorName);\n  // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n  if (!(dbg || IS_NODE)) return [];\n  return IS_NODE\n    ? [`${color}${padString(prompt)}${reset}   `] // server\n    : [`%c${padString(prompt)}%c `, color, reset]; // browser\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Returns an environment-specific color wrapper function suitable for use\n *  in debug output. Use m_MakeColorArray() for browser output.\n */\nfunction m_MakeColorPromptFunction(prompt, colorName, opt = {}) {\n  const textColor = opt.color || 'Reset';\n  const dim = opt.dim || false;\n  return IS_NODE\n    ? (str, ...args) => {\n        if (args === undefined) args = '';\n        let TAG = TERM_COLORS[colorName];\n        let TEXT = TERM_COLORS[textColor];\n        let RST = TERM_COLORS.Reset;\n        let PR = padString(prompt);\n        if (dim) TEXT += TERM_COLORS.Dim;\n        console.log(`${RST}${TAG}${PR}${RST}${TEXT}    ${str}`, ...args, RST);\n      }\n    : (str, ...args) => {\n        if (args === undefined) args = '';\n        let TEXT = TERM_COLORS[textColor];\n        let RST = CSS_COLORS.Reset;\n        let PR = padString(prompt);\n        console.log(`%c${PR}%c%c ${str}`, RST, TEXT, ...args);\n      };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_GetDivText(id) {\n  const el = document.getElementById(id);\n  if (!el) {\n    console.log(`GetDivText: element ${id} does not exist`);\n    return undefined;\n  }\n  const text = el.textContent;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return {};\n  }\n  el.style.whiteSpace = 'pre';\n  el.style.fontFamily = 'monospace';\n  return { element: el, text };\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextJumpRow(row, lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (text === undefined) return lineBuffer;\n  // convert content to line buffer\n  if (lineBuffer.length === 0) {\n    console.log(`initializing linebuffer from element id='${id}'`);\n    lineBuffer = text.split('\\n'); // creates a NEW array\n  }\n  // handle line underflow in buffer if row exceeds line buffer\n  if (row > lineBuffer.length - 1) {\n    const count = row + 1 - lineBuffer.length;\n    for (let i = count; i > 0; i--) lineBuffer.push('');\n  }\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_HTMLTextPrint(str = '', lineBuffer, id) {\n  const { element, text } = m_GetDivText(id);\n  if (!text) return lineBuffer;\n  // append text\n  lineBuffer.push(str);\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Function to modify the text area of a passed HTML element. Always return\n *  lineBuffer so we can reassign the reference, as the array often changes.\n */\nfunction m_HTMLTextPlot(str = '', lineBuffer, id, row = 0, col = 0) {\n  const { element, text } = m_GetDivText(id);\n  if (!element) return lineBuffer;\n  if (text === undefined) {\n    console.log(`HTMLTextOut: element ${id} does not have textContent`);\n    return lineBuffer;\n  }\n  // ensure row exists\n  lineBuffer = m_HTMLTextJumpRow(row, lineBuffer, id);\n  // fetch line\n  let line = lineBuffer[row];\n  if (line === undefined) {\n    console.log(`HTMLTextOut: unexpected line error for line ${row}`);\n    return lineBuffer;\n  }\n  // handle column underflow in line if col exceeds line length\n  if (col + str.length > line.length + str.length) {\n    for (let i = 0; i < col + str.length - line.length; i++) line += ' ';\n  }\n  // insert str into line\n  let p1 = line.substr(0, col);\n  let p3 = line.substr(col + str.length, line.length - (col + str.length));\n  lineBuffer[row] = `${p1}${str}${p3}`;\n  // write buffer back out\n  element.textContent = lineBuffer.join('\\n');\n  return lineBuffer;\n}\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log(). This is supported\n *  in Chrome and Safari (somewhat), but not in Firefox as of last testing.\n *\n *  To create the function, provide a short PROMPT. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all PROMPTS in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allow modification of the PROMPT_DICT\n */\nfunction makeStyleFormatter(prompt, tagColor) {\n  if (prompt.startsWith('UR') && tagColor === undefined) tagColor = 'TagUR';\n  let outArray = m_MakeColorArray(prompt, tagColor);\n  if (outArray.length === 0) return () => [];\n  if (IS_MOBILE) outArray = [`${prompt}:`];\n  const f = (str, ...args) => [...outArray, str, ...args];\n  f._ = `\\n${DEFAULT_SPACE}`;\n  return f;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeErrorFormatter(pr = '') {\n  const bg = 'rgba(255,0,0,1)';\n  const bga = 'rgba(255,0,0,0.15)';\n  pr = `ERROR ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return an array that can be spread like console.log(...arr) */\nfunction makeWarningFormatter(pr = '') {\n  const bg = 'rgba(255,150,0,1)';\n  const bga = 'rgba(255,150,0,0.15)';\n  pr = `WARN ${pr}`.trim();\n  return (str, ...args) => [\n    `%c${pr}%c${str}`,\n    `color:#fff;background-color:${bg};padding:3px 7px 3px 10px;border-radius:10px 0 0 10px;`,\n    `color:${bg};background-color:${bga};padding:3px 5px;`,\n    ...args\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** use like console.log(...debugFormatter('prompt'), 'la la la'); */\nfunction dbgPrint(pr, bg = 'MediumVioletRed') {\n  return [\n    `%c${pr}%c`,\n    `color:#fff;background-color:${bg};padding:3px 10px;border-radius:10px;`,\n    'color:auto;background-color:auto'\n  ];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction colorTagString(str, tagColor) {\n  return m_MakeColorArray(str, tagColor);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to directly print to console instead of returning an array.\n *  This works better for NodeJS since the empty [] still results in output\n *  unlike the browser. Use makeStyleFormatter for browsers\n */\nfunction makeTerminalOut(prompt, tagColor = DEFAULT_COLOR) {\n  const wrap = m_MakeColorPromptFunction(prompt, tagColor);\n  wrap.warn = m_MakeColorPromptFunction(prompt, 'TagYellow', { color: 'Yellow' });\n  wrap.error = m_MakeColorPromptFunction(prompt, 'TagRed', { color: 'Red' });\n  wrap.fail = m_MakeColorPromptFunction(prompt, 'Red', { color: 'Red' });\n  wrap.pass = m_MakeColorPromptFunction(prompt, 'Green', { color: 'Green' });\n  wrap.info = m_MakeColorPromptFunction(prompt, 'TagGray', { dim: true });\n  wrap.DIM = '\\x1b[2m'; // dim text\n  wrap.BRI = '\\x1b[1m'; // bright text\n  wrap.RST = '\\x1b[0m'; // reset text\n  return wrap;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return function to print a string, given a DIV id and optional row/column.\n */\nfunction makeHTMLConsole(divId, row = 0, col = 0) {\n  const ERP = makeStyleFormatter('makeHTMLConsole', 'Red');\n  let buffer = [];\n  if (typeof divId !== 'string') throw Error('bad id');\n  if (!document.getElementById(divId)) {\n    console.warn(...ERP(`id '${divId}' doesn't exist`));\n    return {\n      print: () => {},\n      plot: () => {},\n      clear: () => {},\n      gotoRow: () => {}\n    };\n  }\n  let hcon;\n  if (HTCONSOLES[divId]) {\n    hcon = HTCONSOLES[divId];\n  } else {\n    hcon = {\n      buffer: [],\n      plot: (str, y = row, x = col) => {\n        buffer = m_HTMLTextPlot(str, buffer, divId, y, x);\n      },\n      print: str => {\n        buffer = m_HTMLTextPrint(str, buffer, divId);\n      },\n      clear: (startRow = 0, endRow = buffer.length) => {\n        buffer.splice(startRow, endRow);\n      },\n      gotoRow: row => {\n        buffer = m_HTMLTextJumpRow(row, buffer, divId);\n      }\n    };\n    HTCONSOLES[divId] = hcon;\n  }\n  return hcon;\n}\n\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Print all Tag Colors\n */\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE\n      ? [`${padString(out)} - (node) ${color}${key}${reset}`]\n      : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n}\n\n/// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  padString,\n  makeStyleFormatter,\n  makeErrorFormatter,\n  makeWarningFormatter,\n  dbgPrint,\n  makeTerminalOut,\n  makeHTMLConsole,\n  printTagColors,\n  colorTagString\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  description\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/// PARSER INPUT NORMALIZER ////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** This function takes a multi-line string and performs the following operations:\n *  - Makes sure all newline types with '\\n'\n *  - Removes all tab characters\n *  - Processes comma and colon delimited sequences in each line:\n *  - Removes whitespace around each delimiter except when inside quotes\n *  - Collapses all internal whitespace to a single space\n *  - Ensures that there is a trailing newline\n * (written, with effort, by ChatGPT4)\n * @param {string} str - The input string to be normalized.\n * @return {string} - The normalized string.\n */\nfunction PreprocessDataText(str) {\n  let normalizedStr = str.replace(/\\r\\n|\\r/g, '\\n'); // conform newlines\n  normalizedStr = normalizedStr // remove trailing/preserve leading whitespace\n    .split('\\n')\n    .map(line => line.replace(/\\s+$/, '')) // remove trailing\n    .map(line => line.replace(/^\\s+/, '')) // remove leading\n    .join('\\n');\n  normalizedStr = normalizedStr.replace(/\\t/g, '  '); // replace tabs with 2 spaces\n  let lines = normalizedStr.split('\\n'); // split string into lines\n  /** process whitespace around delimiters */\n  const processDelimited = (line, delimiter) => {\n    let parts = line.split(delimiter); // split lines based on delimiter\n    for (let i = 0; i < parts.length; i++) {\n      parts[i] = parts[i].trim();\n      parts[i] = parts[i].replace(/\\s+/g, ' ');\n    }\n    return parts.join(delimiter);\n  };\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = processDelimited(lines[i], ',', { preserve: true });\n    lines[i] = processDelimited(lines[i], ':', { preserve: true });\n  }\n  normalizedStr = lines.join('\\n').trim();\n  return normalizedStr + '\\n';\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = {\n  PreprocessDataText\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  entrypoint for client\n\n  when making live changes, make sure that the ur builder is also running and\n  users of this library are watching for changes to the ur library\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n// note: cjs-style modules in 'common' can not be destructured on import\nimport PROMPTS from '../common/util-prompts.js';\nconst { makeStyleFormatter } = PROMPTS;\n// cjs-style modules\nimport TEXT from '../common/util-text.js';\n// typescript classes\nimport OpSequencer from '../common/class-op-seq.ts';\nimport StateMgr from '../common/class-state-mgr.ts';\nimport * as UID from '../common/lib-uid.ts';\nimport NetSocket from '../common/class-urnet-socket.ts';\nimport NetEndpoint from '../common/class-urnet-endpoint.ts';\nimport NetPacket from '../common/class-urnet-packet.ts';\nimport * as URNET from '../common/constants-urnet-web.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PR = makeStyleFormatter('UR', 'TagCyan');\nconst CLASS = {\n  OpSequencer,\n  StateMgr,\n  NetSocket,\n  NetEndpoint,\n  NetPacket\n};\nconst LIB = {\n  UID\n};\nconst CONSTANTS = {\n  urnet: URNET\n};\n\n/// TEST METHODS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction ClientTest(): void {\n  console.log(...PR('System Integration of new URSYS module successful!'));\n  // console.log(...PR('@ursys/core integration...works?'));\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // cjs modules\n  PROMPTS,\n  TEXT,\n  // typescript classes, libraries\n  CONSTANTS,\n  CLASS,\n  LIB,\n  // formatting\n  makeStyleFormatter as ConsoleStyler, // style formatter for browser\n  // temporary test exports\n  StateMgr,\n  ClientTest\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Operation Sequencer\n\n  A simple sequencer that is initialized with TOpNode objects:\n  { name, data? } one after the other with addOp(). \n\n  The sequencer can be started, stopped, and moved forward and backward, \n  and can notify subscribers when the current operation changes.\n\n  usage:\n\n  const sequencer = new OpSequencer('MY SEQUENCER'); // unique UC name\n  sequencer.addOp('op1', { ... });\n  sequencer.addOp('op2', { ... });\n  sequencer.subscribe('op1', (newOp, oldOp) => { ... });\n  const op = sequencer.start();\n  while (op) op = sequencer.next();\n  sequencer.dispose();\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES /////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TOpSeqMap = Map<string, OpSequencer>;\ntype TOpChangeFunc = (newOp: TOpNode, oldOp: TOpNode, ops?: OpSequencer) => void;\ntype TDataObj = { [key: string]: any };\ntype TOpNode = {\n  data: TDataObj;\n  _seqName?: string;\n  _opName?: string;\n  _opIndex?: number;\n};\ntype TNodeOptions = {\n  mutable?: boolean; // data is frozen by default\n};\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst OPSEQS: TOpSeqMap = new Map(); // lookup table of operation sequencers\n\n/// HELPER FUNCTIONS //////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateSeqName(sn: string) {\n  const fn = 'm_ValidateSeqName';\n  const pcErr = 'name must be PascalCase string';\n  if (sn === '') throw Error(`${fn}: ${pcErr}`);\n  if (sn === undefined) throw Error(`${fn}: ${pcErr}`);\n  if (typeof sn !== 'string') throw Error(`${fn}: ${pcErr}`);\n  if (sn !== sn[0].toUpperCase() + sn.slice(1)) throw Error(`${fn}: ${pcErr}`);\n  if (sn.trim() !== sn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateActiveSeq(seq: OpSequencer) {\n  if (seq instanceof OpSequencer) {\n    if (seq._disposed) throw Error(`sequencer ${seq.seqName} is disposed`);\n    else return;\n  }\n  throw Error('not a sequence instance or undefined');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction m_ValidateNodeName(nn: string) {\n  const fn = 'm_ValidateNodeName';\n  if (nn === '') throw Error(`${fn}: name must be lc string`);\n  if (nn === undefined) throw Error(`${fn}: name must be lc string`);\n  if (typeof nn !== 'string') throw Error(`${fn}: name must be lc string`);\n  if (nn !== nn.toLowerCase()) throw Error(`${fn}: name must be lc`);\n  if (nn.trim() !== nn)\n    throw Error(`${fn}: name must not have leading/trailing spaces`);\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass OpSequencer {\n  ops: TOpNode[]; // array of operations\n  seqName: string; // sequencer name\n  lastOp: TOpNode; // last operation\n  currentOp: TOpNode; // current operation\n  opIndex: number; // current operation index\n  opsMap: Map<string, number>; // map opname to index in ops array\n  subs: Map<string, Set<TOpChangeFunc>>; // map opname to set of subscribers\n  _disposed: boolean; // true if disposed\n\n  constructor(seqName: string) {\n    m_ValidateSeqName(seqName);\n    seqName = seqName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (OPSEQS.has(seqName)) {\n      console.warn(\n        `(not an error) '${seqName}' construction duplicate, returning existing instance`\n      );\n      return OPSEQS.get(seqName);\n    }\n    // otherwise, create a new instance and save it\n    this.seqName = seqName;\n    this.ops = [];\n    this.opsMap = new Map();\n    this.opIndex = -1;\n    this.currentOp = null;\n    this.lastOp = null;\n    this.subs = new Map();\n    this._disposed = false;\n    OPSEQS.set(seqName, this);\n  }\n\n  /* --- add nodes --- */\n\n  /** given nodeName and a source TOpNode, add a clone of the source node to the sequencer */\n  addOp(name: string, data: TDataObj, opt?: TNodeOptions): TOpNode {\n    const fn = 'addOp';\n    //\n    if (data === undefined) throw Error(`${fn}: arg2 must be TOpNode`);\n    if (typeof name !== 'string') throw Error(`${fn}: arg1 must be name:string`);\n    if (typeof data._name === 'string') throw Error(`${fn}: node ${name} reused`);\n    if (data._index !== undefined) throw Error(`${fn}: node ${name} reused`);\n    //\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    //\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.hasOp(name)) throw Error(`${fn}: node '${name}' already exists`);\n    //\n    const index = this.ops.length;\n    this.opsMap.set(name, index); // save lookup index by name\n    const newData = { ...data }; // copy of user data\n    if (opt?.mutable) Object.freeze(newData); // default is frozen\n    const newNode: TOpNode = {\n      _opIndex: index,\n      _seqName: this.seqName,\n      _opName: name,\n      data: newData\n    };\n    this.ops.push(newNode);\n    return newNode;\n  }\n\n  deleteOp(name: string): void {\n    const fn = 'deleteOp';\n    console.error(`${fn}: not implemented by design`);\n  }\n\n  /* --- access operations --- */\n\n  data(key?: string): TDataObj {\n    m_ValidateActiveSeq(this);\n    if (typeof key === 'string') return this.currentOp.data[key];\n    return this.currentOp.data;\n  }\n\n  length(): number {\n    m_ValidateActiveSeq(this);\n    return this.ops.length;\n  }\n\n  /* --- sequencer operations --- */\n\n  start(): TOpNode {\n    const fn = 'start';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex !== -1) throw Error(`${fn}: sequencer already started`);\n    if (this.ops.length === 0) throw Error(`${fn}: no operations to run`);\n    this.opIndex = 0;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  current(): TOpNode {\n    const fn = 'current';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  stop(): TOpNode {\n    const fn = 'stop';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error('stop: sequencer not started');\n    this.opIndex = -1;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  next(): TOpNode {\n    const fn = 'next';\n    if (this.opIndex === -1) return this.start();\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === this.ops.length - 1) return undefined;\n    ++this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  previous(): TOpNode {\n    const fn = 'previous';\n    m_ValidateActiveSeq(this);\n    if (this.opIndex === -1) throw Error(`${fn}: sequencer not started`);\n    if (this.opIndex === 0) return undefined;\n    --this.opIndex;\n    this._update();\n    this._notifyChange();\n    return this.ops[this.opIndex];\n  }\n\n  /* --- node events --- */\n\n  subscribe(opName: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    if (!this.subs.has(opName)) this.subs.set(opName, new Set());\n    this.subs.get(opName).add(subf);\n  }\n\n  unsubscribe(name: string, subf: TOpChangeFunc): void {\n    const fn = 'onEnter';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(name);\n    if (!this.hasOp(name)) throw Error(`${fn}: node '${name}' does not exist`);\n    const subs = this.subs.get(name);\n    if (subs.has(subf)) subs.delete(subf);\n  }\n\n  _update() {\n    const fn = '_update';\n    m_ValidateActiveSeq(this);\n    this.lastOp = this.currentOp;\n    this.currentOp = this.ops[this.opIndex];\n  }\n\n  _notifyChange(): void {\n    const fn = '_notifyChange';\n    m_ValidateActiveSeq(this);\n    const subs = this.subs.get(this.currentOp._opName);\n    if (subs) subs.forEach(subf => subf(this.currentOp, this.lastOp, this));\n  }\n\n  /* --- node utilities --- */\n\n  hasOp(opName: string): boolean {\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    return this.ops.some(op => op._opName === opName);\n  }\n\n  matchOp(opName: string): boolean {\n    const fn = 'matchOp';\n    m_ValidateActiveSeq(this);\n    m_ValidateNodeName(opName);\n    if (!this.hasOp(opName)) throw Error(`${fn}: node '${opName}' does not exist`);\n    return opName === this.ops[this.opIndex]._opName;\n  }\n\n  /** remove all nodes and subscribers */\n  dispose(): void {\n    OpSequencer.DeleteSequencer(this.seqName);\n  }\n\n  /* --- static utilities --- */\n\n  static GetSequencer(seqName: string): OpSequencer {\n    m_ValidateSeqName(seqName);\n    return OPSEQS.get(seqName);\n  }\n\n  static DeleteSequencer(seqName: string): void {\n    const seq = OpSequencer.GetSequencer(seqName);\n    seq.opsMap.clear();\n    seq.subs.forEach(subs => subs.clear());\n    seq.ops.length = 0;\n    seq._disposed = true;\n    OPSEQS.delete(seqName);\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default OpSequencer;\nexport type { TOpNode, TOpChangeFunc };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS State Manager Class\n  ported from GEMSTEP circa 2021\n\n  For use by modular application core features that require a centralized\n  state object that can be shared between modules. It manages named groups\n  of flattened state (react compatible) that are not allowed to have\n  overlapping property names across any group. This is to prevent lazy\n  reuse of property names in different parts of the app.\n\n  In general, methods that begin with _ are the tricky ones that are used\n  internally by an \"appcore\" module that is the single source of initialization\n  and truth. \n\n  DATA STRUCTURES\n\n  * vmStateEvent is an object with event-specific properties. When sent\n    to subscribers, it contains a groupName property matching the name of\n    the StateManager instance (e.g. LOCALE). This is not required (or even\n    settable) when using SendState( vmStateEvent )\n  * The difference between vmStateEvent and vmState is that the latter is\n    the complete state object, whereas the event has the same shape but\n    only includes the changed properties\n\n  SIMPLE EXAMPLE\n\n  // in managing appcore module\n  const STORE = new StateMgr('ScriptWizard');\n  STORE._initializeState({\n    prop1: 'value1',\n    prop2: 'value2'\n  });\n  const { prop1, prop2 } = STORE.State();\n\n  // in read-only module\n  const OTHER = StatMgr.GetStateManager('ScriptWizard');\n  const { prop1, prop2 } = OTHER.State();\n  \n  API REFERENCE\n\n  State: groupName => TStateObj;\n  SendState: TStateObj => void;\n  subscribeState: TStateChangeFunc => void;\n  unsubscribeState: TStateChangeFunc => void;\n  queueEffect: TEffectFunc => void;\n\n  INTERNAL API for APPCORE MANAGERS ONLY\n\n  _initializeState: TStateObj => void;\n  _setState: TStateObj => void;\n  _insertStateEvent: (TStateObj, TEffectFunc) => void;\n  _interceptState: TTapFunc => void;\n  _isValidState: TStateObj => boolean;\n  _mergeState: TStateObj => TStateObj;\n  _notifySubs: TStateObj => void;\n  _enqueue: TQueuedAction => void;\n  _dequeue: void => void;\n  _doEffect: void => void;\n\n  STATIC API\n  \n  GetStateManager: groupName => StateMgr;\n  GetStateData: groupName => TStateObj;\n  GetInstance: groupName => StateMgr;\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TStateObj = { [key: string]: any };\ntype TGroupName = string; // must be uppercase\ntype TPropName = string; // must be lowercase\ntype TGroupMap = Map<TGroupName, StateMgr>; // group name --> class instance\ntype TUsedProps = Map<TPropName, TGroupName>; // unique prop --> owning group\ntype TStateChangeFunc = (newState: TStateObj, curState: TStateObj) => void;\ntype TEffectFunc = () => void;\ntype TTapFunc = (state: TStateObj) => void;\ntype TQueuedAction = { stateEvent: TStateObj; callback: Function };\ninterface IStateMgr {\n  State: (key: string) => TStateObj;\n  SendState: (vmStateEvent: TStateObj, callback: Function) => void;\n  subscribeState: (subFunc: TStateChangeFunc) => void;\n  unsubscribeState: (subFunc: TStateChangeFunc) => void;\n  queueEffect: (effectFunc: TEffectFunc) => void;\n  _initializeState: (stateObj: TStateObj) => void;\n  _setState: (vmState: TStateObj) => void;\n  _interceptState: (tapFunc: TTapFunc) => void;\n  _insertStateEvent: (stateEvent: TStateObj, callback: TEffectFunc) => void;\n  _isValidState: (stateObj: TStateObj) => boolean;\n  _mergeState: (stateObj: TStateObj) => TStateObj;\n  _notifySubs: (stateObj: TStateObj) => void;\n  _enqueue: (action: TQueuedAction) => void;\n  _dequeue: () => void;\n  _doEffect: () => void;\n}\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst VM_STATE: TStateObj = {}; // global viewstate\nconst GROUPS: TGroupMap = new Map(); // lookup table of state managers\nconst USED_PROPS: TUsedProps = new Map(); // owner of registered properties\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass StateMgr {\n  name: string; // the name of this state group\n  init: boolean; // true if _initializeState has been called\n  subs: Set<TStateChangeFunc>;\n  queue: any[]; // queued state changes\n  taps: TTapFunc[]; // queued state interceptor hooks\n  effects: TEffectFunc[]; // queued side effects\n\n  /// CONSTRUCTOR /////////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  constructor(groupName: TGroupName) {\n    if (typeof groupName !== 'string') throw Error('groupName must be a string');\n    groupName = groupName.trim().toUpperCase();\n    // return an existing instance if it exists\n    if (GROUPS.has(groupName)) {\n      console.warn(\n        `(not an error) '${groupName}' construction duplicate, returning existing instance`\n      );\n      return GROUPS.get(groupName);\n    }\n    // otherwise create a new instance and save it\n    this.name = groupName;\n    this.init = false;\n    this.subs = new Set();\n    this.queue = [];\n    this.taps = [];\n    this.effects = [];\n    VM_STATE[this.name] = {};\n    // bind 'this' for use with async code\n    // if you don't do this, events will probably not have instance context\n    this.state = this.state.bind(this);\n    this.sendState = this.sendState.bind(this);\n    this.subscribeState = this.subscribeState.bind(this);\n    this.unsubscribeState = this.unsubscribeState.bind(this);\n    this.queueEffect = this.queueEffect.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n    this._setState = this._setState.bind(this);\n    this._insertStateEvent = this._insertStateEvent.bind(this);\n    this._interceptState = this._interceptState.bind(this);\n    this._isValidState = this._isValidState.bind(this);\n    this._mergeState = this._mergeState.bind(this);\n    this._notifySubs = this._notifySubs.bind(this);\n    this._enqueue = this._enqueue.bind(this);\n    this._dequeue = this._dequeue.bind(this);\n    this._doEffect = this._doEffect.bind(this);\n    // save the instance\n    GROUPS.set(this.name, this);\n  }\n\n  /// MAIN CLASS METHODS //////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a COPY of the current clonedEvent */\n  state(key: string): TStateObj {\n    // const state = { ...VM_STATE[this.name] };\n    const state = this._derefProps({ ...VM_STATE[this.name] });\n    if (typeof key === 'string' && key.length > 0) return state[key];\n    return state;\n  }\n\n  /** Handle a clonedEvent update from a subscribing module. The incoming\n   *  vmstateEvent is checked against the master state object to ensure it\n   *  contains valid keys. Any filter functions are allowed to mutate a copy of\n   *  the incoming state event.\n   *  @param {object} vmStateEvent - object with group-specific props\n   */\n  sendState(vmStateEvent: TStateObj, callback: Function) {\n    if (this._isValidState(vmStateEvent)) {\n      const clonedEvent = this._cloneStateObject(vmStateEvent);\n      this.taps.forEach(tap => tap(clonedEvent));\n      // queue the action for processing\n      const action = { stateEvent: clonedEvent, callback };\n      this._enqueue(action);\n    } else throw Error('SendState: invalid vmState update received, got:');\n  }\n\n  /** Subscribe to state. The subscriber function looks like:\n   *  ( vmStateEvent, currentState ) => void\n   */\n  subscribeState(subFunc: TStateChangeFunc) {\n    if (typeof subFunc !== 'function') throw Error('subscriber must be function');\n    if (this.subs.has(subFunc)) console.warn('duplicate subscriber function');\n    this.subs.add(subFunc);\n  }\n\n  /** Unsubscribe state */\n  unsubscribeState(subFunc: TStateChangeFunc) {\n    if (!this.subs.delete(subFunc))\n      console.warn('function not subscribed for', this.name);\n  }\n\n  /** When executing a side effect from a component, use this method to\n   *  hold it until after all state updates have completed, so the DOM\n   *  is stable\n   */\n  queueEffect(effectFunc: TEffectFunc) {\n    if (typeof effectFunc !== 'function') throw Error('effect must be a function');\n    this.effects.push(effectFunc);\n    this._doEffect();\n  }\n\n  /// CLASS HELPER METHODS ////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Set the state object directly. used to initialize the state from within\n   *  an appcore module. skips state validation because the VM_STATE entry\n   *  is an empty object\n   */\n  _initializeState(stateObj: TStateObj) {\n    // only allow this once per instance\n    if (this.init)\n      throw Error(`_initializeState: store '${this.name}' already initialized`);\n    // validate stateObj\n    Object.keys(stateObj).forEach(k => {\n      // must be all lowercase\n      if (k.toLowerCase() !== k)\n        throw Error(`_initializeState: props must be lowercase, not '${k}'`);\n      // must not contain undefined keys\n      if (stateObj[k] === undefined)\n        throw Error(\n          `_initializeState: prop '${k}' value can't be undefined (use null instead)`\n        );\n    });\n    // check that VM_STATE entry is valid (should be created by constructor)\n    if (VM_STATE[this.name]) {\n      Object.keys(stateObj).forEach(k => {\n        // skip the viewStateEvent key\n        if (k === '_group') return;\n        // check for duplicate keys. they must be unique across ALL state groups\n        const assTo = USED_PROPS.get(k);\n        if (assTo !== undefined) throw Error(`${k} already assigned to ${assTo}`);\n        // register the property name so it can't be used by another manager\n        USED_PROPS.set(k, this.name);\n      });\n      VM_STATE[this.name] = stateObj; // initialize!\n      this.init = true;\n    } else throw Error(`${this.name} does't exist in VM_STATE`);\n  }\n\n  /** In some cases, we want to update state but not trigger subscribers\n   *  related to it. Alias for _mergeState()\n   */\n  _setState(vmState: TStateObj) {\n    this._mergeState(vmState);\n  }\n\n  /** When SendState() is invoked, give the instance manager a change to\n   *  inspect the incoming state and do a side-effect and/or a filter.\n   *  They will run in order of interceptor registration\n   *  @param {function} tapFunc - receive stateEvent to mutate or act-on\n   */\n  _interceptState(tapFunc: TTapFunc) {\n    if (typeof tapFunc !== 'function') throw Error(`'${tapFunc}' is not a function`);\n    this.taps.push(tapFunc);\n  }\n\n  /** Allow synthesis of a state event by adding to queue without\n   *  immediately executing it. For use by _interceptState only.\n   *  Creates an action { stateObj, callback }\n   */\n  _insertStateEvent(stateEvent: TStateObj, callback: TEffectFunc) {\n    this._enqueue({ stateEvent, callback });\n  }\n\n  /** Return true if the event object conforms to expectations (see below) */\n  _isValidState(stateObj: TStateObj) {\n    // test 1 - is this event handled this manager instance?\n    // const grp = stateObj._group.trim().toUpperCase();\n    // if (grp !== this.name) return false;\n\n    // test 2 - any keys must already be defined in the store to\n    // avoid typo-based errors and other such crapiness\n    const curState = VM_STATE[this.name];\n    let keysOk = true;\n    Object.keys(stateObj).forEach(k => {\n      const keyTest = keysOk && curState[k] !== undefined;\n      if (keyTest === false) console.warn(`isValidState: '${k}' not a valid key`);\n      keysOk = keysOk && keyTest;\n    });\n    return keysOk;\n  }\n\n  /** Scan the object properties for arrays, and mutate with a new array.\n   *  In the case of an array containing references, the references will still\n   *  be the same but the array itself will be different\n   */\n  _derefProps(stateObj: TStateObj) {\n    Object.keys(stateObj).forEach(k => {\n      if (Array.isArray(stateObj[k])) stateObj[k] = [...stateObj[k]];\n    });\n    return stateObj;\n  }\n\n  /** Utility method to clone state event. It handles array cloning as well but\n   *  is otherwise a shallow clone\n   */\n  _cloneStateObject(stateObj: TStateObj) {\n    const clone = this._derefProps({ ...stateObj });\n    return clone;\n  }\n\n  /** Take a clonedEvent event object and update the VM_STATE entry with\n   *  its property values. This creates an entirely new state object\n   */\n  _mergeState(stateObj: TStateObj) {\n    if (!this._isValidState(stateObj)) return undefined;\n    // first make a new state object with copies of arrays\n    const newState = this._derefProps({\n      ...VM_STATE[this.name],\n      ...stateObj\n    });\n    // set the state\n    VM_STATE[this.name] = newState;\n    // also return the new state object\n    return newState;\n  }\n\n  /** Forward the event to everyone. The vmStateEvent object contains\n   *  properties that changed only, appending a 'stateGroup' identifier\n   *  that tells you who sent it. Sends a read-only copy.\n   */\n  _notifySubs(stateObj: TStateObj) {\n    // fire notification in the next event cycle to make sure\n    // that prior unsubscribes took effect\n    setTimeout(() => {\n      const subs = [...this.subs.values()];\n      stateObj.stateGroup = this.name; // mixed-case names reserved by system\n      // also include the total state\n      const currentState = this._derefProps({ ...VM_STATE[this.name] });\n      subs.forEach(sub => sub(stateObj, currentState));\n    });\n  }\n\n  /** Placeholder queueing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _enqueue(action: TQueuedAction) {\n    const { stateEvent, callback } = action;\n    if (!this._isValidState(stateEvent)) {\n      console.warn('bad vmStateEvent', stateEvent);\n      return;\n    }\n    if (callback && typeof callback !== 'function') {\n      console.warn('call must be function, not', typeof callback, callback);\n      return;\n    }\n    this.queue.push(action);\n    // placeholder processes immediately\n    this._dequeue();\n  }\n\n  /** Placeholder dequeing system that doesn't do much now.\n   *  An action is { vmStateEvent, callback }\n   */\n  _dequeue() {\n    const callbacks = [];\n    // iterate over all actions in queue\n    let action = this.queue.shift();\n    while (action !== undefined) {\n      const { vmStateEvent, callback } = action;\n      this._mergeState(vmStateEvent); // merge partial state into state\n      this._notifySubs(vmStateEvent); // send partial state to subs\n      if (typeof callback === 'function') callbacks.push(callback);\n      // get next action in queue\n      action = this.queue.shift();\n    }\n    // issues callbacks after ALL actions have completed\n    callbacks.forEach(f => f());\n    this._doEffect();\n  }\n\n  /** execute effect functions that have been queued, generally if there\n   *  are no pending state changes\n   */\n  _doEffect() {\n    if (this.queue.length > 0) return;\n    setTimeout(() => {\n      let effect = this.effects.shift();\n      while (effect !== undefined) {\n        effect();\n        effect = this.effects.shift();\n      }\n    });\n  }\n\n  /// STATIC METHODS //////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** Return a state manager instance if it exists, undefined if not. Throws\n   *  errors if there are issues with the name */\n  static GetStateManager(groupName: string): StateMgr {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    return GROUPS[bucket];\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a locked copy of the state of a particular named state group.\n   *  Unlike GetStateManager, this returns just the data object.\n   */\n  static GetStateData(groupName: string) {\n    if (typeof groupName !== 'string') throw Error(`${groupName} is not a string`);\n    const bucket = groupName.trim().toUpperCase();\n    if (bucket !== groupName)\n      throw Error(`groupNames should be all uppercase, not ${bucket}`);\n    const state = VM_STATE[bucket];\n    if (!state) throw Error(`stateGroup ${bucket} is not defined`);\n\n    // create a read-only copy of state and set all its properties to\n    // unwriteable\n    const readOnlyState = { ...state };\n    for (const prop of Object.keys(readOnlyState)) {\n      Object.defineProperty(readOnlyState, prop, {\n        writable: false\n      });\n    }\n    return readOnlyState;\n  }\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /** return a Stage Manager instance. This just hides the new operator that\n   *  purposefully always returns an instance of an existing group if it\n   *  already exists\n   */\n  static GetInstance(groupName: string) {\n    return new StateMgr(groupName);\n  }\n}\n\n/// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return a READ-ONLY object containing state for a particular group */\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default StateMgr;\nexport type { TStateObj, TGroupName, TStateChangeFunc, TEffectFunc };\nexport type { IStateMgr };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  Universal ID Module\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype Schema = `${string}:`;\ntype EntityPrefix = `${string}-`;\ntype EntityID = `${number}`;\ntype UniversalID = `${Schema}${EntityPrefix}${EntityID}`;\ntype ShortUID = `${EntityPrefix}${EntityID}`;\n\n/// TYPE ENUMERATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst SCHEMAS = {\n  'meme': {\n    'n': 'node',\n    'e': 'edge',\n    'p': 'project'\n  }\n};\nlet DEFAULT_SCHEMA = '';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst LOG = console.log;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet ID_COUNTER = 0;\n\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Given a string, return the elements of the ID. The schema is optional\n *  and if it isn't present, the schema is an empty string.\n *  The return value is an array of strings: [schema, prefix, id]\n *  If the ID is not in a valid format, an empty array is returned.\n */\nfunction DecodeID(uid: string): string[] {\n  if (!IsValidFormat(uid)) return [];\n  let bits = uid.split(':');\n  if (bits.length < 1 || bits.length > 2) return [];\n  if (bits.length === 1) bits.unshift(''); // empty schema is ok\n  const [schema, prefix] = bits;\n  bits = prefix.split('-');\n  if (bits.length !== 2) return [];\n  // return schema, entity prefix code, entity\n  return [schema, ...bits];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Create a new Short Universal ID string */\nfunction NewID(prefix: string, int?: number): ShortUID {\n  const fn = 'ShortID:';\n  if (int !== undefined) {\n    if (typeof int !== 'number') throw new Error(`${fn} invalid id ${int}`);\n    if (int < 0) throw new Error(`${fn} negative id ${int}`);\n    if (int % 1 !== 0) throw new Error(`${fn} non-integer id ${int}`);\n  } else {\n    int = ID_COUNTER++;\n  }\n  const uid: ShortUID = `${prefix}-${int}`;\n  return uid;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Create a new Full Universal ID string */\nfunction NewFullID(schema: string, prefix: string, int?: number): UniversalID {\n  const fn = 'EncodeID:';\n  const shortUID = NewID(prefix, int);\n  if (!IsValidSchema(schema)) throw new Error(`${fn} unknown schema ${schema}`);\n  if (!IsValidPrefix(`${schema}:${prefix}`))\n    throw new Error(`${fn} unknown prefix ${prefix}`);\n  const uid: UniversalID = `${schema}:${prefix}-${int}`;\n  return uid;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a valid short ID, return a derivative ID with a different prefix */\nfunction PrefixShortID(uid: string, prefix: string): ShortUID {\n  const [_, id] = DecodeID(uid);\n  return NewID(prefix, parseInt(id));\n}\n\n/// VALIDATION ////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return true if the ID is in a valid format.\n *  - full form:  [schema]:[entity_code]-[entity_id]\n *  - short form: [entity_code]-[entity_id]`\n *  must be all lowercase\n */\nfunction IsValidFormat(uid: string): boolean {\n  const isLowerCase = uid === uid.toLowerCase();\n  const isFullForm = /^[\\w]+:[\\w]+-[\\d]+$/.test(uid);\n  const isShortForm = /^[\\w]+-[\\d]+$/.test(uid);\n  return isLowerCase && (isFullForm || isShortForm);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return true if the schema is found in the Schema table. All schemas\n *  are lowercase */\nfunction IsValidSchema(schema: string): boolean {\n  return Object.keys(SCHEMAS).includes(schema);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return true if the entitty prefix is found in the Schema table, optionally\n *  with a schema match string. All prefixes are lowercase */\nfunction IsValidPrefix(sch_pre: string): boolean {\n  const fn = 'IsValidPrefix:';\n  const bits = sch_pre.split(':');\n  if (bits.length > 2) throw new Error(`${fn} Invalid schema prefix ${sch_pre}`);\n  if (bits.length === 1) bits.unshift('');\n  const [schema, prefix] = bits;\n  const isValidSchema = IsValidSchema(schema);\n  const isValidPrefix = Object.keys(SCHEMAS[schema]).includes(prefix);\n  return isValidSchema && isValidPrefix;\n}\n\n/// CONFIGURATION /////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** set the default schema that will be returned by DecodeID if this is\n *  desirable for some reason */\nfunction SetDefaultSchema(schema: string): void {\n  const fn = 'SetDefaultSchema:';\n  if (!IsValidSchema(schema)) throw new Error(`${fn} Invalid schema ${schema}`);\n  DEFAULT_SCHEMA = schema;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** get the default schema, which is manually set by SetDefaultSchema */\nfunction GetDefaultSchema(): string {\n  return DEFAULT_SCHEMA;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  // create and decode\n  NewID, // [prefix, id] => id\n  NewFullID, // [schema, prefix, id] => id\n  PrefixShortID, // [id, prefix] => id\n  DecodeID, // id => [schema, prefix, id] or []\n  // validation\n  IsValidFormat, // id => boolean\n  IsValidSchema, // schema => boolean\n  IsValidPrefix, // schema:prefix  => boolean\n  // config\n  SetDefaultSchema, // schema => void\n  GetDefaultSchema // () => schema\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetSocket implements a \"socket-like\" object that consists of a send()\n  function and the original connection object. The send function implements\n  the write operation to the connection object. This way, we can provide\n  different methods for reading/writing to the connection object using the\n  same API and extend it as needed. \n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './class-urnet-socket.ts';\n    const { NetSocket } = EP_DEFAULT.default; // note .default\n\n  You can import the types through dereferencing as usual:\n\n    import EP_DEFAULT, { I_NetSocket } from './urnet-types.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PR } from '@ursys/core';\nimport NetPacket from './class-urnet-packet.ts';\nimport {\n  NP_Address,\n  NP_Msg,\n  I_NetSocket,\n  NS_SendFunc,\n  NS_CloseFunc,\n  NS_DataFunc,\n  NS_Options\n} from './types-urnet.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = true;\nconst PR = typeof process !== 'undefined' ? 'Socket'.padEnd(13) : 'Socket:';\nconst LOG = (...args) => DBG && console.log(PR, ...args);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** wrapper class a socket connection */\nclass NetSocket implements I_NetSocket {\n  connector: any; // the original connection object\n  sendFunc: NS_SendFunc; // the outgoing send function for this socket\n  closeFunc: NS_CloseFunc; // function to disconnect\n  onDataFunc: NS_DataFunc; // the incoming data function for this socket\n  //\n  uaddr?: NP_Address; // assigned uaddr for this socket-ish object\n  auth?: any; // whatever authentication is needed for this socket\n  msglist?: NP_Msg[]; // messages queued for this socket\n  age?: number; // number of seconds since this socket was used\n  label?: string; // name of the socket-ish object\n\n  constructor(connectObj: any, io: NS_Options) {\n    this.connector = connectObj;\n    const { send, onData, close } = io;\n    this.sendFunc = send.bind(connectObj);\n    this.closeFunc = close.bind(connectObj);\n    this.onDataFunc = onData.bind(connectObj);\n  }\n\n  send(pkt: NetPacket) {\n    this.sendFunc(pkt);\n  }\n\n  close() {\n    this.closeFunc();\n  }\n\n  getConnector() {\n    return this.connector;\n  }\n\n  authenticated() {\n    let a = this.auth !== undefined;\n    return a;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default NetSocket;\nexport { NetSocket };\nexport type { I_NetSocket, NS_SendFunc, NS_DataFunc, NS_Options };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URNET Types and Type Conformance Utilities\n\n  This file contains the types used by NetEndpoint and NetPacket.\n  The NetEndpoint class is the main interface for sending and receiving\n  NetPackets. NetPackets are the encapsulated messages that are sent.\n\n  Type Concepts:\n\n  MSG Messages  - made of CHANNEL and a NAME, e.g. 'NET:HELLO_WORLD'\n  ADDR Address  - every endpoint has an address, e.g. 'UR_001'\n  NP NetPacket  - NetPacket-related types, e.g. NP_ID, NP_Chan, NP_Msg\n  EP Endpoint   - Endpoint-related type are in class-urnet-endpoint.ts\n  PKT Packet    - shorthand for NetPacket\n\n  CROSS PLATFORM USAGE --------------------------------------------------------\n\n  When using from nodejs mts file, you can only import functions from 'default',\n  so to access the NetPacket class do this:\n\n    import UR_TYPES from './urnet-types.ts';\n    const { AllocateAddress } = UR_TYPES.default; // note .default\n\n  You can import the types as usual, though:\n\n    import UR_TYPES, { NP_Msg, NP_Data } from './urnet-types.ts';\n\n  This is not required when importing from another .ts typescript file\n  such as class-urnet-endpoint.ts.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// RUNTIME UTILITIES /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const VALID_MSG_CHANNELS = ['NET', 'SRV', 'LOCAL', ''] as const;\nexport const VALID_PKT_TYPES = [\n  'ping',\n  'signal',\n  'send',\n  'call',\n  '_auth', // special packet\n  '_reg', // special packet\n  '_decl' // special packet\n] as const;\nexport const SKIP_SELF_PKT_TYPES = ['call', 'send'];\nexport const VALID_ADDR_PREFIX = ['???', 'UR_', 'WSS', 'UDS', 'MQT', 'SRV'] as const;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const UADDR_DIGITS = 3; // number of digits in UADDR (padded with 0)\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const USED_ADDRS = new Set<NP_Address>();\n// make string foo with a number of zeros equal to UADDR_DIGITS length\nconst zeroPad = `0`.padStart(UADDR_DIGITS, '0');\nexport const UADDR_NONE = `???${zeroPad}` as NP_Address; // unroutable address\n\n/// BASIC NETPACKET TYPES //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport type NP_ID = `pkt[${NP_Address}:${number}]`;\nexport type NP_Chan = (typeof VALID_MSG_CHANNELS)[number];\nexport type NP_Type = (typeof VALID_PKT_TYPES)[number];\nexport type NP_Msg = `${NP_Chan}${string}`; // e.g. 'NET:HELLO' or 'HELLO'\nexport type NP_Data = any;\nexport type NP_Dir = 'req' | 'res';\nexport type NP_AddrPre = (typeof VALID_ADDR_PREFIX)[number];\nexport type NP_Address = `${NP_AddrPre}${number}`; // range set by UADDR_DIGITS\n\n/// NETPACKET-RELATED TYPES ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport type NP_Hash = `${NP_Address}:${NP_ID}`; // for endpoint transactions\nexport type NP_Options = {\n  // for packet creation\n  dir?: NP_Dir;\n  rsvp?: boolean;\n};\n\n/// INTERFACES ////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** NetMessages are the encapsulated MESSAGE+DATA that are sent over URNET,\n *  with additional metadata to help with request/response and logging.\n *  This defines the data structure only. See NetPacket class for more.\n */\nexport interface I_NetMessage {\n  id: NP_ID;\n  msg_type: NP_Type;\n  msg: NP_Msg;\n  data: NP_Data;\n  src_addr: NP_Address;\n  hop_dir: NP_Dir;\n  hop_rsvp?: boolean;\n  hop_seq: NP_Address[];\n  hop_log: string[];\n  err?: string;\n}\n/// LOCAL TYPES ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** the function that sends a packet to the wire */\nexport type NS_SendFunc = (pkt: I_NetMessage) => void;\nexport type NS_DataFunc = (data: any) => void;\nexport type NS_CloseFunc = () => void;\nexport type NS_Options = {\n  send: NS_SendFunc;\n  onData: NS_DataFunc;\n  close: NS_CloseFunc;\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** this is the socket-ish object that we use to send data to the wire */\nexport interface I_NetSocket {\n  connector?: any; // the original connection object (if needed)\n  send: NS_SendFunc;\n  close: NS_CloseFunc; // close function\n  uaddr?: NP_Address; // assigned uaddr for this socket-ish object\n  auth?: any; // whatever authentication is needed for this socket\n  msglist?: NP_Msg[]; // messages queued for this socket\n  age?: number; // number of seconds since this socket was used\n  label?: string; // name of the socket-ish object\n  authenticated?: () => boolean;\n}\n\n/// FUNCTION SIGNATURES ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Type */\nexport function IsValidType(msg_type: string): boolean {\n  return VALID_PKT_TYPES.includes(msg_type as NP_Type);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** some message types should not invoke back to the same pkt origin\n *  returning true 'call' and 'send'\n */\nexport function SkipOriginType(msg_type: string): boolean {\n  return SKIP_SELF_PKT_TYPES.includes(msg_type as NP_Type);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of protocol-related NP_Type */\nexport function isSpecialPktType(msg_type: string): boolean {\n  if (!IsValidType(msg_type)) return false;\n  return msg_type.startsWith('_');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Chan */\nexport function IsValidChannel(msg_chan: string): boolean {\n  return VALID_MSG_CHANNELS.includes(msg_chan as NP_Chan);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Address */\nexport function IsValidAddress(addr: string): boolean {\n  if (typeof addr !== 'string') return false;\n  let prelen = 0;\n  if (\n    !VALID_ADDR_PREFIX.some(pre => {\n      prelen = pre.length;\n      return addr.startsWith(pre);\n    })\n  )\n    return false;\n  const num = parseInt(addr.slice(prelen));\n  if (isNaN(num)) return false;\n  return true;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Msg, returns array if good otherwise it returns undefined */\nexport function IsValidMessage(msg: string): [NP_Chan, string] {\n  try {\n    return DecodeMessage(msg);\n  } catch (err) {\n    console.log(err.message);\n    console.log(err.stack.split('\\n').slice(1).join('\\n').trim());\n    return undefined;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime create formatted address */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet ADDR_MAX_ID = 0;\ntype AllocateOptions = { prefix?: NP_AddrPre; addr?: NP_Address };\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allocate a new address, optionally with a label */\nexport function AllocateAddress(opt?: AllocateOptions): NP_Address {\n  const fn = 'AllocateAddress';\n  let addr = opt?.addr; // manually-set address\n  let pre = opt?.prefix || 'UA'; // address prefix\n  if (addr === undefined) {\n    // generate a new address\n    let id = ++ADDR_MAX_ID;\n    let padId = `${id}`.padStart(UADDR_DIGITS, '0');\n    addr = `${pre}${padId}` as NP_Address;\n  } else if (USED_ADDRS.has(addr)) {\n    // the manually-set address is already in use\n    throw Error(`${fn} - address ${addr} already allocated`);\n  }\n  USED_ADDRS.add(addr);\n  return addr;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a CHANNEL:MESSAGE string, return the channel and message name in\n *  an array */\nexport function DecodeMessage(msg: NP_Msg): [NP_Chan, string] {\n  if (typeof msg !== 'string') throw Error(`message must be string: ${msg}`);\n  if (msg !== msg.toUpperCase()) throw Error(`message must be uppercase: ${msg}`);\n  const bits = msg.split(':');\n  if (bits.length === 0) throw Error(`invalid empty message`);\n  if (bits.length > 2) throw Error(`invalid channel:message format ${msg}`);\n  let [chan, name] = bits;\n  if (bits.length === 1) {\n    name = chan;\n    chan = 'LOCAL';\n  }\n  if (chan === '') chan = 'LOCAL';\n  if (!IsValidChannel(chan))\n    throw Error(`prefix must be ${VALID_MSG_CHANNELS.join(' ').trim()} not ${chan}`);\n  return [chan as NP_Chan, name];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** make sure that the message is always consistent */\nexport function NormalizeMessage(msg: NP_Msg): NP_Msg {\n  let [chan, name] = DecodeMessage(msg);\n  if (chan === 'LOCAL') chan = '';\n  return `${chan}:${name}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** make sure that degenerate arrays turn into single objet */\nexport function NormalizeData(data: NP_Data): NP_Data {\n  if (Array.isArray(data) && data.length == 1) return data[0];\n  return data;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is a local request */\nexport function IsLocalMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'LOCAL';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is a network request */\nexport function IsNetMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'NET' || chan === 'SRV';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is implemented by main URNET server */\nexport function IsServerMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'SRV';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a packet, return a unique hash string */\nexport function GetPacketHashString(pkt: I_NetMessage): NP_Hash {\n  return `${pkt.src_addr}:${pkt.id}`;\n}\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetPacket encapsulates a message sent over URNET, including metadata\n  to route the packet across the network and return responses.\n\n  Works closely with NetEndpoint, which handles the actual sending and\n  receiving of packets. In practice, use Endpoint.newPacket() to create a new \n  packet that has the correct source address and id.\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import this ts file as 'default' \n  property. To access the NetPacket class do this:\n\n    import CLASS_NP from './class-urnet-packet.ts';\n    const NetPacket = CLASS_NP.default; // note .default\n\n  This is not required when importing from another .ts typescript file\n  such as class-urnet-endpoint.ts.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PR } from '@ursys/core';\nimport { I_NetMessage, NP_Address } from './types-urnet.ts';\nimport { NP_ID, NP_Type, NP_Dir, I_NetSocket } from './types-urnet.ts';\nimport {\n  IsValidMessage,\n  IsValidAddress,\n  IsValidType,\n  UADDR_NONE\n} from './types-urnet';\nimport { NP_Msg, NP_Data, DecodeMessage } from './types-urnet.ts';\nimport { NP_Options } from './types-urnet.ts';\n\nconst PR = typeof process !== 'undefined' ? 'Packet'.padEnd(13) : 'Packet:';\nconst LOG = (...args) => console.log(PR, ...args);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass NetPacket implements I_NetMessage {\n  id: NP_ID; // network-wide unique id for this packet\n  msg_type: NP_Type; // ping, signal, send, call\n  msg: NP_Msg; // name of the URNET message\n  data: any; // payload of the URNET message\n  auth: string; // authentication token\n  src_addr: NP_Address; // URNET address of the sender\n  hop_seq: NP_Address[]; // URNET addresses that have seen this packet\n  hop_log: string[]; // log of debug messages by hop\n  hop_dir: NP_Dir; // direction of the packet 'req' or 'res'\n  hop_rsvp?: boolean; // whether the packet is a response to a request\n  err?: string; // returned error message\n\n  constructor(msg?: NP_Msg, data?: NP_Data) {\n    // metadata\n    this.id = undefined;\n    this.src_addr = undefined;\n    this.hop_rsvp = false;\n    this.hop_seq = [];\n    this.hop_log = [];\n    this.auth = undefined;\n    this.err = undefined;\n    //\n    if (data !== undefined) this.data = data;\n    if (typeof msg === 'string') {\n      if (!IsValidMessage(msg)) throw Error(`invalid msg format: ${msg}`);\n      this.msg = msg;\n    }\n  }\n\n  /** after creating a new packet, use setMeta() to assign id and envelope\n   *  meta used for routing and return packets\n   */\n  setMeta(msg_type: NP_Type, opt?: NP_Options) {\n    if (!IsValidType(msg_type)) throw Error(`invalid msg_type: ${msg_type}`);\n    this.msg_type = msg_type;\n    // optional overrides\n    this.hop_dir = opt?.dir || 'req';\n    this.hop_rsvp = opt?.rsvp || false;\n  }\n\n  /** add hop to the hop sequence */\n  addHop(hop: NP_Address) {\n    if (!IsValidAddress(hop)) throw Error(`invalid hop: ${hop}`);\n    this.hop_seq.push(hop);\n  }\n\n  /** utility setters w/ checks - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** manually set the source address, with check */\n  setSrcAddr(s_addr: NP_Address): NetPacket {\n    if (!IsValidAddress(s_addr)) throw Error(`invalid src_addr: ${s_addr}`);\n    // don't allow changing the src_addr once it's set by send()\n    // use clone() to make a new packet with a different src_addr\n    if (this.hop_seq.length > 0 && this.hop_seq[0] !== s_addr)\n      throw Error(`src_addr ${s_addr} != ${this.hop_seq[0]}`);\n    this.src_addr = s_addr;\n    return this;\n  }\n\n  /** manually set direction */\n  setDir(dir: NP_Dir): NetPacket {\n    if (dir !== 'req' && dir !== 'res') throw Error(`invalid dir: ${dir}`);\n    this.hop_dir = dir;\n    return this;\n  }\n\n  /** set the authorization token */\n  setAuth(auth: string): NetPacket {\n    if (typeof auth !== 'string') {\n      LOG('setAuth: invalid auth', auth);\n      throw Error(`invalid auth: ${auth}`);\n    }\n    this.auth = auth;\n    return this;\n  }\n\n  /** set message and data */\n  setMsgData(msg: NP_Msg, data: NP_Data): NetPacket {\n    this.setMsg(msg);\n    this.setData(data);\n    return this;\n  }\n  /** set message */\n  setMsg(msg: NP_Msg): NetPacket {\n    this.msg = msg;\n    return this;\n  }\n  /** set data */\n  setData(data: NP_Data): NetPacket {\n    this.data = data;\n    return this;\n  }\n  /** merge data */\n  mergeData(data: NP_Data): NetPacket {\n    this.data = { ...this.data, ...data };\n    return this;\n  }\n\n  /** packet reconstruction - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** make a packet from existing JSON */\n  setFromJSON(json: string): NetPacket {\n    if (typeof json !== 'string')\n      throw Error(`invalid json: ${json}, is ${typeof json}`);\n    return this.deserialize(json);\n  }\n  /** make a packet from existing object */\n  setFromObject(pktObj) {\n    const fn = 'setFromObject';\n    if (typeof pktObj !== 'object')\n      throw Error(`invalid pktObj: ${pktObj}, is ${typeof pktObj}`);\n    this.id = pktObj.id;\n    this.msg = pktObj.msg;\n    if (pktObj.data === undefined)\n      LOG(fn, `... pktObj${pktObj.id} .data is undefined`);\n    this.data = pktObj.data;\n    this.src_addr = pktObj.src_addr;\n    this.hop_log = pktObj.hop_log;\n    this.msg_type = pktObj.msg_type;\n    this.hop_seq = pktObj.hop_seq;\n    this.hop_dir = pktObj.hop_dir;\n    this.hop_rsvp = pktObj.hop_rsvp;\n    this.err = pktObj.err;\n    this.auth = pktObj.auth;\n    return this;\n  }\n\n  /** packet transport  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** rsvp required? */\n  hasRsvp() {\n    return this.hop_rsvp;\n  }\n\n  lastHop() {\n    return this.hop_seq[this.hop_seq.length - 1];\n  }\n\n  hasAuth() {\n    return this.auth !== undefined;\n  }\n\n  /** types that begin with _ are protocol messages that bypass dispatchPacket() */\n  isSpecialPkt() {\n    return this.msg_type.startsWith('_');\n  }\n\n  /** authorization packets are the first packet sent on a client connection to\n   *  the message gateway server. They must not have a src_addr aassigned, using\n   *  the special UADDR_NONE value instead.\n   */\n  isBadAuthPkt() {\n    let error = '';\n    let a = this.msg_type === '_auth';\n    let b = this.msg === 'SRV:AUTH';\n    let c = this.src_addr === UADDR_NONE;\n    if (!a) error += `msg_type ${this.msg_type} not _auth. `;\n    if (!b) error += `msg ${this.msg} not SRV:AUTH. `;\n    if (!c) error += `src_addr ${this.src_addr} not ${UADDR_NONE} `;\n    if (error.length > 0) return `isBadAuthPkt: ${error}`;\n    return undefined;\n  }\n\n  /** registration packets are sent on a client connection after\n   *  authentication. They must have a src_addr assigned, which was returned\n   *  by the server in the response to the auth packet, and this must match\n   *  the server's stored uaddr for the client connection.\n   */\n  isBadRegPkt(socket: I_NetSocket) {\n    let error = '';\n    let a = this.msg_type === '_reg';\n    let b = this.msg === 'SRV:REG';\n    let c = this.src_addr === socket.uaddr;\n    if (!a) error += `msg_type ${this.msg_type} not _reg. `;\n    if (!b) error += `msg ${this.msg} not SRV:REG. `;\n    if (!c) error += `src_addr ${this.src_addr} not ${socket.uaddr}. `;\n    if (error.length > 0) return `isBadRegPkt: ${error}`;\n    return undefined;\n  }\n\n  authenticate(socket: I_NetSocket) {\n    const { msg, src_addr, hop_dir, hop_seq } = this;\n    if (!this.isResponse()) LOG(PR, `would auth ${src_addr} '${msg}'`);\n    return true;\n  }\n\n  isRequest() {\n    return this.hop_dir === 'req';\n  }\n\n  isResponse() {\n    return this.hop_dir === 'res';\n  }\n\n  /** serialization - - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  serialize(): string {\n    return JSON.stringify(this);\n  }\n  deserialize(data: string): NetPacket {\n    try {\n      let obj = JSON.parse(data);\n      return this.setFromObject(obj);\n    } catch (err) {\n      LOG('NetPacket.deserialize failed', data);\n    }\n  }\n\n  /** information utilities - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  isValidType(type: NP_Type): boolean {\n    return IsValidType(type);\n  }\n\n  isValidMessage(msg: NP_Msg): boolean {\n    return IsValidMessage(msg) !== undefined;\n    // note difference with IsValidMessage(), which returns [chan, msg] if valid\n  }\n\n  decodeMessage(msg: NP_Msg): [chan: string, msg: string] {\n    return DecodeMessage(msg);\n  }\n\n  /** debugging - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** add error string to packet error */\n  error(msg: string) {\n    if (!this.err) this.err = '';\n    this.err += msg;\n    return msg;\n  }\n\n  /** manually add a transport-related message eto the hog log. this is not\n   *  the same as hop_seq which is used to track the routing of the packet.\n   */\n  hopLog(msg: string) {\n    const info = `${this.id} ${this.hop_dir}`;\n    this.hop_log.push(`${info}: ${msg}`);\n    return msg;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default NetPacket;\nexport { NetPacket };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetEndpoint is a connection object that talks to the UR Messaging Network.\n  Both servers and clients can use this class to build connections over\n  different transports (HTTP, WS, etc).\n\n  Server-Only API\n  - configAsServer(srv_addr: NP_Address): void\n  - addClient(socket: I_NetSocket): NP_Address\n  - removeClient(uaddr: NP_Address): NP_Address\n  - _ingestClientPacket(jsonData: string, socket: I_NetSocket): NetPacket\n\n  Client-Only API\n  - connectAsClient(gateway: I_NetSocket, auth: TClientAuth): Promise<NP_Data>\n  - disconnectAsClient(): void\n  - _ingestServerPacket(jsonData: string, socket: I_NetSocket): void\n\n  Shared API\n  - addMessageHandler(msg: NP_Msg, handler: HandlerFunc): void\n  - call(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - send(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - signal(msg: NP_Msg, data: NP_Data): void\n  - ping(msg: NP_Msg): Promise<NP_Data>\n  - netCall(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - netSend(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - netSignal(msg: NP_Msg, data: NP_Data): void\n  - netPing(msg: NP_Msg): Promise<NP_Data>\n\n  See https://github.com/dsriseah/ursys/wiki/URSYS-Network-Concepts for\n  documentation on using this class\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './class-urnet-endpoint.ts';\n    const NetEndpoint = EP_DEFAULT.default; // note .default\n\n  You can import the types as usual, though:\n\n    import EP_DEFAULT, { I_NetSocket } from './types-urnet.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PR } from '@ursys/core';\nimport NetPacket from './class-urnet-packet.ts';\nimport { GetPacketHashString, SkipOriginType } from './types-urnet.ts';\nimport { IsLocalMessage, IsNetMessage, IsValidAddress } from './types-urnet.ts';\nimport { UADDR_NONE, AllocateAddress } from './types-urnet.ts';\nimport { NormalizeMessage, NormalizeData } from './types-urnet.ts';\n\n/// TYPE DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nimport type { NP_ID, NP_Address, NP_Msg, NP_Data, NP_Hash } from './types-urnet.ts';\nimport type { I_NetSocket } from './class-urnet-socket.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = true;\nconst PR =\n  typeof process !== 'undefined'\n    ? 'EndPoint'.padEnd(13) // nodejs\n    : 'EndPoint'.padEnd(11); // browser\nconst LOG = console.log.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet AGE_INTERVAL = 1000; // milliseconds\nlet AGE_MAX = 60 * 30; // 30 minutes\n\n/// LOCAL TYPES ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype HandlerFunc = (data: NP_Data) => NP_Data | void;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype HandlerSet = Set<HandlerFunc>; // set(handler1, handler2, ...)\ntype AddressSet = Set<NP_Address>; // ['UA001', 'UA002', ...]\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype SocketMap = Map<NP_Address, I_NetSocket>; //\ntype ForwardMap = Map<NP_Msg, AddressSet>; // msg->set of uaddr\ntype HandlerMap = Map<NP_Msg, HandlerSet>; // msg->handler functions\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** transactions store promises for resolving sent packet with return values */\ntype TransactionMap = Map<NP_Hash, PktResolver>; // hash->resolver\ntype PktResolver = {\n  msg: NP_Msg;\n  uaddr: NP_Address;\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** returned by getRoutingInfo() for external users of this class */\ntype PktRoutingInfo = {\n  msg: NP_Msg;\n  src_addr: NP_Address;\n  self_addr: NP_Address;\n  gateway: I_NetSocket;\n  clients: I_NetSocket[];\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TClientAuth = {\n  identity: string;\n  secret: string;\n};\ntype TClientReg = {\n  name: string;\n  type: string;\n};\ntype TClientDeclare = {\n  msg_list: NP_Msg[];\n};\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** utility to dump packet info to console */\nfunction _PKT(ep: NetEndpoint, fn: string, text: string, pkt: NetPacket) {\n  let { id, msg, msg_type } = pkt;\n  if (id === undefined && msg_type === '_reg') id = `pkt[${UADDR_NONE}:0]`;\n  let out = `${ep.uaddr} ${text} '${msg}' `.padEnd(40, '~');\n  out += ` ${id.padEnd(12)} ${fn}`;\n  return out;\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass NetEndpoint {\n  handled_msgs: HandlerMap; // msg->handlers[]\n  //\n  uaddr: NP_Address; // the address for this endpoint\n  client_socks: SocketMap; // uaddr->I_NetSocket\n  remoted_msgs: ForwardMap; // msg->uaddr[]\n  transactions: TransactionMap; // hash->resolver\n  //\n  cli_counter: number; // counter for generating unique uaddr\n  pkt_counter: number; // counter for generating packet ids\n  //\n  cli_gateway: I_NetSocket; // gateway to server\n  cli_sck_timer: any; // timer for checking socket age\n  cli_ident: any; // client credentials to request authentication\n  cli_auth: any; // client access token for\n  cli_reg: TClientReg; // client registration status\n\n  constructor() {\n    //\n    this.uaddr = undefined; // assigned address\n    // endpoint as client\n    this.cli_ident = undefined; // client identity\n    this.cli_auth = undefined; // client access token\n    this.cli_reg = undefined; // client registration status\n    this.cli_gateway = undefined; // client gateway\n    // endpoint as server\n    this.client_socks = undefined;\n    this.remoted_msgs = undefined;\n    // endpoint message handling support\n    this.handled_msgs = new Map<NP_Msg, HandlerSet>();\n    this.transactions = new Map<NP_Hash, PktResolver>();\n    // runtime packet, socket counters\n    this.pkt_counter = 0;\n    this.cli_counter = 0;\n    this.cli_sck_timer = null; // socket aging placeholder\n  }\n\n  /** API: initialize this endpoint's client server, providing a hardcoded\n   *  server UADDR that is distinct from those used by client pools\n   */\n  configAsServer(srv_addr: NP_Address) {\n    const fn = 'configAsServer:';\n    if (!IsValidAddress(srv_addr)) throw Error(`${fn} invalid srv_addr ${srv_addr}`);\n    if (this.uaddr && this.uaddr !== srv_addr) {\n      let err = `${fn} uaddr ${this.uaddr} already set.`;\n      throw Error(err);\n    }\n    this.uaddr = srv_addr;\n    // make sure we don't nuke\n    if (this.client_socks !== undefined)\n      LOG(PR, this.uaddr, `already configured`, [...this.client_socks.keys()]);\n    this.client_socks = new Map<NP_Address, I_NetSocket>();\n    if (this.remoted_msgs !== undefined)\n      LOG(PR, this.uaddr, `already configured`, [...this.remoted_msgs.keys()]);\n    this.remoted_msgs = new Map<NP_Msg, AddressSet>();\n    // add default service message handlers here\n    this.addMessageHandler('SRV:REFLECT', data => {\n      data.info = `built-in service`;\n      return data;\n    });\n  }\n\n  /** API: Server data event handler for incoming data from a client connection.\n   *  This is the mirror to _ingestServerPacket() function used by client endpoints.\n   *  This is the entry point for incoming data from clients */\n  _ingestClientPacket(jsonData: string, socket: I_NetSocket): NetPacket {\n    let pkt = this.newPacket().deserialize(jsonData);\n    let retPkt: NetPacket;\n\n    // 1. protocol: authentication packet (once)\n    retPkt = this._handleAuthRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    /** from this point forward, packets are authenticated **/\n\n    // 2. is this a special registration packet (anytime)\n    retPkt = this._handleRegRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    // 3. is this a special declaration packet (anytime)\n    retPkt = this._handleDeclRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    // 4. otherwise, handle the packet normally through the message interface\n    this.dispatchPacket(pkt);\n  }\n\n  /** API: when a client connects to this endpoint, register it as a socket and\n   *  allocate a uaddr for it */\n  addClient(socket: I_NetSocket): NP_Address {\n    const fn = 'addClient:';\n    if (typeof socket !== 'object') throw Error(`${fn} invalid socket`);\n    if (socket.uaddr !== undefined) throw Error(`${fn} socket already added`);\n    const new_uaddr = AllocateAddress({ prefix: 'UR_' });\n    socket.uaddr = new_uaddr;\n    socket.age = 0;\n    socket.auth = undefined; // filled-in by socket authorization\n    socket.msglist = undefined; // filled-in by message registration\n    this.client_socks.set(new_uaddr, socket);\n    // LOG(PR,this.uaddr, `socket ${new_uaddr} registered`);\n    return new_uaddr;\n  }\n\n  /** API: when a client disconnects from this endpoint, delete its socket and\n   *  remove all message forwarding */\n  removeClient(uaddr_obj: NP_Address | I_NetSocket): NP_Address {\n    const fn = 'removeClient:';\n    let uaddr = typeof uaddr_obj === 'string' ? uaddr_obj : uaddr_obj.uaddr;\n    if (typeof uaddr !== 'string') {\n      LOG(PR, `${fn} invalid uaddr ${typeof uaddr}`);\n      return undefined;\n    }\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    // remoted_msgs is msg->set of uaddr, so iterate over all messages\n    this._deleteRemoteMessagesForAddress(uaddr);\n    // delete the socket\n    this.client_socks.delete(uaddr);\n    // LOG(PR,this.uaddr, `socket ${uaddr} deleted`);\n    return uaddr;\n  }\n\n  /** API: given a uaddr, return the socket */\n  getClient(uaddr: NP_Address): I_NetSocket {\n    const fn = 'getClient:';\n    if (this.client_socks === undefined) return undefined;\n    return this.client_socks.get(uaddr);\n  }\n\n  /** API: start a timer to check for dead sockets */\n  enableClientAging(activate: boolean) {\n    const fn = 'enableClientAging:';\n    if (activate) {\n      if (this.cli_sck_timer) clearInterval(this.cli_sck_timer);\n      this.cli_sck_timer = setInterval(() => {\n        this.client_socks.forEach((socket, uaddr) => {\n          socket.age += AGE_INTERVAL;\n          if (socket.age > AGE_MAX) {\n            LOG(PR, this.uaddr, `socket ${uaddr} expired`);\n            // put stuff here\n          }\n        });\n      }, AGE_INTERVAL);\n      return;\n    }\n    if (this.cli_sck_timer) clearInterval(this.cli_sck_timer);\n    this.cli_sck_timer = null;\n    LOG(PR, this.uaddr, `timer stopped`);\n  }\n\n  /** support: handle auth packet if the session.auth is not defined */\n  _handleAuthRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (!socket.authenticated()) {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      const error = pkt.isBadAuthPkt();\n      if (error) {\n        console.error(PR, error);\n        pkt.data = { error };\n        return pkt;\n      }\n      /** placeholder authentication check **/\n      const { identity, secret } = pkt.data;\n      if (identity) {\n        socket.auth = identity;\n        pkt.data = { uaddr: socket.uaddr, cli_auth: 'ServerProvidedAuthToken' };\n      } else {\n        pkt.data = { error: 'invalid identity' };\n      }\n      /** end placeholder **/\n      return pkt;\n    }\n    return undefined;\n  }\n\n  /** support: handle registration packet */\n  _handleRegRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (!pkt.isBadRegPkt(socket)) {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      if (pkt.msg !== 'SRV:REG') {\n        pkt.data = { error: `invalid reg packet ${pkt.msg}` };\n        return pkt;\n      }\n      if (pkt.src_addr !== socket.uaddr) {\n        LOG(PR, 'src address mismatch', pkt.src_addr, '!= sock', socket.uaddr);\n        pkt.data = { error: 'address mismatch' };\n        return pkt;\n      }\n      const { name, type } = pkt.data;\n      if (name) {\n        const { uaddr } = socket;\n        pkt.data = { ok: true, status: `registered name:${name} type:${type}` };\n        return pkt;\n      }\n      pkt.data = { error: 'registration failed' };\n      return pkt;\n    }\n    return undefined;\n  }\n\n  /** support: handle client dynamic definitions */\n  _handleDeclRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (pkt.msg_type === '_decl') {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      if (pkt.msg !== 'SRV:DEF') {\n        console.log('invalid def packet', pkt.msg);\n        pkt.data = { error: `invalid def packet ${pkt.msg}` };\n        return pkt;\n      }\n      // currently support msg_list only\n      pkt.data.status = [];\n      const { msg_list } = pkt.data;\n      const { uaddr } = socket;\n      if (Array.isArray(msg_list)) {\n        this.registerRemoteMessagesToAddress(uaddr, msg_list);\n        pkt.data.status.push(`registered ${msg_list.length} messages`);\n      }\n      //\n      // ... other definitions can go here\n      //\n      if (pkt.data.status.length === 0) {\n        pkt.data = { error: 'no definitions' };\n        return pkt;\n      }\n    }\n    return undefined;\n  }\n\n  /** client connection handshaking - - - - - - - - - - - - - - - - - - - - **/\n\n  /** API: client endpoints need to have an \"address\" assigned to them,\n   *  otherwise the endpoint will not work */\n  async connectAsClient(gateway: I_NetSocket, auth: TClientAuth): Promise<NP_Data> {\n    const fn = 'connectAsClient:';\n    if (gateway && typeof gateway.send === 'function') {\n      this.cli_gateway = gateway;\n    } else throw Error(`${fn} invalid gateway`);\n    if (auth) {\n      const pkt = this.newAuthPacket(auth);\n      const { msg } = pkt;\n\n      /** MAGIC **/\n      /** await promise, which resolves when server responds to the auth packet */\n      let authData: NP_Data = await this._queueTransaction(pkt, gateway);\n      /** resumes when _handleAuthResponse() resolves the transaction **/\n      /** END MAGIC **/\n\n      // handle authdata\n      const { uaddr, cli_auth, error } = authData;\n      if (error) {\n        LOG(PR, `${fn} error:`, error);\n        return false;\n      }\n      if (!IsValidAddress(uaddr)) throw Error(`${fn} invalid uaddr ${uaddr}`);\n      this.uaddr = uaddr;\n      if (cli_auth === undefined) throw Error(`${fn} invalid cli_auth`);\n      this.cli_auth = cli_auth;\n      LOG(PR, 'AUTHENTICATED', uaddr, cli_auth);\n      this.cli_auth = cli_auth;\n      return authData;\n    }\n    throw Error(`${fn} arg must be identity`);\n  }\n\n  /** API: Client data event handler for incoming data from the gateway. This is\n   *  the mirror to _ingestClientPacket() function that is used by servers. This\n   *  is entry point for incoming data from server\n   */\n  _ingestServerPacket(jsonData: string, socket: I_NetSocket): void {\n    const fn = '_ingestServerPacket:';\n    const pkt = this.newPacket().deserialize(jsonData);\n    // 1. is this connection handshaking for clients?\n    if (this.cli_gateway) {\n      // only clients have this.cli_gateway socket defined\n      // special packets are handled separately from the normal message dispatcher\n      // the parallel _ingestClientPacket() function for servers are who return\n      // these response packets\n      if (this._handleAuthResponse(pkt)) return;\n      if (this._handleRegResponse(pkt)) return;\n      if (this._handleDeclResponse(pkt)) return;\n    }\n    // 2. otherwise handle the message interface normally\n    this.dispatchPacket(pkt);\n  }\n\n  /** API: register client with client endpoint info */\n  async declareClientProperties(info: TClientReg): Promise<NP_Data> {\n    const fn = 'declareClientProperties:';\n    if (!this.cli_gateway) throw Error(`${fn} no gateway`);\n    const pkt = this.newRegPacket();\n    pkt.data = { ...info };\n\n    /** MAGIC **/\n    /** suspend through transaction **/\n    let regData: NP_Data = await this._queueTransaction(pkt, this.cli_gateway);\n    /** resumes when _handleAuthResponse() resolves the transaction **/\n    /** END MAGIC **/\n\n    const { ok, status, error } = regData;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n      return regData;\n    }\n    if (ok) {\n      LOG(PR, 'REGISTERED', status);\n      this.cli_reg = info; // save registration info\n      return regData;\n    }\n    throw Error(`${fn} unexpected response`, regData);\n  }\n\n  /** API: declare client messages */\n  async declareClientMessages() {\n    const fn = 'declareClientMessages:';\n    const msg_list = this.getNetMessageNames();\n    const response = await this._declareClientServices({ msg_list });\n    const { msg_list: rmsg_list, error } = response;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n    } else {\n      LOG(PR, `DECLARED ${rmsg_list.length} messages`);\n      rmsg_list.forEach(msg => LOG(PR, `  '${msg}'`));\n    }\n    return response;\n  }\n\n  /** support: handle authentication response packet directly rather than through\n   *  the netcall interface in dispatchPacket() */\n  _handleAuthResponse(pkt: NetPacket): boolean {\n    const fn = '_handleAuthResponse:';\n    if (pkt.msg_type !== '_auth') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    this.resolveTransaction(pkt);\n    // auth resumes in connectAsClient() magical await requestAuth\n    return true;\n  }\n\n  /** support: handle registration response packet directly rather than through\n   *  the netcall interface in dispatchPacket() */\n  _handleRegResponse(pkt: NetPacket): boolean {\n    const fn = '_handleRegResponse:';\n    if (pkt.msg_type !== '_reg') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    if (pkt.src_addr !== this.uaddr) throw Error(`${fn} misaddressed packet???`);\n    // resuming from declareClientProperties() await requestReg\n    this.resolveTransaction(pkt);\n    return true;\n  }\n\n  /** support: handle declaration packet */\n  _handleDeclResponse(pkt: NetPacket): boolean {\n    const fn = '_handleDeclResponse:';\n    if (pkt.msg_type !== '_decl') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    if (pkt.src_addr !== this.uaddr) throw Error(`${fn} misaddressed packet???`);\n    // resuming from _declareClientServices() await requestReg\n    this.resolveTransaction(pkt);\n    return true;\n  }\n\n  /** message declaration and invocation - - - - - - - - - - - - - - - - - -**/\n\n  /** API: declare a message handler for a given message */\n  addMessageHandler(msg: NP_Msg, handler: HandlerFunc) {\n    const fn = 'addMessageHandler:';\n    // LOG(PR,this.uaddr, `reg handler '${msg}'`);\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    if (msg !== msg.toUpperCase()) throw Error(`${fn} msg must be uppercase`);\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(msg);\n    if (!this.handled_msgs.has(key))\n      this.handled_msgs.set(key, new Set<HandlerFunc>());\n    const handler_set = this.handled_msgs.get(key);\n    handler_set.add(handler);\n  }\n\n  /** API: remove a previously declared message handler for a given message */\n  deleteMessageHandler(msg: NP_Msg, handler: HandlerFunc) {\n    const fn = 'deleteMessageHandler:';\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(msg);\n    const handler_set = this.handled_msgs.get(key);\n    if (!handler_set) throw Error(`${fn} unexpected empty set '${key}'`);\n    handler_set.delete(handler);\n  }\n\n  /** API: call local message registered on this endPoint only */\n  async call(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'call:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    const promises = [];\n    handlers.forEach(handler => {\n      promises.push(\n        new Promise((resolve, reject) => {\n          try {\n            resolve(handler({ ...data })); // copy of data\n          } catch (err) {\n            reject(err);\n          }\n        })\n      );\n    });\n    if (promises.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    // wait for all promises to resolve\n    const resData = await Promise.all(promises);\n    return resData;\n  }\n\n  /** API: send local message registered on this endPoint only, returning no data */\n  async send(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'send:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    handlers.forEach(handler => {\n      handler({ ...data }); // copy of data\n    });\n    return Promise.resolve(true);\n  }\n\n  /** API: signal local message registered on this endPoint only, returning no data.\n   */\n  signal(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'signal:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    handlers.forEach(handler => {\n      handler({ ...data }); // copy of data\n    });\n  }\n\n  /** API: ping local message, return with number of handlers */\n  async ping(msg: NP_Msg): Promise<NP_Data> {\n    const fn = 'ping:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    return Promise.resolve(handlers.length);\n  }\n\n  /** API: call net message, resolves when packet returns from server with data */\n  async netCall(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'netCall:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('call', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      // note: this is similar to _queueTransaction() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** API: send net message, returning promise that will resolve when the server has\n   *  received and processed/forwarded the message */\n  async netSend(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'netSend:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('send', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      // note: this is similar to _queueTransaction() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** API: signal net message, returning void (not promise)\n   *  used for the idea of 'raising signals' as opposed to 'sending data'. It\n   *  resolves immediately when the signal is sent, and does not check with the\n   *  server  */\n  netSignal(msg: NP_Msg, data: NP_Data): void {\n    const fn = 'netSignal:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('signal', {\n      dir: 'req',\n      rsvp: false\n    });\n    /** no magic, just send and forget **/\n    this.initialSend(pkt);\n  }\n\n  /** API: returns with a list of uaddr from the server which is the uaddr of the\n   *  all clients that have registered for the message */\n  async netPing(msg: NP_Msg): Promise<NP_Data> {\n    const fn = 'netPing:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg);\n    pkt.setMeta('ping', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      // note: this is similar to _queueTransaction() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** packet utilities  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** declare client attributes is a generic declaration packet that can contain\n   *  any number of attributes that the client wants to declare to the server.\n   *  for example, see declareClientMessages() */\n  async _declareClientServices(def: TClientDeclare): Promise<NP_Data> {\n    const fn = '_declareClientServices:';\n    if (!this.cli_gateway) throw Error(`${fn} no gateway`);\n    const pkt = this.newDeclPacket();\n    pkt.data = { ...def };\n    const { msg } = pkt;\n\n    /** MAGIC **/\n    /** suspend through transaction **/\n    let declared: NP_Data = await this._queueTransaction(pkt, this.cli_gateway);\n    /** resumes when _handleAuthResponse() resolves the transaction **/\n    /** END MAGIC **/\n\n    const { error, status } = declared;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n      return declared;\n    }\n    if (status) return declared;\n    // neither error or status, so something went wrong\n    throw Error(`${fn} unexpected response`, declared);\n  }\n\n  /** shuts down the gateway to server, forcing close\n   *  Chrome 125.0.6422.77 doesn't seem to send a close frame on reload\n   *  Firefox 126.0 doesn't fire beforeunload\n   */\n  disconnectAsClient() {\n    if (this.cli_gateway === undefined) return;\n    if (typeof this.cli_gateway.close === 'function') {\n      this.cli_gateway.close();\n    }\n    this.cli_gateway = undefined;\n  }\n\n  /** endpoint lookup tables - - - - - - - - - - - - - - - - - - - -  - - - **/\n\n  /** return true if the message is handled anywhere */\n  packetHasHandler(pkt: NetPacket): boolean {\n    const fn = 'messageHasHandler:';\n    const a = this.getMessageHandlers(pkt.msg).length > 0;\n    const b = this.isServer() && this.getMessageAddresses(pkt.msg).length > 0;\n    return a || b;\n  }\n\n  /** get list of messages allocated to a uaddr */\n  getMessagesForAddress(uaddr: NP_Address): NP_Msg[] {\n    const fn = 'getMessagesForAddress:';\n    if (!this.isServer()) return []; // invalid for client-only endpoints\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    // remoted_msgs is msg->set of uaddr, so iterate over all messages\n    const msg_list: NP_Msg[] = [];\n    this.remoted_msgs.forEach((addr_set, msg) => {\n      if (addr_set.has(uaddr)) msg_list.push(msg);\n    });\n    return msg_list;\n  }\n\n  /** get list of UADDRs that a message is forwarded to */\n  getMessageAddresses(msg: NP_Msg): NP_Address[] {\n    const fn = 'getMessageAddresses:';\n    if (!this.isServer()) return []; // invalid for client-only endpoints\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    const key = NormalizeMessage(msg);\n    if (!this.remoted_msgs.has(key))\n      this.remoted_msgs.set(key, new Set<NP_Address>());\n    const addr_set = this.remoted_msgs.get(key);\n    const addr_list = Array.from(addr_set);\n    return addr_list;\n  }\n\n  /** return list of local handlers for given message */\n  getMessageHandlers(msg: NP_Msg): HandlerFunc[] {\n    const fn = 'getMessageHandlers:';\n    if (this.handled_msgs === undefined) return [];\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    const key = NormalizeMessage(msg);\n    if (!this.handled_msgs.has(key))\n      this.handled_msgs.set(key, new Set<HandlerFunc>());\n    const handler_set = this.handled_msgs.get(key);\n    if (!handler_set) throw Error(`${fn} unexpected empty set '${key}'`);\n    const handler_list = Array.from(handler_set);\n    return handler_list;\n  }\n\n  /** informational routing information - - - - - - - - - - - - - - - - - - **/\n\n  /** return handler list for this endpoint */\n  getMessageNames(): NP_Msg[] {\n    // get message keys from handled_msgs\n    const list = [];\n    this.handled_msgs.forEach((handler_set, key) => {\n      list.push(key);\n    });\n    return list;\n  }\n\n  /** return only net messages */\n  getNetMessageNames(): NP_Msg[] {\n    const list = [];\n    this.handled_msgs.forEach((handler_set, key) => {\n      if (IsNetMessage(key)) list.push(key);\n    });\n    return list;\n  }\n\n  /** return list of active transactions for this endpoint */\n  getPendingTransactions(): { hash: NP_Hash; msg: NP_Msg; uaddr: NP_Address }[] {\n    // return array of objects { hash, msg, uaddr }\n    const fn = 'getPendingTransactions:';\n    const list = [];\n    this.transactions.forEach((transaction, hash) => {\n      const { msg, uaddr } = transaction;\n      list.push({ hash, msg, uaddr });\n    });\n    return list;\n  }\n\n  /** server endpoints manage list of messages in clients  - - - - -  - - - **/\n\n  /** register a message handler for a given message to passed uaddr */\n  registerRemoteMessagesToAddress(uaddr: NP_Address, msgList: NP_Msg[]) {\n    const fn = 'registerRemoteMessagesToAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    msgList.forEach(msg => {\n      if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n      if (msg !== msg.toUpperCase()) throw Error(`${fn} msg must be uppercase`);\n      const key = NormalizeMessage(msg);\n      if (!this.remoted_msgs.has(key))\n        this.remoted_msgs.set(key, new Set<NP_Address>());\n      const msg_set = this.remoted_msgs.get(key);\n      msg_set.add(uaddr);\n      // LOG(PR,this.uaddr, `reg remote ${key} for ${uaddr}`);\n    });\n  }\n\n  /** unregister message handlers for a given message to passed uaddr */\n  _deleteRemoteMessagesForAddress(uaddr: NP_Address): NP_Msg[] {\n    const fn = '_deleteRemoteMessagesForAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    const removed = [];\n    this.remoted_msgs.forEach((msg_set, key) => {\n      if (msg_set.has(uaddr)) removed.push(key);\n      msg_set.delete(uaddr);\n    });\n    return removed;\n  }\n\n  /** packet interface  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** Receive a single packet from the wire, and determine what to do with it.\n   *  It's assumed that _ingestClientPacket() has already handled\n   *  authentication for clients before this method is received.\n   *  The packet has several possible processing options!\n   *  - packet is response to an outgoing transaction\n   *  - packet is a message that we handle\n   *  - packet is a message that we forward\n   *  - packet is unknown message so we return it with error\n   *  If the packet has the rsvp flag set, we need to return\n   *  it to the source address in the packet with any data\n   */\n  async dispatchPacket(pkt: NetPacket): Promise<void> {\n    const fn = 'dispatchPacket:';\n\n    // filter out response packets\n    if (pkt.isResponse()) {\n      if (pkt.src_addr === this.uaddr) {\n        // this is a returning packet that originated from this endpoint\n        this.resolveTransaction(pkt);\n      } else {\n        // otherwise, it's a response packet to a downstream client\n        this.returnToSender(pkt);\n      }\n      return; // done processing, so exit\n    }\n\n    // make sure only request packets are processed\n    if (!pkt.isRequest()) {\n      LOG(PR, this.uaddr, fn, `invalid packet`, pkt);\n      return;\n    }\n\n    // handle ping packets\n    if (pkt.msg_type === 'ping') {\n      const pingArr = this.getMessageAddresses(pkt.msg);\n      const pingHandlers = this.getMessageHandlers(pkt.msg);\n      if (pingHandlers.length > 0) pingArr.push(this.uaddr);\n      pkt.setData(pingArr);\n      this.returnToSender(pkt);\n      return;\n    }\n\n    // handle signal packets\n    if (pkt.msg_type === 'signal') {\n      await this.awaitHandlers(pkt);\n      if (this.isServer()) await this.awaitRemoteHandlers(pkt);\n      return;\n    }\n\n    // handle call and send packets\n    let retData: any;\n    if (this.packetHasHandler(pkt)) {\n      // handle send and call, which do not reflect back to sender\n      retData = await this.awaitHandlers(pkt);\n      if (this.isServer()) retData = await this.awaitRemoteHandlers(pkt);\n    } else {\n      LOG(PR, this.uaddr, fn, `unknown message`, pkt);\n      retData = { error: `unknown message '${pkt.msg}'` };\n    }\n\n    // if the packet doesn't have an RSVP flag, then we don't\n    // have to return any data so quit\n    if (!pkt.hasRsvp()) return;\n\n    // otherwise, we need to return the appropriate data\n    // to the callee. ping and signal have already been handled\n    if (pkt.msg_type === 'call') {\n      pkt.data = NormalizeData(retData);\n    } else if (pkt.msg_type === 'send') {\n      pkt.data = true;\n    }\n    // now send the response, eventually\n    this.returnToSender(pkt);\n  }\n\n  /** Start a transaction, which returns promises to await. This method\n   *  is a queue that uses Promises to wait for the return, which is\n   *  triggered by a returning packet in dispatchPacket(pkt).\n   */\n  async awaitRemoteHandlers(pkt: NetPacket) {\n    const fn = 'awaitRemoteHandlers:';\n    if (pkt.hop_dir !== 'req') throw Error(`${fn} packet is not a request`);\n    // prep for return\n    const { gateway, clients } = this.getRoutingInformation(pkt);\n    const promises = [];\n    if (gateway) {\n      // LOG(PR,_PKT(this, fn, '-wait-req-', pkt), pkt.data);\n      const p = this.awaitTransaction(pkt, gateway);\n      if (p) promises.push(p);\n    }\n    if (Array.isArray(clients)) {\n      // LOG(PR,_PKT(this, fn, '-wait-req-', pkt), pkt.data);\n      clients.forEach(sock => {\n        // LOG(PR,fn,this.uaddr, 'await remote', pkt.msg, sock.uaddr);\n        const p = this.awaitTransaction(pkt, sock);\n        if (p) promises.push(p);\n      });\n    }\n    let data = await Promise.all(promises);\n    return data; // an array of results\n  }\n\n  /** Start a handler call, which might have multiple implementors.\n   *  Returns data from all handlers as an array or a single item\n   */\n  async awaitHandlers(pkt: NetPacket) {\n    const fn = 'awaitHandlers:';\n    const { msg } = pkt;\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0) return Promise.resolve([]);\n    const promises = [];\n    // LOG(PR,_PKT(this, fn, '-wait-hnd-', pkt), pkt.data);\n    handlers.forEach(handler => {\n      promises.push(\n        new Promise((resolve, reject) => {\n          try {\n            resolve(handler({ ...pkt.data })); // copy of data\n          } catch (err) {\n            reject(err);\n          }\n        })\n      );\n    });\n    let data = await Promise.all(promises);\n    return data; // an array of data\n  }\n\n  /** Send a single packet on all available interfaces based on the\n   *  message. Use for initial outgoing packets only from the\n   *  netCall, netSend, netSignal, and netPing methods.\n   */\n  initialSend(pkt: NetPacket) {\n    const fn = 'initialSend:';\n    // sanity checks\n    if (pkt.src_addr === undefined) throw Error(`${fn}src_addr undefined`);\n    if (this.uaddr === undefined) throw Error(`${fn} uaddr undefined`);\n    if (pkt.hop_seq.length !== 0) throw Error(`${fn} pkt must have no hops yet`);\n    if (pkt.msg_type !== 'ping' && pkt.data === undefined)\n      throw Error(`${fn} data undefined`);\n    // prep for sending\n    // LOG(PR,_PKT(this, fn, '-send-req-', pkt), pkt.data);\n    const { gateway, clients } = this.getRoutingInformation(pkt);\n    // send on the wire\n    pkt.addHop(this.uaddr);\n    if (gateway) {\n      if (this.cli_reg === undefined) throw Error(`${fn} endpoint not registered`);\n      gateway.send(pkt);\n    }\n    if (Array.isArray(clients)) {\n      clients.forEach(sock => sock.send(pkt));\n    }\n  }\n\n  /** Used to forward a transaction from server to a remote client\n   */\n  awaitTransaction(pkt: NetPacket, sock: I_NetSocket): Promise<any> {\n    const clone = this.clonePacket(pkt);\n    clone.id = this.assignPacketId(clone);\n    if (pkt.src_addr === sock.uaddr && SkipOriginType(pkt.msg_type)) return;\n    return this._queueTransaction(clone, sock);\n  }\n\n  /** Used to resolve a forwarded transaction received by server from\n   *  a remote client\n   */\n  resolveTransaction(pkt: NetPacket) {\n    const fn = 'resolveTransaction:';\n    // LOG(PR, fn, this.uaddr, 'resolving', pkt.msg);\n    if (pkt.hop_rsvp !== true) throw Error(`${fn} packet is not RSVP`);\n    if (pkt.hop_dir !== 'res') throw Error(`${fn} packet is not a response`);\n    if (pkt.hop_seq.length < 2 && !pkt.isSpecialPkt())\n      throw Error(`${fn} packet has no hops`);\n    this._dequeueTransaction(pkt);\n  }\n\n  /** utility method for conducting transactions */\n  _queueTransaction(pkt: NetPacket, sock: I_NetSocket): Promise<any> {\n    const fn = '_queueTransaction:';\n    const hash = GetPacketHashString(pkt);\n    if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n    const { src_addr } = pkt;\n    const { uaddr: dst_addr } = sock;\n    // LOG(PR, fn, `${pkt.msg} dst:${dst_addr} src:${src_addr}`);\n    return new Promise((resolve, reject) => {\n      const meta = { msg: pkt.msg, uaddr: pkt.src_addr };\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      sock.send(pkt);\n    });\n  }\n\n  /** utility method for completing transactions */\n  _dequeueTransaction(pkt: NetPacket) {\n    const fn = '_finishTransaction:';\n    const hash = GetPacketHashString(pkt);\n    const resolver = this.transactions.get(hash);\n    if (!resolver) throw Error(`${fn} no resolver for hash ${hash}`);\n    const { resolve, reject } = resolver;\n    const { data } = pkt;\n    // LOG(PR,_PKT(this, fn, '-recv-res-', pkt), pkt.data);\n    if (pkt.err) reject(pkt.err);\n    else resolve(data);\n    this.transactions.delete(hash);\n  }\n\n  /** Return a packet to its source address. If this endpoint is a server,\n   *  then it might have the socket stored. Otherwise, if this endpoint is\n   *  also a client of another server, pass the back through the gateway.\n   *  This is used by server endpoints to return packets to clients.\n   */\n  returnToSender(pkt: NetPacket) {\n    const fn = 'returnToSender:';\n    // check for validity\n    if (pkt.hop_rsvp !== true) throw Error(`${fn} packet is not RSVP`);\n    if (pkt.hop_seq.length < 1) throw Error(`${fn} packet has no hops`);\n    // prep for return\n    pkt.setDir('res');\n    pkt.addHop(this.uaddr);\n    // LOG(PR,_PKT(this, fn, '-send-res-', pkt), pkt.data);\n    const { gateway, src_addr } = this.getRoutingInformation(pkt);\n    if (this.isServer()) {\n      // LOG(PR,fn,this.uaddr, 'returning to', src_addr);\n      const socket = this.getClient(src_addr);\n      if (socket) socket.send(pkt);\n      // responses go to a single address; if we found it here,\n      // then we're done\n      return;\n    }\n    // if we have a gateway, pass the buck onward and let it\n    // find the client\n    if (gateway) {\n      gateway.send(pkt);\n      return;\n    }\n    LOG(PR, `${fn} unroutable packet`, pkt);\n  }\n\n  /** return array of sockets to use for sending packet,\n   *  based on pkt.msg and pkt.src_addr\n   */\n  getRoutingInformation(pkt: NetPacket): PktRoutingInfo {\n    const fn = 'getRoutingInformation:';\n    const { msg, src_addr } = pkt;\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' is invalid message`);\n    // check if there's a gateway first and add it\n    const gateway = this.cli_gateway;\n    const self_addr = this.uaddr;\n    // check if we're a server\n    const msg_list = this.getMessageAddresses(msg);\n    const clients = [];\n    msg_list.forEach(uaddr => {\n      if (uaddr === this.uaddr) return; // skip self\n      const socket = this.getClient(uaddr);\n      if (socket) clients.push(socket);\n    });\n    return {\n      msg,\n      src_addr,\n      self_addr,\n      gateway,\n      clients\n    };\n  }\n\n  /** packet utility - - - - - - - - - - - - - - - - - - - - - - - - - - - -**/\n\n  assignPacketId(pkt: NetPacket): NP_ID {\n    if (pkt.src_addr === undefined) pkt.src_addr = this.uaddr;\n    const count = ++this.pkt_counter;\n    pkt.id = `pkt[${pkt.src_addr}:${count}]`;\n    return pkt.id;\n  }\n\n  /** convert JSON to packet and return */\n  packetFromJSON(json: string): NetPacket {\n    const pkt = new NetPacket();\n    pkt.setFromJSON(json);\n    return pkt;\n  }\n\n  /** create a new packet with proper address */\n  newPacket(msg?: NP_Msg, data?: NP_Data): NetPacket {\n    const fn = 'newPacket:';\n    const pkt = new NetPacket(msg, data);\n    pkt.setSrcAddr(this.uaddr || UADDR_NONE);\n    if (this.cli_auth) pkt.setAuth(this.cli_auth);\n    pkt.id = this.assignPacketId(pkt);\n    return pkt;\n  }\n\n  /** clone a packet with new id */\n  clonePacket(pkt: NetPacket): NetPacket {\n    const clone = this.newPacket(pkt.msg, pkt.data);\n    clone.setFromJSON(pkt.serialize());\n    clone.src_addr = this.uaddr;\n    clone.id = this.assignPacketId(clone);\n    return clone;\n  }\n\n  /** create an authentication packet, which is the first packet that must be sent\n   *  after connecting to the server */\n  newAuthPacket(authObj: TClientAuth): NetPacket {\n    const pkt = this.newPacket('SRV:AUTH', { ...authObj });\n    pkt.setMeta('_auth', { rsvp: true });\n    pkt.setSrcAddr(UADDR_NONE); // provide null address\n    this.assignPacketId(pkt);\n    return pkt;\n  }\n\n  /** create a registration packet */\n  newRegPacket(): NetPacket {\n    const pkt = this.newPacket('SRV:REG');\n    pkt.setMeta('_reg', { rsvp: true });\n    return pkt;\n  }\n\n  /** create a declaration packet shell */\n  newDeclPacket(): NetPacket {\n    const pkt = this.newPacket('SRV:DEF');\n    pkt.setMeta('_decl', { rsvp: true });\n    return pkt;\n  }\n\n  /** environment utilities - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** return true if this endpoint is managing connections */\n  isServer() {\n    return this.client_socks !== undefined && this.remoted_msgs !== undefined;\n  }\n\n  /** socket utilities  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** given a socket, see if it's already registered */\n  isNewSocket(socket: I_NetSocket): boolean {\n    const fn = 'isNewSocket:';\n    if (typeof socket !== 'object') return false;\n    return socket.uaddr === undefined;\n  }\n\n  /** client endpoints need to have an authentication token to\n   *  access URNET beyond registration\n   */\n  authorizeSocket(auth: any) {\n    const fn = 'authorizeSocket:';\n    LOG(PR, this.uaddr, 'would check auth token');\n  }\n} // end NetEndpoint class\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport default NetEndpoint;\nexport { NetEndpoint };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URNET RUNTIME CONSTANTS for HTTP BROWSER CLIENTS\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// TYPES & INTERFACES ////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// HTTP servers are combined app and websocket servers on the same port!\n/// They build their webapp from a source directory before serving it.\ntype T_HTTP_CLIENT = {\n  http_host: string; // http server host used by client app\n  http_port: number; // http server port used by client app\n  http_url: string; // full app url address\n  wss_path: string; // websocket server path rel to host url:port\n  wss_url: string; // wss connection string\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst http_host = '127.0.0.1'; // default set http server host forced to ipv4\nconst http_port = 8080; // default http server port\nconst wss_path = 'urnet-http'; // websocket server path rel to host url:port\nlet HTTP_CLIENT_INFO: T_HTTP_CLIENT = {\n  http_host,\n  http_port,\n  http_url: `http://${http_host}:${http_port}`, //\n  wss_path: wss_path,\n  wss_url: `ws://${http_host}:${http_port}/${wss_path}`\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** Return new client info for a different hostname/path, which can not access\n *  to default localhost but needs a real domain name-based server address.\n *  Assumptions:\n *  - nginx is proxying http to https on the server side\n *  - no port is required, as this is handled by proxy\n */\nfunction GetClientInfoFromWindowLocation(winLocation: Location) {\n  const { host, pathname, protocol } = winLocation;\n  const { http_port, wss_path } = HTTP_CLIENT_INFO;\n  const tls = protocol === 'https:';\n  const hostpath = host + pathname;\n  const http_url = tls ? `https://${hostpath}` : `http://${hostpath}`;\n  const wss_url = tls\n    ? `wss://${hostpath}/${wss_path}`\n    : `ws://${hostpath}${wss_path}`;\n  let new_info = {\n    ...HTTP_CLIENT_INFO,\n    http_host: hostpath,\n    http_url,\n    wss_url\n  };\n  HTTP_CLIENT_INFO = new_info;\n  return new_info;\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport {\n  HTTP_CLIENT_INFO,\n  GetClientInfoFromWindowLocation // return new client info for a different hostpath\n};\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URNET Types and Type Conformance Utilities\n\n  This file contains the types used by NetEndpoint and NetPacket.\n  The NetEndpoint class is the main interface for sending and receiving\n  NetPackets. NetPackets are the encapsulated messages that are sent.\n\n  Type Concepts:\n\n  MSG Messages  - made of CHANNEL and a NAME, e.g. 'NET:HELLO_WORLD'\n  ADDR Address  - every endpoint has an address, e.g. 'UR_001'\n  NP NetPacket  - NetPacket-related types, e.g. NP_ID, NP_Chan, NP_Msg\n  EP Endpoint   - Endpoint-related type are in class-urnet-endpoint.ts\n  PKT Packet    - shorthand for NetPacket\n\n  CROSS PLATFORM USAGE --------------------------------------------------------\n\n  When using from nodejs mts file, you can only import functions from 'default',\n  so to access the NetPacket class do this:\n\n    import UR_TYPES from './urnet-types.ts';\n    const { AllocateAddress } = UR_TYPES.default; // note .default\n\n  You can import the types as usual, though:\n\n    import UR_TYPES, { NP_Msg, NP_Data } from './urnet-types.ts';\n\n  This is not required when importing from another .ts typescript file\n  such as class-urnet-endpoint.ts.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/// RUNTIME UTILITIES /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const VALID_MSG_CHANNELS = ['NET', 'SRV', 'LOCAL', ''] as const;\nexport const VALID_PKT_TYPES = [\n  'ping',\n  'signal',\n  'send',\n  'call',\n  '_auth', // special packet\n  '_reg', // special packet\n  '_decl' // special packet\n] as const;\nexport const SKIP_SELF_PKT_TYPES = ['call', 'send'];\nexport const VALID_ADDR_PREFIX = ['???', 'UR_', 'WSS', 'UDS', 'MQT', 'SRV'] as const;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const UADDR_DIGITS = 3; // number of digits in UADDR (padded with 0)\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport const USED_ADDRS = new Set<NP_Address>();\n// make string foo with a number of zeros equal to UADDR_DIGITS length\nconst zeroPad = `0`.padStart(UADDR_DIGITS, '0');\nexport const UADDR_NONE = `???${zeroPad}` as NP_Address; // unroutable address\n\n/// BASIC NETPACKET TYPES //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport type NP_ID = `pkt[${NP_Address}:${number}]`;\nexport type NP_Chan = (typeof VALID_MSG_CHANNELS)[number];\nexport type NP_Type = (typeof VALID_PKT_TYPES)[number];\nexport type NP_Msg = `${NP_Chan}${string}`; // e.g. 'NET:HELLO' or 'HELLO'\nexport type NP_Data = any;\nexport type NP_Dir = 'req' | 'res';\nexport type NP_AddrPre = (typeof VALID_ADDR_PREFIX)[number];\nexport type NP_Address = `${NP_AddrPre}${number}`; // range set by UADDR_DIGITS\n\n/// NETPACKET-RELATED TYPES ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport type NP_Hash = `${NP_Address}:${NP_ID}`; // for endpoint transactions\nexport type NP_Options = {\n  // for packet creation\n  dir?: NP_Dir;\n  rsvp?: boolean;\n};\n\n/// INTERFACES ////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** NetMessages are the encapsulated MESSAGE+DATA that are sent over URNET,\n *  with additional metadata to help with request/response and logging.\n *  This defines the data structure only. See NetPacket class for more.\n */\nexport interface I_NetMessage {\n  id: NP_ID;\n  msg_type: NP_Type;\n  msg: NP_Msg;\n  data: NP_Data;\n  src_addr: NP_Address;\n  hop_dir: NP_Dir;\n  hop_rsvp?: boolean;\n  hop_seq: NP_Address[];\n  hop_log: string[];\n  err?: string;\n}\n/// LOCAL TYPES ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** the function that sends a packet to the wire */\nexport type NS_SendFunc = (pkt: I_NetMessage) => void;\nexport type NS_DataFunc = (data: any) => void;\nexport type NS_CloseFunc = () => void;\nexport type NS_Options = {\n  send: NS_SendFunc;\n  onData: NS_DataFunc;\n  close: NS_CloseFunc;\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** this is the socket-ish object that we use to send data to the wire */\nexport interface I_NetSocket {\n  connector?: any; // the original connection object (if needed)\n  send: NS_SendFunc;\n  close: NS_CloseFunc; // close function\n  uaddr?: NP_Address; // assigned uaddr for this socket-ish object\n  auth?: any; // whatever authentication is needed for this socket\n  msglist?: NP_Msg[]; // messages queued for this socket\n  age?: number; // number of seconds since this socket was used\n  label?: string; // name of the socket-ish object\n  authenticated?: () => boolean;\n}\n\n/// FUNCTION SIGNATURES ///////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Type */\nexport function IsValidType(msg_type: string): boolean {\n  return VALID_PKT_TYPES.includes(msg_type as NP_Type);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** some message types should not invoke back to the same pkt origin\n *  returning true 'call' and 'send'\n */\nexport function SkipOriginType(msg_type: string): boolean {\n  return SKIP_SELF_PKT_TYPES.includes(msg_type as NP_Type);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of protocol-related NP_Type */\nexport function isSpecialPktType(msg_type: string): boolean {\n  if (!IsValidType(msg_type)) return false;\n  return msg_type.startsWith('_');\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Chan */\nexport function IsValidChannel(msg_chan: string): boolean {\n  return VALID_MSG_CHANNELS.includes(msg_chan as NP_Chan);\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Address */\nexport function IsValidAddress(addr: string): boolean {\n  if (typeof addr !== 'string') return false;\n  let prelen = 0;\n  if (\n    !VALID_ADDR_PREFIX.some(pre => {\n      prelen = pre.length;\n      return addr.startsWith(pre);\n    })\n  )\n    return false;\n  const num = parseInt(addr.slice(prelen));\n  if (isNaN(num)) return false;\n  return true;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime check of NP_Msg, returns array if good otherwise it returns undefined */\nexport function IsValidMessage(msg: string): [NP_Chan, string] {\n  try {\n    return DecodeMessage(msg);\n  } catch (err) {\n    console.log(err.message);\n    console.log(err.stack.split('\\n').slice(1).join('\\n').trim());\n    return undefined;\n  }\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** runtime create formatted address */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet ADDR_MAX_ID = 0;\ntype AllocateOptions = { prefix?: NP_AddrPre; addr?: NP_Address };\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** allocate a new address, optionally with a label */\nexport function AllocateAddress(opt?: AllocateOptions): NP_Address {\n  const fn = 'AllocateAddress';\n  let addr = opt?.addr; // manually-set address\n  let pre = opt?.prefix || 'UA'; // address prefix\n  if (addr === undefined) {\n    // generate a new address\n    let id = ++ADDR_MAX_ID;\n    let padId = `${id}`.padStart(UADDR_DIGITS, '0');\n    addr = `${pre}${padId}` as NP_Address;\n  } else if (USED_ADDRS.has(addr)) {\n    // the manually-set address is already in use\n    throw Error(`${fn} - address ${addr} already allocated`);\n  }\n  USED_ADDRS.add(addr);\n  return addr;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a CHANNEL:MESSAGE string, return the channel and message name in\n *  an array */\nexport function DecodeMessage(msg: NP_Msg): [NP_Chan, string] {\n  if (typeof msg !== 'string') throw Error(`message must be string: ${msg}`);\n  if (msg !== msg.toUpperCase()) throw Error(`message must be uppercase: ${msg}`);\n  const bits = msg.split(':');\n  if (bits.length === 0) throw Error(`invalid empty message`);\n  if (bits.length > 2) throw Error(`invalid channel:message format ${msg}`);\n  let [chan, name] = bits;\n  if (bits.length === 1) {\n    name = chan;\n    chan = 'LOCAL';\n  }\n  if (chan === '') chan = 'LOCAL';\n  if (!IsValidChannel(chan))\n    throw Error(`prefix must be ${VALID_MSG_CHANNELS.join(' ').trim()} not ${chan}`);\n  return [chan as NP_Chan, name];\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** make sure that the message is always consistent */\nexport function NormalizeMessage(msg: NP_Msg): NP_Msg {\n  let [chan, name] = DecodeMessage(msg);\n  if (chan === 'LOCAL') chan = '';\n  return `${chan}:${name}`;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** make sure that degenerate arrays turn into single objet */\nexport function NormalizeData(data: NP_Data): NP_Data {\n  if (Array.isArray(data) && data.length == 1) return data[0];\n  return data;\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is a local request */\nexport function IsLocalMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'LOCAL';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is a network request */\nexport function IsNetMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'NET' || chan === 'SRV';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** return true if message is implemented by main URNET server */\nexport function IsServerMessage(msg: NP_Msg): boolean {\n  const [chan] = DecodeMessage(msg);\n  return chan === 'SRV';\n}\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** given a packet, return a unique hash string */\nexport function GetPacketHashString(pkt: I_NetMessage): NP_Hash {\n  return `${pkt.src_addr}:${pkt.id}`;\n}\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetPacket encapsulates a message sent over URNET, including metadata\n  to route the packet across the network and return responses.\n\n  Works closely with NetEndpoint, which handles the actual sending and\n  receiving of packets. In practice, use Endpoint.newPacket() to create a new \n  packet that has the correct source address and id.\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import this ts file as 'default' \n  property. To access the NetPacket class do this:\n\n    import CLASS_NP from './class-urnet-packet.ts';\n    const NetPacket = CLASS_NP.default; // note .default\n\n  This is not required when importing from another .ts typescript file\n  such as class-urnet-endpoint.ts.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PR } from '@ursys/core';\nimport { I_NetMessage, NP_Address } from './urnet-types';\nimport { NP_ID, NP_Type, NP_Dir, I_NetSocket } from './urnet-types';\nimport {\n  IsValidMessage,\n  IsValidAddress,\n  IsValidType,\n  UADDR_NONE\n} from './urnet-types';\nimport { NP_Msg, NP_Data, DecodeMessage } from './urnet-types';\nimport { NP_Options } from './urnet-types';\n\nconst PR = typeof process !== 'undefined' ? 'Packet'.padEnd(13) : 'Packet:';\nconst LOG = (...args) => console.log(PR, ...args);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass NetPacket implements I_NetMessage {\n  id: NP_ID; // network-wide unique id for this packet\n  msg_type: NP_Type; // ping, signal, send, call\n  msg: NP_Msg; // name of the URNET message\n  data: any; // payload of the URNET message\n  auth: string; // authentication token\n  src_addr: NP_Address; // URNET address of the sender\n  hop_seq: NP_Address[]; // URNET addresses that have seen this packet\n  hop_log: string[]; // log of debug messages by hop\n  hop_dir: NP_Dir; // direction of the packet 'req' or 'res'\n  hop_rsvp?: boolean; // whether the packet is a response to a request\n  err?: string; // returned error message\n\n  constructor(msg?: NP_Msg, data?: NP_Data) {\n    // metadata\n    this.id = undefined;\n    this.src_addr = undefined;\n    this.hop_rsvp = false;\n    this.hop_seq = [];\n    this.hop_log = [];\n    this.auth = undefined;\n    this.err = undefined;\n    //\n    if (data !== undefined) this.data = data;\n    if (typeof msg === 'string') {\n      if (!IsValidMessage(msg)) throw Error(`invalid msg format: ${msg}`);\n      this.msg = msg;\n    }\n  }\n\n  /** after creating a new packet, use setMeta() to assign id and envelope\n   *  meta used for routing and return packets\n   */\n  setMeta(msg_type: NP_Type, opt?: NP_Options) {\n    if (!IsValidType(msg_type)) throw Error(`invalid msg_type: ${msg_type}`);\n    this.msg_type = msg_type;\n    // optional overrides\n    this.hop_dir = opt?.dir || 'req';\n    this.hop_rsvp = opt?.rsvp || false;\n  }\n\n  /** add hop to the hop sequence */\n  addHop(hop: NP_Address) {\n    if (!IsValidAddress(hop)) throw Error(`invalid hop: ${hop}`);\n    this.hop_seq.push(hop);\n  }\n\n  /** utility setters w/ checks - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** manually set the source address, with check */\n  setSrcAddr(s_addr: NP_Address): NetPacket {\n    if (!IsValidAddress(s_addr)) throw Error(`invalid src_addr: ${s_addr}`);\n    // don't allow changing the src_addr once it's set by send()\n    // use clone() to make a new packet with a different src_addr\n    if (this.hop_seq.length > 0 && this.hop_seq[0] !== s_addr)\n      throw Error(`src_addr ${s_addr} != ${this.hop_seq[0]}`);\n    this.src_addr = s_addr;\n    return this;\n  }\n\n  /** manually set direction */\n  setDir(dir: NP_Dir): NetPacket {\n    if (dir !== 'req' && dir !== 'res') throw Error(`invalid dir: ${dir}`);\n    this.hop_dir = dir;\n    return this;\n  }\n\n  /** set the authorization token */\n  setAuth(auth: string): NetPacket {\n    if (typeof auth !== 'string') {\n      LOG('setAuth: invalid auth', auth);\n      throw Error(`invalid auth: ${auth}`);\n    }\n    this.auth = auth;\n    return this;\n  }\n\n  /** set message and data */\n  setMsgData(msg: NP_Msg, data: NP_Data): NetPacket {\n    this.setMsg(msg);\n    this.setData(data);\n    return this;\n  }\n  /** set message */\n  setMsg(msg: NP_Msg): NetPacket {\n    this.msg = msg;\n    return this;\n  }\n  /** set data */\n  setData(data: NP_Data): NetPacket {\n    this.data = data;\n    return this;\n  }\n  /** merge data */\n  mergeData(data: NP_Data): NetPacket {\n    this.data = { ...this.data, ...data };\n    return this;\n  }\n\n  /** packet reconstruction - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** make a packet from existing JSON */\n  setFromJSON(json: string): NetPacket {\n    if (typeof json !== 'string')\n      throw Error(`invalid json: ${json}, is ${typeof json}`);\n    return this.deserialize(json);\n  }\n  /** make a packet from existing object */\n  setFromObject(pktObj) {\n    const fn = 'setFromObject';\n    if (typeof pktObj !== 'object')\n      throw Error(`invalid pktObj: ${pktObj}, is ${typeof pktObj}`);\n    this.id = pktObj.id;\n    this.msg = pktObj.msg;\n    if (pktObj.data === undefined)\n      LOG(fn, `... pktObj${pktObj.id} .data is undefined`);\n    this.data = pktObj.data;\n    this.src_addr = pktObj.src_addr;\n    this.hop_log = pktObj.hop_log;\n    this.msg_type = pktObj.msg_type;\n    this.hop_seq = pktObj.hop_seq;\n    this.hop_dir = pktObj.hop_dir;\n    this.hop_rsvp = pktObj.hop_rsvp;\n    this.err = pktObj.err;\n    this.auth = pktObj.auth;\n    return this;\n  }\n\n  /** packet transport  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** rsvp required? */\n  hasRsvp() {\n    return this.hop_rsvp;\n  }\n\n  lastHop() {\n    return this.hop_seq[this.hop_seq.length - 1];\n  }\n\n  hasAuth() {\n    return this.auth !== undefined;\n  }\n\n  /** types that begin with _ are protocol messages that bypass dispatchPacket() */\n  isSpecialPkt() {\n    return this.msg_type.startsWith('_');\n  }\n\n  /** authorization packets are the first packet sent on a client connection to\n   *  the message gateway server. They must not have a src_addr aassigned, using\n   *  the special UADDR_NONE value instead.\n   */\n  isBadAuthPkt() {\n    let error = '';\n    let a = this.msg_type === '_auth';\n    let b = this.msg === 'SRV:AUTH';\n    let c = this.src_addr === UADDR_NONE;\n    if (!a) error += `msg_type ${this.msg_type} not _auth. `;\n    if (!b) error += `msg ${this.msg} not SRV:AUTH. `;\n    if (!c) error += `src_addr ${this.src_addr} not ${UADDR_NONE} `;\n    if (error.length > 0) return `isBadAuthPkt: ${error}`;\n    return undefined;\n  }\n\n  /** registration packets are sent on a client connection after\n   *  authentication. They must have a src_addr assigned, which was returned\n   *  by the server in the response to the auth packet, and this must match\n   *  the server's stored uaddr for the client connection.\n   */\n  isBadRegPkt(socket: I_NetSocket) {\n    let error = '';\n    let a = this.msg_type === '_reg';\n    let b = this.msg === 'SRV:REG';\n    let c = this.src_addr === socket.uaddr;\n    if (!a) error += `msg_type ${this.msg_type} not _reg. `;\n    if (!b) error += `msg ${this.msg} not SRV:REG. `;\n    if (!c) error += `src_addr ${this.src_addr} not ${socket.uaddr}. `;\n    if (error.length > 0) return `isBadRegPkt: ${error}`;\n    return undefined;\n  }\n\n  authenticate(socket: I_NetSocket) {\n    const { msg, src_addr, hop_dir, hop_seq } = this;\n    if (!this.isResponse()) LOG(PR, `would auth ${src_addr} '${msg}'`);\n    return true;\n  }\n\n  isRequest() {\n    return this.hop_dir === 'req';\n  }\n\n  isResponse() {\n    return this.hop_dir === 'res';\n  }\n\n  /** serialization - - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  serialize(): string {\n    return JSON.stringify(this);\n  }\n  deserialize(data: string): NetPacket {\n    try {\n      let obj = JSON.parse(data);\n      return this.setFromObject(obj);\n    } catch (err) {\n      LOG('NetPacket.deserialize failed', data);\n    }\n  }\n\n  /** information utilities - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  isValidType(type: NP_Type): boolean {\n    return IsValidType(type);\n  }\n\n  isValidMessage(msg: NP_Msg): boolean {\n    return IsValidMessage(msg) !== undefined;\n    // note difference with IsValidMessage(), which returns [chan, msg] if valid\n  }\n\n  decodeMessage(msg: NP_Msg): [chan: string, msg: string] {\n    return DecodeMessage(msg);\n  }\n\n  /** debugging - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** add error string to packet error */\n  error(msg: string) {\n    if (!this.err) this.err = '';\n    this.err += msg;\n    return msg;\n  }\n\n  /** manually add a transport-related message eto the hog log. this is not\n   *  the same as hop_seq which is used to track the routing of the packet.\n   */\n  hopLog(msg: string) {\n    const info = `${this.id} ${this.hop_dir}`;\n    this.hop_log.push(`${info}: ${msg}`);\n    return msg;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport { NetPacket };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetEndpoint is a connection object that talks to the UR Messaging Network.\n  Both servers and clients can use this class to build connections over\n  different transports (HTTP, WS, etc).\n\n  Server-Only API\n  - configAsServer(srv_addr: NP_Address): void\n  - addClient(socket: I_NetSocket): NP_Address\n  - removeClient(uaddr: NP_Address): NP_Address\n  - _ingestClientPacket(jsonData: string, socket: I_NetSocket): NetPacket\n\n  Client-Only API\n  - connectAsClient(gateway: I_NetSocket, auth: TClientAuth): Promise<NP_Data>\n  - disconnectAsClient(): void\n  - _ingestServerPacket(jsonData: string, socket: I_NetSocket): void\n\n  Shared API\n  - addMessageHandler(msg: NP_Msg, handler: HandlerFunc): void\n  - call(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - send(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - signal(msg: NP_Msg, data: NP_Data): void\n  - ping(msg: NP_Msg): Promise<NP_Data>\n  - netCall(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - netSend(msg: NP_Msg, data: NP_Data): Promise<NP_Data>\n  - netSignal(msg: NP_Msg, data: NP_Data): void\n  - netPing(msg: NP_Msg): Promise<NP_Data>\n\n  See https://github.com/dsriseah/ursys/wiki/URSYS-Network-Concepts for\n  documentation on using this class\n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './class-urnet-endpoint.ts';\n    const NetEndpoint = EP_DEFAULT.default; // note .default\n\n  You can import the types as usual, though:\n\n    import EP_DEFAULT, { I_NetSocket } from './urnet-types.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PR } from '@ursys/core';\nimport { NetPacket } from './class-urnet-packet.ts';\nimport {\n  NP_ID,\n  NP_Address,\n  NP_Msg,\n  NP_Data,\n  NP_Hash,\n  UADDR_NONE\n} from './urnet-types.ts';\nimport type { I_NetSocket } from './class-urnet-socket.ts';\nimport { GetPacketHashString } from './urnet-types.ts';\nimport {\n  IsLocalMessage,\n  IsNetMessage,\n  IsValidAddress,\n  SkipOriginType,\n  AllocateAddress,\n  NormalizeMessage,\n  NormalizeData\n} from './urnet-types.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = true;\nconst PR =\n  typeof process !== 'undefined' ? 'EndPoint'.padEnd(13) : 'EndPoint'.padEnd(11);\nconst LOG = console.log.bind(console);\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet AGE_INTERVAL = 1000; // milliseconds\nlet AGE_MAX = 60 * 30; // 30 minutes\n\n/// LOCAL TYPES ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype HandlerFunc = (data: NP_Data) => NP_Data | void;\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype HandlerSet = Set<HandlerFunc>; // set(handler1, handler2, ...)\ntype AddressSet = Set<NP_Address>; // ['UA001', 'UA002', ...]\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype SocketMap = Map<NP_Address, I_NetSocket>; //\ntype ForwardMap = Map<NP_Msg, AddressSet>; // msg->set of uaddr\ntype HandlerMap = Map<NP_Msg, HandlerSet>; // msg->handler functions\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** transactions store promises for resolving sent packet with return values */\ntype TransactionMap = Map<NP_Hash, PktResolver>; // hash->resolver\ntype PktResolver = {\n  msg: NP_Msg;\n  uaddr: NP_Address;\n  resolve: (value?: unknown) => void;\n  reject: (reason?: any) => void;\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** returned by getRoutingInfo() for external users of this class */\ntype PktRoutingInfo = {\n  msg: NP_Msg;\n  src_addr: NP_Address;\n  self_addr: NP_Address;\n  gateway: I_NetSocket;\n  clients: I_NetSocket[];\n};\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\ntype TClientAuth = {\n  identity: string;\n  secret: string;\n};\ntype TClientReg = {\n  name: string;\n  type: string;\n};\ntype TClientDeclare = {\n  msg_list: NP_Msg[];\n};\n\n/// UTILITY FUNCTIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** utility to dump packet info to console */\nfunction _PKT(ep: NetEndpoint, fn: string, text: string, pkt: NetPacket) {\n  let { id, msg, msg_type } = pkt;\n  if (id === undefined && msg_type === '_reg') id = `pkt[${UADDR_NONE}:0]`;\n  let out = `${ep.uaddr} ${text} '${msg}' `.padEnd(40, '~');\n  out += ` ${id.padEnd(12)} ${fn}`;\n  return out;\n}\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nclass NetEndpoint {\n  handled_msgs: HandlerMap; // msg->handlers[]\n  //\n  uaddr: NP_Address; // the address for this endpoint\n  client_socks: SocketMap; // uaddr->I_NetSocket\n  remoted_msgs: ForwardMap; // msg->uaddr[]\n  transactions: TransactionMap; // hash->resolver\n  //\n  cli_counter: number; // counter for generating unique uaddr\n  pkt_counter: number; // counter for generating packet ids\n  //\n  cli_gateway: I_NetSocket; // gateway to server\n  cli_sck_timer: any; // timer for checking socket age\n  cli_ident: any; // client credentials to request authentication\n  cli_auth: any; // client access token for\n  cli_reg: TClientReg; // client registration status\n\n  constructor() {\n    //\n    this.uaddr = undefined; // assigned address\n    // endpoint as client\n    this.cli_ident = undefined; // client identity\n    this.cli_auth = undefined; // client access token\n    this.cli_reg = undefined; // client registration status\n    this.cli_gateway = undefined; // client gateway\n    // endpoint as server\n    this.client_socks = undefined;\n    this.remoted_msgs = undefined;\n    // endpoint message handling support\n    this.handled_msgs = new Map<NP_Msg, HandlerSet>();\n    this.transactions = new Map<NP_Hash, PktResolver>();\n    // runtime packet, socket counters\n    this.pkt_counter = 0;\n    this.cli_counter = 0;\n    this.cli_sck_timer = null; // socket aging placeholder\n  }\n\n  /** API: initialize this endpoint's client server, providing a hardcoded\n   *  server UADDR that is distinct from those used by client pools\n   */\n  configAsServer(srv_addr: NP_Address) {\n    const fn = 'configAsServer:';\n    if (!IsValidAddress(srv_addr)) throw Error(`${fn} invalid srv_addr ${srv_addr}`);\n    if (this.uaddr && this.uaddr !== srv_addr) {\n      let err = `${fn} uaddr ${this.uaddr} already set.`;\n      throw Error(err);\n    }\n    this.uaddr = srv_addr;\n    // make sure we don't nuke\n    if (this.client_socks !== undefined)\n      LOG(PR, this.uaddr, `already configured`, [...this.client_socks.keys()]);\n    this.client_socks = new Map<NP_Address, I_NetSocket>();\n    if (this.remoted_msgs !== undefined)\n      LOG(PR, this.uaddr, `already configured`, [...this.remoted_msgs.keys()]);\n    this.remoted_msgs = new Map<NP_Msg, AddressSet>();\n    // add default service message handlers here\n    this.addMessageHandler('SRV:REFLECT', data => {\n      data.info = `built-in service`;\n      return data;\n    });\n  }\n\n  /** API: Server data event handler for incoming data from a client connection.\n   *  This is the mirror to _ingestServerPacket() function used by client endpoints.\n   *  This is the entry point for incoming data from clients */\n  _ingestClientPacket(jsonData: string, socket: I_NetSocket): NetPacket {\n    let pkt = this.newPacket().deserialize(jsonData);\n    let retPkt: NetPacket;\n\n    // 1. protocol: authentication packet (once)\n    retPkt = this._handleAuthRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    /** from this point forward, packets are authenticated **/\n\n    // 2. is this a special registration packet (anytime)\n    retPkt = this._handleRegRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    // 3. is this a special declaration packet (anytime)\n    retPkt = this._handleDeclRequest(pkt, socket);\n    if (retPkt) return retPkt; // ...to client _ingestServerPacket()\n\n    // 4. otherwise, handle the packet normally through the message interface\n    this.dispatchPacket(pkt);\n  }\n\n  /** API: when a client connects to this endpoint, register it as a socket and\n   *  allocate a uaddr for it */\n  addClient(socket: I_NetSocket): NP_Address {\n    const fn = 'addClient:';\n    if (typeof socket !== 'object') throw Error(`${fn} invalid socket`);\n    if (socket.uaddr !== undefined) throw Error(`${fn} socket already added`);\n    const new_uaddr = AllocateAddress({ prefix: 'UR_' });\n    socket.uaddr = new_uaddr;\n    socket.age = 0;\n    socket.auth = undefined; // filled-in by socket authorization\n    socket.msglist = undefined; // filled-in by message registration\n    this.client_socks.set(new_uaddr, socket);\n    // LOG(PR,this.uaddr, `socket ${new_uaddr} registered`);\n    return new_uaddr;\n  }\n\n  /** API: when a client disconnects from this endpoint, delete its socket and\n   *  remove all message forwarding */\n  removeClient(uaddr_obj: NP_Address | I_NetSocket): NP_Address {\n    const fn = 'removeClient:';\n    let uaddr = typeof uaddr_obj === 'string' ? uaddr_obj : uaddr_obj.uaddr;\n    if (typeof uaddr !== 'string') {\n      LOG(PR, `${fn} invalid uaddr ${typeof uaddr}`);\n      return undefined;\n    }\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    // remoted_msgs is msg->set of uaddr, so iterate over all messages\n    this._deleteRemoteMessagesForAddress(uaddr);\n    // delete the socket\n    this.client_socks.delete(uaddr);\n    // LOG(PR,this.uaddr, `socket ${uaddr} deleted`);\n    return uaddr;\n  }\n\n  /** API: given a uaddr, return the socket */\n  getClient(uaddr: NP_Address): I_NetSocket {\n    const fn = 'getClient:';\n    if (this.client_socks === undefined) return undefined;\n    return this.client_socks.get(uaddr);\n  }\n\n  /** API: start a timer to check for dead sockets */\n  enableClientAging(activate: boolean) {\n    const fn = 'enableClientAging:';\n    if (activate) {\n      if (this.cli_sck_timer) clearInterval(this.cli_sck_timer);\n      this.cli_sck_timer = setInterval(() => {\n        this.client_socks.forEach((socket, uaddr) => {\n          socket.age += AGE_INTERVAL;\n          if (socket.age > AGE_MAX) {\n            LOG(PR, this.uaddr, `socket ${uaddr} expired`);\n            // put stuff here\n          }\n        });\n      }, AGE_INTERVAL);\n      return;\n    }\n    if (this.cli_sck_timer) clearInterval(this.cli_sck_timer);\n    this.cli_sck_timer = null;\n    LOG(PR, this.uaddr, `timer stopped`);\n  }\n\n  /** support: handle auth packet if the session.auth is not defined */\n  _handleAuthRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (!socket.authenticated()) {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      const error = pkt.isBadAuthPkt();\n      if (error) {\n        console.error(PR, error);\n        pkt.data = { error };\n        return pkt;\n      }\n      /** placeholder authentication check **/\n      const { identity, secret } = pkt.data;\n      if (identity) {\n        socket.auth = identity;\n        pkt.data = { uaddr: socket.uaddr, cli_auth: 'ServerProvidedAuthToken' };\n      } else {\n        pkt.data = { error: 'invalid identity' };\n      }\n      /** end placeholder **/\n      return pkt;\n    }\n    return undefined;\n  }\n\n  /** support: handle registration packet */\n  _handleRegRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (!pkt.isBadRegPkt(socket)) {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      if (pkt.msg !== 'SRV:REG') {\n        pkt.data = { error: `invalid reg packet ${pkt.msg}` };\n        return pkt;\n      }\n      if (pkt.src_addr !== socket.uaddr) {\n        LOG(PR, 'src address mismatch', pkt.src_addr, '!= sock', socket.uaddr);\n        pkt.data = { error: 'address mismatch' };\n        return pkt;\n      }\n      const { name, type } = pkt.data;\n      if (name) {\n        const { uaddr } = socket;\n        pkt.data = { ok: true, status: `registered name:${name} type:${type}` };\n        return pkt;\n      }\n      pkt.data = { error: 'registration failed' };\n      return pkt;\n    }\n    return undefined;\n  }\n\n  /** support: handle client dynamic definitions */\n  _handleDeclRequest(pkt: NetPacket, socket: I_NetSocket): NetPacket {\n    if (pkt.msg_type === '_decl') {\n      pkt.setDir('res');\n      pkt.addHop(this.uaddr);\n      if (pkt.msg !== 'SRV:DEF') {\n        console.log('invalid def packet', pkt.msg);\n        pkt.data = { error: `invalid def packet ${pkt.msg}` };\n        return pkt;\n      }\n      // currently support msg_list only\n      pkt.data.status = [];\n      const { msg_list } = pkt.data;\n      const { uaddr } = socket;\n      if (Array.isArray(msg_list)) {\n        this.registerRemoteMessagesToAddress(uaddr, msg_list);\n        pkt.data.status.push(`registered ${msg_list.length} messages`);\n      }\n      //\n      // ... other definitions can go here\n      //\n      if (pkt.data.status.length === 0) {\n        pkt.data = { error: 'no definitions' };\n        return pkt;\n      }\n    }\n    return undefined;\n  }\n\n  /** client connection handshaking - - - - - - - - - - - - - - - - - - - - **/\n\n  /** API: client endpoints need to have an \"address\" assigned to them,\n   *  otherwise the endpoint will not work */\n  async connectAsClient(gateway: I_NetSocket, auth: TClientAuth): Promise<NP_Data> {\n    const fn = 'connectAsClient:';\n    if (gateway && typeof gateway.send === 'function') {\n      this.cli_gateway = gateway;\n    } else throw Error(`${fn} invalid gateway`);\n    if (auth) {\n      const pkt = this.newAuthPacket(auth);\n      const { msg } = pkt;\n\n      /** MAGIC **/\n      /** await promise, which resolves when server responds to the auth packet */\n      let authData: NP_Data = await this._queueTransaction(pkt, gateway);\n      /** resumes when _handleAuthResponse() resolves the transaction **/\n      /** END MAGIC **/\n\n      // handle authdata\n      const { uaddr, cli_auth, error } = authData;\n      if (error) {\n        LOG(PR, `${fn} error:`, error);\n        return false;\n      }\n      if (!IsValidAddress(uaddr)) throw Error(`${fn} invalid uaddr ${uaddr}`);\n      this.uaddr = uaddr;\n      if (cli_auth === undefined) throw Error(`${fn} invalid cli_auth`);\n      this.cli_auth = cli_auth;\n      LOG(PR, 'AUTHENTICATED', uaddr, cli_auth);\n      this.cli_auth = cli_auth;\n      return authData;\n    }\n    throw Error(`${fn} arg must be identity`);\n  }\n\n  /** API: Client data event handler for incoming data from the gateway. This is\n   *  the mirror to _ingestClientPacket() function that is used by servers. This\n   *  is entry point for incoming data from server\n   */\n  _ingestServerPacket(jsonData: string, socket: I_NetSocket): void {\n    const fn = '_ingestServerPacket:';\n    const pkt = this.newPacket().deserialize(jsonData);\n    // 1. is this connection handshaking for clients?\n    if (this.cli_gateway) {\n      // only clients have this.cli_gateway socket defined\n      // special packets are handled separately from the normal message dispatcher\n      // the parallel _ingestClientPacket() function for servers are who return\n      // these response packets\n      if (this._handleAuthResponse(pkt)) return;\n      if (this._handleRegResponse(pkt)) return;\n      if (this._handleDeclResponse(pkt)) return;\n    }\n    // 2. otherwise handle the message interface normally\n    this.dispatchPacket(pkt);\n  }\n\n  /** API: register client with client endpoint info */\n  async declareClientProperties(info: TClientReg): Promise<NP_Data> {\n    const fn = 'declareClientProperties:';\n    if (!this.cli_gateway) throw Error(`${fn} no gateway`);\n    const pkt = this.newRegPacket();\n    pkt.data = { ...info };\n\n    /** MAGIC **/\n    /** suspend through transaction **/\n    let regData: NP_Data = await this._queueTransaction(pkt, this.cli_gateway);\n    /** resumes when _handleAuthResponse() resolves the transaction **/\n    /** END MAGIC **/\n\n    const { ok, status, error } = regData;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n      return regData;\n    }\n    if (ok) {\n      LOG(PR, 'REGISTERED', status);\n      this.cli_reg = info; // save registration info\n      return regData;\n    }\n    throw Error(`${fn} unexpected response`, regData);\n  }\n\n  /** API: declare client messages */\n  async declareClientMessages() {\n    const fn = 'declareClientMessages:';\n    const msg_list = this.getNetMessageNames();\n    const response = await this._declareClientServices({ msg_list });\n    const { msg_list: rmsg_list, error } = response;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n    } else {\n      LOG(PR, `DECLARED ${rmsg_list.length} messages`);\n      rmsg_list.forEach(msg => LOG(PR, `  '${msg}'`));\n    }\n    return response;\n  }\n\n  /** support: handle authentication response packet directly rather than through\n   *  the netcall interface in dispatchPacket() */\n  _handleAuthResponse(pkt: NetPacket): boolean {\n    const fn = '_handleAuthResponse:';\n    if (pkt.msg_type !== '_auth') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    this.resolveTransaction(pkt);\n    // auth resumes in connectAsClient() magical await requestAuth\n    return true;\n  }\n\n  /** support: handle registration response packet directly rather than through\n   *  the netcall interface in dispatchPacket() */\n  _handleRegResponse(pkt: NetPacket): boolean {\n    const fn = '_handleRegResponse:';\n    if (pkt.msg_type !== '_reg') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    if (pkt.src_addr !== this.uaddr) throw Error(`${fn} misaddressed packet???`);\n    // resuming from declareClientProperties() await requestReg\n    this.resolveTransaction(pkt);\n    return true;\n  }\n\n  /** support: handle declaration packet */\n  _handleDeclResponse(pkt: NetPacket): boolean {\n    const fn = '_handleDeclResponse:';\n    if (pkt.msg_type !== '_decl') return false;\n    if (pkt.hop_dir !== 'res') return false;\n    if (pkt.src_addr !== this.uaddr) throw Error(`${fn} misaddressed packet???`);\n    // resuming from _declareClientServices() await requestReg\n    this.resolveTransaction(pkt);\n    return true;\n  }\n\n  /** message declaration and invocation - - - - - - - - - - - - - - - - - -**/\n\n  /** API: declare a message handler for a given message */\n  addMessageHandler(msg: NP_Msg, handler: HandlerFunc) {\n    const fn = 'addMessageHandler:';\n    // LOG(PR,this.uaddr, `reg handler '${msg}'`);\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    if (msg !== msg.toUpperCase()) throw Error(`${fn} msg must be uppercase`);\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(msg);\n    if (!this.handled_msgs.has(key))\n      this.handled_msgs.set(key, new Set<HandlerFunc>());\n    const handler_set = this.handled_msgs.get(key);\n    handler_set.add(handler);\n  }\n\n  /** API: remove a previously declared message handler for a given message */\n  deleteMessageHandler(msg: NP_Msg, handler: HandlerFunc) {\n    const fn = 'deleteMessageHandler:';\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    if (typeof handler !== 'function') throw Error(`${fn} invalid handler`);\n    const key = NormalizeMessage(msg);\n    const handler_set = this.handled_msgs.get(key);\n    if (!handler_set) throw Error(`${fn} unexpected empty set '${key}'`);\n    handler_set.delete(handler);\n  }\n\n  /** API: call local message registered on this endPoint only */\n  async call(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'call:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    const promises = [];\n    handlers.forEach(handler => {\n      promises.push(\n        new Promise((resolve, reject) => {\n          try {\n            resolve(handler({ ...data })); // copy of data\n          } catch (err) {\n            reject(err);\n          }\n        })\n      );\n    });\n    if (promises.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    // wait for all promises to resolve\n    const resData = await Promise.all(promises);\n    return resData;\n  }\n\n  /** API: send local message registered on this endPoint only, returning no data */\n  async send(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'send:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    handlers.forEach(handler => {\n      handler({ ...data }); // copy of data\n    });\n    return Promise.resolve(true);\n  }\n\n  /** API: signal local message registered on this endPoint only, returning no data.\n   */\n  signal(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'signal:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0)\n      return Promise.resolve({ error: `no handler for '${msg}'` });\n    handlers.forEach(handler => {\n      handler({ ...data }); // copy of data\n    });\n  }\n\n  /** API: ping local message, return with number of handlers */\n  async ping(msg: NP_Msg): Promise<NP_Data> {\n    const fn = 'ping:';\n    if (!IsLocalMessage(msg)) throw Error(`${fn} '${msg}' not local (drop prefix)`);\n    const handlers = this.getMessageHandlers(msg);\n    return Promise.resolve(handlers.length);\n  }\n\n  /** API: call net message, resolves when packet returns from server with data */\n  async netCall(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'netCall:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('call', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      // note: this is similar to _queueTransaction() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** API: send net message, returning promise that will resolve when the server has\n   *  received and processed/forwarded the message */\n  async netSend(msg: NP_Msg, data: NP_Data): Promise<NP_Data> {\n    const fn = 'netSend:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('send', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      // note: this is similar to _queueTransaction() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** API: signal net message, returning void (not promise)\n   *  used for the idea of 'raising signals' as opposed to 'sending data'. It\n   *  resolves immediately when the signal is sent, and does not check with the\n   *  server  */\n  netSignal(msg: NP_Msg, data: NP_Data): void {\n    const fn = 'netSignal:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg, data);\n    pkt.setMeta('signal', {\n      dir: 'req',\n      rsvp: false\n    });\n    /** no magic, just send and forget **/\n    this.initialSend(pkt);\n  }\n\n  /** API: returns with a list of uaddr from the server which is the uaddr of the\n   *  all clients that have registered for the message */\n  async netPing(msg: NP_Msg): Promise<NP_Data> {\n    const fn = 'netPing:';\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' missing NET prefix`);\n    const pkt = this.newPacket(msg);\n    pkt.setMeta('ping', {\n      dir: 'req',\n      rsvp: true\n    });\n    /** MAGIC **/\n    let resData = await new Promise((resolve, reject) => {\n      // note: this is similar to _queueTransaction() but without the extra checks\n      const hash = GetPacketHashString(pkt);\n      if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n      const meta = { msg, uaddr: this.uaddr }; // this is transaction meta, not pkt meta\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      try {\n        this.initialSend(pkt);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    /** end MAGIC **/\n    return resData;\n  }\n\n  /** packet utilities  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** declare client attributes is a generic declaration packet that can contain\n   *  any number of attributes that the client wants to declare to the server.\n   *  for example, see declareClientMessages() */\n  async _declareClientServices(def: TClientDeclare): Promise<NP_Data> {\n    const fn = '_declareClientServices:';\n    if (!this.cli_gateway) throw Error(`${fn} no gateway`);\n    const pkt = this.newDeclPacket();\n    pkt.data = { ...def };\n    const { msg } = pkt;\n\n    /** MAGIC **/\n    /** suspend through transaction **/\n    let declared: NP_Data = await this._queueTransaction(pkt, this.cli_gateway);\n    /** resumes when _handleAuthResponse() resolves the transaction **/\n    /** END MAGIC **/\n\n    const { error, status } = declared;\n    if (error) {\n      LOG(PR, `${fn} error:`, error);\n      return declared;\n    }\n    if (status) return declared;\n    // neither error or status, so something went wrong\n    throw Error(`${fn} unexpected response`, declared);\n  }\n\n  /** shuts down the gateway to server, forcing close\n   *  Chrome 125.0.6422.77 doesn't seem to send a close frame on reload\n   *  Firefox 126.0 doesn't fire beforeunload\n   */\n  disconnectAsClient() {\n    if (this.cli_gateway === undefined) return;\n    if (typeof this.cli_gateway.close === 'function') {\n      this.cli_gateway.close();\n    }\n    this.cli_gateway = undefined;\n  }\n\n  /** endpoint lookup tables - - - - - - - - - - - - - - - - - - - -  - - - **/\n\n  /** return true if the message is handled anywhere */\n  packetHasHandler(pkt: NetPacket): boolean {\n    const fn = 'messageHasHandler:';\n    const a = this.getMessageHandlers(pkt.msg).length > 0;\n    const b = this.isServer() && this.getMessageAddresses(pkt.msg).length > 0;\n    return a || b;\n  }\n\n  /** get list of messages allocated to a uaddr */\n  getMessagesForAddress(uaddr: NP_Address): NP_Msg[] {\n    const fn = 'getMessagesForAddress:';\n    if (!this.isServer()) return []; // invalid for client-only endpoints\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    // remoted_msgs is msg->set of uaddr, so iterate over all messages\n    const msg_list: NP_Msg[] = [];\n    this.remoted_msgs.forEach((addr_set, msg) => {\n      if (addr_set.has(uaddr)) msg_list.push(msg);\n    });\n    return msg_list;\n  }\n\n  /** get list of UADDRs that a message is forwarded to */\n  getMessageAddresses(msg: NP_Msg): NP_Address[] {\n    const fn = 'getMessageAddresses:';\n    if (!this.isServer()) return []; // invalid for client-only endpoints\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    const key = NormalizeMessage(msg);\n    if (!this.remoted_msgs.has(key))\n      this.remoted_msgs.set(key, new Set<NP_Address>());\n    const addr_set = this.remoted_msgs.get(key);\n    const addr_list = Array.from(addr_set);\n    return addr_list;\n  }\n\n  /** return list of local handlers for given message */\n  getMessageHandlers(msg: NP_Msg): HandlerFunc[] {\n    const fn = 'getMessageHandlers:';\n    if (this.handled_msgs === undefined) return [];\n    if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n    const key = NormalizeMessage(msg);\n    if (!this.handled_msgs.has(key))\n      this.handled_msgs.set(key, new Set<HandlerFunc>());\n    const handler_set = this.handled_msgs.get(key);\n    if (!handler_set) throw Error(`${fn} unexpected empty set '${key}'`);\n    const handler_list = Array.from(handler_set);\n    return handler_list;\n  }\n\n  /** informational routing information - - - - - - - - - - - - - - - - - - **/\n\n  /** return handler list for this endpoint */\n  getMessageNames(): NP_Msg[] {\n    // get message keys from handled_msgs\n    const list = [];\n    this.handled_msgs.forEach((handler_set, key) => {\n      list.push(key);\n    });\n    return list;\n  }\n\n  /** return only net messages */\n  getNetMessageNames(): NP_Msg[] {\n    const list = [];\n    this.handled_msgs.forEach((handler_set, key) => {\n      if (IsNetMessage(key)) list.push(key);\n    });\n    return list;\n  }\n\n  /** return list of active transactions for this endpoint */\n  getPendingTransactions(): { hash: NP_Hash; msg: NP_Msg; uaddr: NP_Address }[] {\n    // return array of objects { hash, msg, uaddr }\n    const fn = 'getPendingTransactions:';\n    const list = [];\n    this.transactions.forEach((transaction, hash) => {\n      const { msg, uaddr } = transaction;\n      list.push({ hash, msg, uaddr });\n    });\n    return list;\n  }\n\n  /** server endpoints manage list of messages in clients  - - - - -  - - - **/\n\n  /** register a message handler for a given message to passed uaddr */\n  registerRemoteMessagesToAddress(uaddr: NP_Address, msgList: NP_Msg[]) {\n    const fn = 'registerRemoteMessagesToAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    msgList.forEach(msg => {\n      if (typeof msg !== 'string') throw Error(`${fn} invalid msg`);\n      if (msg !== msg.toUpperCase()) throw Error(`${fn} msg must be uppercase`);\n      const key = NormalizeMessage(msg);\n      if (!this.remoted_msgs.has(key))\n        this.remoted_msgs.set(key, new Set<NP_Address>());\n      const msg_set = this.remoted_msgs.get(key);\n      msg_set.add(uaddr);\n      // LOG(PR,this.uaddr, `reg remote ${key} for ${uaddr}`);\n    });\n  }\n\n  /** unregister message handlers for a given message to passed uaddr */\n  _deleteRemoteMessagesForAddress(uaddr: NP_Address): NP_Msg[] {\n    const fn = '_deleteRemoteMessagesForAddress:';\n    if (typeof uaddr !== 'string') throw Error(`${fn} invalid uaddr`);\n    if (!this.client_socks.has(uaddr)) throw Error(`${fn} unknown uaddr ${uaddr}`);\n    const removed = [];\n    this.remoted_msgs.forEach((msg_set, key) => {\n      if (msg_set.has(uaddr)) removed.push(key);\n      msg_set.delete(uaddr);\n    });\n    return removed;\n  }\n\n  /** packet interface  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** Receive a single packet from the wire, and determine what to do with it.\n   *  It's assumed that _ingestClientPacket() has already handled\n   *  authentication for clients before this method is received.\n   *  The packet has several possible processing options!\n   *  - packet is response to an outgoing transaction\n   *  - packet is a message that we handle\n   *  - packet is a message that we forward\n   *  - packet is unknown message so we return it with error\n   *  If the packet has the rsvp flag set, we need to return\n   *  it to the source address in the packet with any data\n   */\n  async dispatchPacket(pkt: NetPacket): Promise<void> {\n    const fn = 'dispatchPacket:';\n\n    // filter out response packets\n    if (pkt.isResponse()) {\n      if (pkt.src_addr === this.uaddr) {\n        // this is a returning packet that originated from this endpoint\n        this.resolveTransaction(pkt);\n      } else {\n        // otherwise, it's a response packet to a downstream client\n        this.returnToSender(pkt);\n      }\n      return; // done processing, so exit\n    }\n\n    // make sure only request packets are processed\n    if (!pkt.isRequest()) {\n      LOG(PR, this.uaddr, fn, `invalid packet`, pkt);\n      return;\n    }\n\n    // handle ping packets\n    if (pkt.msg_type === 'ping') {\n      const pingArr = this.getMessageAddresses(pkt.msg);\n      const pingHandlers = this.getMessageHandlers(pkt.msg);\n      if (pingHandlers.length > 0) pingArr.push(this.uaddr);\n      pkt.setData(pingArr);\n      this.returnToSender(pkt);\n      return;\n    }\n\n    // handle signal packets\n    if (pkt.msg_type === 'signal') {\n      await this.awaitHandlers(pkt);\n      if (this.isServer()) await this.awaitRemoteHandlers(pkt);\n      return;\n    }\n\n    // handle call and send packets\n    let retData: any;\n    if (this.packetHasHandler(pkt)) {\n      // handle send and call, which do not reflect back to sender\n      retData = await this.awaitHandlers(pkt);\n      if (this.isServer()) retData = await this.awaitRemoteHandlers(pkt);\n    } else {\n      LOG(PR, this.uaddr, fn, `unknown message`, pkt);\n      retData = { error: `unknown message '${pkt.msg}'` };\n    }\n\n    // if the packet doesn't have an RSVP flag, then we don't\n    // have to return any data so quit\n    if (!pkt.hasRsvp()) return;\n\n    // otherwise, we need to return the appropriate data\n    // to the callee. ping and signal have already been handled\n    if (pkt.msg_type === 'call') {\n      pkt.data = NormalizeData(retData);\n    } else if (pkt.msg_type === 'send') {\n      pkt.data = true;\n    }\n    // now send the response, eventually\n    this.returnToSender(pkt);\n  }\n\n  /** Start a transaction, which returns promises to await. This method\n   *  is a queue that uses Promises to wait for the return, which is\n   *  triggered by a returning packet in dispatchPacket(pkt).\n   */\n  async awaitRemoteHandlers(pkt: NetPacket) {\n    const fn = 'awaitRemoteHandlers:';\n    if (pkt.hop_dir !== 'req') throw Error(`${fn} packet is not a request`);\n    // prep for return\n    const { gateway, clients } = this.getRoutingInformation(pkt);\n    const promises = [];\n    if (gateway) {\n      // LOG(PR,_PKT(this, fn, '-wait-req-', pkt), pkt.data);\n      const p = this.awaitTransaction(pkt, gateway);\n      if (p) promises.push(p);\n    }\n    if (Array.isArray(clients)) {\n      // LOG(PR,_PKT(this, fn, '-wait-req-', pkt), pkt.data);\n      clients.forEach(sock => {\n        // LOG(PR,fn,this.uaddr, 'await remote', pkt.msg, sock.uaddr);\n        const p = this.awaitTransaction(pkt, sock);\n        if (p) promises.push(p);\n      });\n    }\n    let data = await Promise.all(promises);\n    return data; // an array of results\n  }\n\n  /** Start a handler call, which might have multiple implementors.\n   *  Returns data from all handlers as an array or a single item\n   */\n  async awaitHandlers(pkt: NetPacket) {\n    const fn = 'awaitHandlers:';\n    const { msg } = pkt;\n    const handlers = this.getMessageHandlers(msg);\n    if (handlers.length === 0) return Promise.resolve([]);\n    const promises = [];\n    // LOG(PR,_PKT(this, fn, '-wait-hnd-', pkt), pkt.data);\n    handlers.forEach(handler => {\n      promises.push(\n        new Promise((resolve, reject) => {\n          try {\n            resolve(handler({ ...pkt.data })); // copy of data\n          } catch (err) {\n            reject(err);\n          }\n        })\n      );\n    });\n    let data = await Promise.all(promises);\n    return data; // an array of data\n  }\n\n  /** Send a single packet on all available interfaces based on the\n   *  message. Use for initial outgoing packets only from the\n   *  netCall, netSend, netSignal, and netPing methods.\n   */\n  initialSend(pkt: NetPacket) {\n    const fn = 'initialSend:';\n    // sanity checks\n    if (pkt.src_addr === undefined) throw Error(`${fn}src_addr undefined`);\n    if (this.uaddr === undefined) throw Error(`${fn} uaddr undefined`);\n    if (pkt.hop_seq.length !== 0) throw Error(`${fn} pkt must have no hops yet`);\n    if (pkt.msg_type !== 'ping' && pkt.data === undefined)\n      throw Error(`${fn} data undefined`);\n    // prep for sending\n    // LOG(PR,_PKT(this, fn, '-send-req-', pkt), pkt.data);\n    const { gateway, clients } = this.getRoutingInformation(pkt);\n    // send on the wire\n    pkt.addHop(this.uaddr);\n    if (gateway) {\n      if (this.cli_reg === undefined) throw Error(`${fn} endpoint not registered`);\n      gateway.send(pkt);\n    }\n    if (Array.isArray(clients)) {\n      clients.forEach(sock => sock.send(pkt));\n    }\n  }\n\n  /** Used to forward a transaction from server to a remote client\n   */\n  awaitTransaction(pkt: NetPacket, sock: I_NetSocket): Promise<any> {\n    const clone = this.clonePacket(pkt);\n    clone.id = this.assignPacketId(clone);\n    if (pkt.src_addr === sock.uaddr && SkipOriginType(pkt.msg_type)) return;\n    return this._queueTransaction(clone, sock);\n  }\n\n  /** Used to resolve a forwarded transaction received by server from\n   *  a remote client\n   */\n  resolveTransaction(pkt: NetPacket) {\n    const fn = 'resolveTransaction:';\n    // LOG(PR, fn, this.uaddr, 'resolving', pkt.msg);\n    if (pkt.hop_rsvp !== true) throw Error(`${fn} packet is not RSVP`);\n    if (pkt.hop_dir !== 'res') throw Error(`${fn} packet is not a response`);\n    if (pkt.hop_seq.length < 2 && !pkt.isSpecialPkt())\n      throw Error(`${fn} packet has no hops`);\n    this._dequeueTransaction(pkt);\n  }\n\n  /** utility method for conducting transactions */\n  _queueTransaction(pkt: NetPacket, sock: I_NetSocket): Promise<any> {\n    const fn = '_queueTransaction:';\n    const hash = GetPacketHashString(pkt);\n    if (this.transactions.has(hash)) throw Error(`${fn} duplicate hash ${hash}`);\n    const { src_addr } = pkt;\n    const { uaddr: dst_addr } = sock;\n    // LOG(PR, fn, `${pkt.msg} dst:${dst_addr} src:${src_addr}`);\n    return new Promise((resolve, reject) => {\n      const meta = { msg: pkt.msg, uaddr: pkt.src_addr };\n      this.transactions.set(hash, { resolve, reject, ...meta });\n      sock.send(pkt);\n    });\n  }\n\n  /** utility method for completing transactions */\n  _dequeueTransaction(pkt: NetPacket) {\n    const fn = '_finishTransaction:';\n    const hash = GetPacketHashString(pkt);\n    const resolver = this.transactions.get(hash);\n    if (!resolver) throw Error(`${fn} no resolver for hash ${hash}`);\n    const { resolve, reject } = resolver;\n    const { data } = pkt;\n    // LOG(PR,_PKT(this, fn, '-recv-res-', pkt), pkt.data);\n    if (pkt.err) reject(pkt.err);\n    else resolve(data);\n    this.transactions.delete(hash);\n  }\n\n  /** Return a packet to its source address. If this endpoint is a server,\n   *  then it might have the socket stored. Otherwise, if this endpoint is\n   *  also a client of another server, pass the back through the gateway.\n   *  This is used by server endpoints to return packets to clients.\n   */\n  returnToSender(pkt: NetPacket) {\n    const fn = 'returnToSender:';\n    // check for validity\n    if (pkt.hop_rsvp !== true) throw Error(`${fn} packet is not RSVP`);\n    if (pkt.hop_seq.length < 1) throw Error(`${fn} packet has no hops`);\n    // prep for return\n    pkt.setDir('res');\n    pkt.addHop(this.uaddr);\n    // LOG(PR,_PKT(this, fn, '-send-res-', pkt), pkt.data);\n    const { gateway, src_addr } = this.getRoutingInformation(pkt);\n    if (this.isServer()) {\n      // LOG(PR,fn,this.uaddr, 'returning to', src_addr);\n      const socket = this.getClient(src_addr);\n      if (socket) socket.send(pkt);\n      // responses go to a single address; if we found it here,\n      // then we're done\n      return;\n    }\n    // if we have a gateway, pass the buck onward and let it\n    // find the client\n    if (gateway) {\n      gateway.send(pkt);\n      return;\n    }\n    LOG(PR, `${fn} unroutable packet`, pkt);\n  }\n\n  /** return array of sockets to use for sending packet,\n   *  based on pkt.msg and pkt.src_addr\n   */\n  getRoutingInformation(pkt: NetPacket): PktRoutingInfo {\n    const fn = 'getRoutingInformation:';\n    const { msg, src_addr } = pkt;\n    if (!IsNetMessage(msg)) throw Error(`${fn} '${msg}' is invalid message`);\n    // check if there's a gateway first and add it\n    const gateway = this.cli_gateway;\n    const self_addr = this.uaddr;\n    // check if we're a server\n    const msg_list = this.getMessageAddresses(msg);\n    const clients = [];\n    msg_list.forEach(uaddr => {\n      if (uaddr === this.uaddr) return; // skip self\n      const socket = this.getClient(uaddr);\n      if (socket) clients.push(socket);\n    });\n    return {\n      msg,\n      src_addr,\n      self_addr,\n      gateway,\n      clients\n    };\n  }\n\n  /** packet utility - - - - - - - - - - - - - - - - - - - - - - - - - - - -**/\n\n  assignPacketId(pkt: NetPacket): NP_ID {\n    if (pkt.src_addr === undefined) pkt.src_addr = this.uaddr;\n    const count = ++this.pkt_counter;\n    pkt.id = `pkt[${pkt.src_addr}:${count}]`;\n    return pkt.id;\n  }\n\n  /** convert JSON to packet and return */\n  packetFromJSON(json: string): NetPacket {\n    const pkt = new NetPacket();\n    pkt.setFromJSON(json);\n    return pkt;\n  }\n\n  /** create a new packet with proper address */\n  newPacket(msg?: NP_Msg, data?: NP_Data): NetPacket {\n    const fn = 'newPacket:';\n    const pkt = new NetPacket(msg, data);\n    pkt.setSrcAddr(this.uaddr || UADDR_NONE);\n    if (this.cli_auth) pkt.setAuth(this.cli_auth);\n    pkt.id = this.assignPacketId(pkt);\n    return pkt;\n  }\n\n  /** clone a packet with new id */\n  clonePacket(pkt: NetPacket): NetPacket {\n    const clone = this.newPacket(pkt.msg, pkt.data);\n    clone.setFromJSON(pkt.serialize());\n    clone.src_addr = this.uaddr;\n    clone.id = this.assignPacketId(clone);\n    return clone;\n  }\n\n  /** create an authentication packet, which is the first packet that must be sent\n   *  after connecting to the server */\n  newAuthPacket(authObj: TClientAuth): NetPacket {\n    const pkt = this.newPacket('SRV:AUTH', { ...authObj });\n    pkt.setMeta('_auth', { rsvp: true });\n    pkt.setSrcAddr(UADDR_NONE); // provide null address\n    this.assignPacketId(pkt);\n    return pkt;\n  }\n\n  /** create a registration packet */\n  newRegPacket(): NetPacket {\n    const pkt = this.newPacket('SRV:REG');\n    pkt.setMeta('_reg', { rsvp: true });\n    return pkt;\n  }\n\n  /** create a declaration packet shell */\n  newDeclPacket(): NetPacket {\n    const pkt = this.newPacket('SRV:DEF');\n    pkt.setMeta('_decl', { rsvp: true });\n    return pkt;\n  }\n\n  /** environment utilities - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** return true if this endpoint is managing connections */\n  isServer() {\n    return this.client_socks !== undefined && this.remoted_msgs !== undefined;\n  }\n\n  /** socket utilities  - - - - - - - - - - - - - - - - - - - - - - - - - - **/\n\n  /** given a socket, see if it's already registered */\n  isNewSocket(socket: I_NetSocket): boolean {\n    const fn = 'isNewSocket:';\n    if (typeof socket !== 'object') return false;\n    return socket.uaddr === undefined;\n  }\n\n  /** client endpoints need to have an authentication token to\n   *  access URNET beyond registration\n   */\n  authorizeSocket(auth: any) {\n    const fn = 'authorizeSocket:';\n    LOG(PR, this.uaddr, 'would check auth token');\n  }\n} // end NetEndpoint class\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport { NetEndpoint };\n", "/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetSocket implements a \"socket-like\" object that consists of a send()\n  function and the original connection object. The send function implements\n  the write operation to the connection object. This way, we can provide\n  different methods for reading/writing to the connection object using the\n  same API and extend it as needed. \n\n  -- CROSS PLATFORM IMPORT TRICKS -------------------------------------------\n\n  When using from nodejs mts file, you can only import 'default', which is the\n  NetEndpoint class. If you want to import other exports, you need to\n  destructure the .default prop; to access the NetPacket class do this:\n\n    import EP_DEFAULT from './class-urnet-socket.ts';\n    const { NetSocket } = EP_DEFAULT.default; // note .default\n\n  You can import the types through dereferencing as usual:\n\n    import EP_DEFAULT, { I_NetSocket } from './urnet-types.ts';\n\n  This is not required when importing from another .ts typescript file.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\nimport { PR } from '@ursys/core';\nimport { NetPacket } from './class-urnet-packet.ts';\nimport {\n  NP_Address,\n  NP_Msg,\n  I_NetSocket,\n  NS_SendFunc,\n  NS_CloseFunc,\n  NS_DataFunc,\n  NS_Options\n} from './urnet-types.ts';\n\n/// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = true;\nconst PR = typeof process !== 'undefined' ? 'Socket'.padEnd(13) : 'Socket:';\nconst LOG = (...args) => DBG && console.log(PR, ...args);\n\n/// CLASS DECLARATION /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/** wrapper class a socket connection */\nclass NetSocket implements I_NetSocket {\n  connector: any; // the original connection object\n  sendFunc: NS_SendFunc; // the outgoing send function for this socket\n  closeFunc: NS_CloseFunc; // function to disconnect\n  onDataFunc: NS_DataFunc; // the incoming data function for this socket\n  //\n  uaddr?: NP_Address; // assigned uaddr for this socket-ish object\n  auth?: any; // whatever authentication is needed for this socket\n  msglist?: NP_Msg[]; // messages queued for this socket\n  age?: number; // number of seconds since this socket was used\n  label?: string; // name of the socket-ish object\n\n  constructor(connectObj: any, io: NS_Options) {\n    this.connector = connectObj;\n    const { send, onData, close } = io;\n    this.sendFunc = send.bind(connectObj);\n    this.closeFunc = close.bind(connectObj);\n    this.onDataFunc = onData.bind(connectObj);\n  }\n\n  send(pkt: NetPacket) {\n    this.sendFunc(pkt);\n  }\n\n  close() {\n    this.closeFunc();\n  }\n\n  getConnector() {\n    return this.connector;\n  }\n\n  authenticated() {\n    let a = this.auth !== undefined;\n    return a;\n  }\n}\n\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nexport { NetSocket };\nexport type { I_NetSocket, NS_SendFunc, NS_DataFunc, NS_Options };\n"],
  "mappings": "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",
  "names": ["CLASS", "module", "TEXT", "PR", "makeStyleFormatter", "row", "__publicField", "__export", "LOG", "http_port", "wss_path", "PROMPTS", "VALID_MSG_CHANNELS", "VALID_PKT_TYPES", "SKIP_SELF_PKT_TYPES", "VALID_ADDR_PREFIX", "UADDR_DIGITS", "USED_ADDRS", "zeroPad", "UADDR_NONE", "IsValidType", "SkipOriginType", "IsValidChannel", "VALID_MSG_CHANNELS", "IsValidAddress", "VALID_ADDR_PREFIX", "IsValidMessage", "DecodeMessage", "ADDR_MAX_ID", "AllocateAddress", "UADDR_DIGITS", "USED_ADDRS", "NormalizeMessage", "NormalizeData", "IsLocalMessage", "IsNetMessage", "GetPacketHashString", "PR", "LOG", "NetPacket", "IsValidMessage", "IsValidType", "IsValidAddress", "UADDR_NONE", "DecodeMessage", "PR", "LOG", "AGE_INTERVAL", "AGE_MAX", "NetEndpoint", "IsValidAddress", "LOG", "PR", "AllocateAddress", "AGE_INTERVAL", "AGE_MAX", "NormalizeMessage", "IsLocalMessage", "IsNetMessage", "GetPacketHashString", "NormalizeData", "SkipOriginType", "NetPacket", "UADDR_NONE", "PR", "NetSocket", "CLASS", "NetEndpoint", "NetSocket", "NetPacket"]
}
