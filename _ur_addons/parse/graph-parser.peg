{
  const DQUO='"';
  const SQUO="'";

  // remove quote wrappers
  function stripQuotes(str) {
    if (str.startsWith(DQUO) && str.endsWith(DQUO)) return str.slice(1,-1);
    if (str.startsWith(SQUO) && str.endsWith(SQUO)) return str.slice(1,-1);
    return str;
  }

  // extract the edge list from complicated match terms
  function extractEdges(head,tail) {
    let terms = [];
    // first term
    terms.push(head.map(arg=>arg[1]).join('')); 
    // additional terms that matched
    tail.forEach(match=>{
      // match is [string,array<array>]]
      let term = match[1].map(chs=>chs[2]).join('');
      term = stripQuotes(term);
      terms.push(term);
    });
    return terms;
  }
}

Start
  = content:Line* !. { return content }

Line
  = BlankLine
  / Comment
  / Command

BlankLine
  = NL { return { blank:true }}

Comment
  = "//" _ cmt:(!NL .)* NL {
    return { comment: cmt.map(e=>e[1]).join('') }
  }

Command
  = node:Node edges:EdgeList {
  	return { 
      node,
      edges
    } 
  }

EdgeList
  = req:(!EdgeDL !NL .)+ NL { return [req.map(e=>e[2]).join('')] }
  / req:(!EdgeDL .)+ opt:(EdgeDL (!EdgeDL !NL .)*)* NL {
    return extractEdges(req,opt);
  }
  
Node 
  = name:(!NodeDL .)* NodeDL { return name.map(e=>e[1]).join('') }

NodeDL = ':'
EdgeDL = ','
NL = "\r\n" / "\n" / "\r"  
_  = [ \t]*  
