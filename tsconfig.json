/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\

  This tsconfig file is used by multiple systems in the URSYS build system:

  .. the VSCODE typescript language server to provide Intellisense
  .. the VSCODE eslint plugin to provide live type checking and linting
  .. the eslint configuration to use typescript rules
  .. the esbuild tool to transpile typescript files to bundles
  .. the tsc typescript compiler to generate type declaration files
  .. npm workspaces with shared typescript imports and dependencies
  .. support for nodejs and web browser targets in the same npm workspace
  .. support of shared platform-independent typescript code for projects

  Maintaining compatibility between these systems is a challenge, as not
  all options apply to each system. Annotations are provided to explain
  which systems use each option.

  NOTE: URSYS is using ts-node-esm as the runtime to enable pure
  typescript execution in nodejs without transpilation.

\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/
{
  "compilerOptions": {
    // this sets the 'target' javascript version
    "target": "es2022", // https://typescriptlang.org/tsconfig/#target

    // 'module' sets the module format to export
    // emit either cjs, esm output based on extension (mts, cjs, ...)
    "module": "nodenext",

    // 'moduleResolution' sets the module resolution algorithm
    // uses package.json "exports" and extension (mts, cjs, ...)
    "moduleResolution": "nodenext",

    // 'paths' sets module import aliases for use by bundlers and compilers.
    // Do not use in imports for library entrypoints! See details in link.
    // https://typescriptlang.org/docs/handbook/modules/reference.html#paths
    "paths": {
      "~ur/common/*": ["./_ur/common/*"],
      "~ur/server/*": ["./_ur/node-server/*"],
      "~ur/web/*": ["./_ur_addons/*"],
      "~ur/types/*": ["./_ur/_types/*"]
    },

    // when set, typeRoots looks ONLY at these paths for type resolution
    "typeRoots": ["node_modules/@types", "_ur/_types"],

    // generate .d.ts files (ignored by esbuild)
    "declaration": true,

    // skip library type checking (ignored by esbuild)
    "skipLibCheck": true,

    /** THE FOLLOWING ARE FOR ESBUILD COMPATBILITY **/

    // files are compiled in isolation
    "isolatedModules": true, // https://esbuild.github.io/content-types/#isolated-modules

    // disable legacy cjs support in typescript, use only esm
    "esModuleInterop": true, // https://esbuild.github.io/content-types/#es-module-interop

    // can use extensions (e.g. .ts, .mts) in import statements
    "allowImportingTsExtensions": true, // https://typescriptlang.org/tsconfig/#allowImportingTsExtensions

    // required for allowImportingTsExtensions
    "noEmit": true // https://typescriptlang.org/tsconfig/#noEmit

    /// UNUSED OPTIONS ///

    // 'rootDir' can be used to set explicit source directory which will
    // mirror the directory structure in outDir. Don't need to set it unless
    // you don't like the output directory structure.

    // 'rootDirs' can be used to set multiple source directories that will
    // be compiled to a single output directory.

    // 'outDir' sets the output directory for the compiled files
    // This is set by esbuild in the build script, so it is not needed here
  },
  // process all these files. per 'isolatedModules', they are all scanned individually
  // rather than as a unified type system
  "include": [
    "_ur/**/*.ts",
    "_ur/**/*.mts",
    "_ur_addons/**/*.ts",
    "_ur_addons/**/*.mts"
  ],

  // don't process the files in these directories
  "exclude": ["node_modules", "_ur/node_modules", "_ur_addons/node_modules"]
}
