# vs_env - Sri's Visual Studio Code Environment Script
# 
# The following script is source'd from inside a Visual Studio Code integrated terminal
# and is located in a workspace .vscode folder. Accompanying changes must be made to
# the .code-workspace file to enable this script to run. As an example, these settings
# in the .code-workspace file will first force x86 mode on an ARM-based Mac through
# Rosetta 2, and then run the script vs_env script
#
# "terminal.integrated.profiles.osx": {
#   "x86 macos": {
#     "path": "/usr/bin/arch",
#     "args": [
#       "-arch",
#       "x86_64",
#       "${env:SHELL}",
#       "-i",
#       "-c",
#       "export VSCODE_TERM='x86 shell';source ${workspaceFolder}/.vscode/vs_env; exec ${env:SHELL}"
#     ]
#   }
# },
# "terminal.integrated.defaultProfile.osx": "x86 macos",
# 
# For more information on terminal profiles in vscode, see
# https://code.visualstudio.com/docs/terminal/profiles

# ANSI Terminal Colors
ALRT="\033[33;1m" # yellow
INFO="\033[34;1m" # blue
NRML="\033[0m"    # normal
BOLD="\033[1m"    # normal bold

# Check if NVM_DIR is defined (this is set by nvm on startup)
if [ -z "$NVM_DIR" ]; then
  printf "\n"
  printf "vsenv: ${ALRT}NVM does not appear to be installed${NRML}\n"
  printf "       Does your ${INFO}~/.zshrc${NRML} have ${INFO}export NVM_DIR${NRML} lines?\n"
  printf "\n"
  printf "       If you haven't yet installed nvm, please follow the instructions\n"
  printf "       at https://github.com/nvm-sh/nvm to install it."
  printf "       If you are using 'bash' as your default shell, you can copy\n"
  printf "       these lines to your .zshrc file so nvm will also work in zsh.\n"
  return
fi

# Check if shell is opening inside a VSCODE integrated terminal
# is NVM is installed, there is a .nvmrc file and a .vscode directory?
if [ -n "$NVM_DIR" ] && [ -s "./.nvmrc" ] && [ -d "./.vscode" ]; then
  NVM_RC=$(cat ./.nvmrc)
  REQ_VERSION=$(nvm version $NVM_RC)
  if [ "$REQ_VERSION" = "N/A" ]; then
    REQ_VERSION="$NVM_RC"
  fi

  CUR_VERSION=$(nvm current)
  NODE_LABEL="$CUR_VERSION"
  if [ "$NVM_RC" != "$REQ_VERSION" ]; then
    NODE_LABEL="$NODE_LABEL ($REQ_VERSION)"
  fi

  printf "\n"
  printf "vsenv: VISUAL STUDIO CODE INTEGRATED TERMINAL DETECTED\n"
  ARCH_LABEL=$(uname -m)
  printf "       detected architecture is ${INFO}$ARCH_LABEL${NRML}\n"
  if [ "$CUR_VERSION" != "$REQ_VERSION" ]; then
    printf "       ${ALRT}required node version is ${INFO}$REQ_VERSION${NRML}\n"
  fi
  printf "       detected node version is ${INFO}$NODE_LABEL${NRML}\n"


  # check if node binary is in the path
  if ! command -v node &> /dev/null; then
    printf "\n"
    printf "vsenv: ${ALRT}The node binary can not be found! That is weird!${NRML}\n"
    printf "       This is a possible incompatibility with your shell environment.\n"
    printf "       Contact your friendly neighborhood developer for help.\n"
    printf "       your shell:   $SHELL\n"
    printf "       your path:    $PATH\n"
    printf "       your nvm dir: $NVM_DIR\n"
    return
  else
    printf "\n"
    printf "vsenv: node binary found at ${INFO}$(command -v node)${NRML}\n"
  fi
  
  if [ "$CUR_VERSION" != "$REQ_VERSION" ]; then
    printf "\n"
    printf "vsenv: ** WARNING **\n"
    printf "       This shell is using version ${INFO}$CUR_VERSION${NRML}, not the ${ALRT}specified ${INFO}$REQ_VERSION${NRML} in .nvmrc\n"
    printf "       Type ${ALRT}nvm use${NRML} to use .nvmrc version. You may need to run ${ALRT}npm ci${NRML} again.\n"
    printf "       If you want to use this version as default, type ${ALRT}nvm alias default $REQ_VERSION${NRML}\n"
  fi
else
  printf "\n"
  printf "vsenv: ${ALRT}Missing .nvmrc file or .vscode folder${NRML}\n"
  printf "       This script is intended to be used within a VSCODE integrated terminal opened as a Code Workspace.\n"
  printf "       The project folder should contain a .nvmrc file and a .vscode folder.\n"
fi

# for bash and zsh shells: if ./ is not in PATH, add it to end of PATH
if [[ $PATH != *":./"* ]]; then
  export PATH=$PATH:./
  printf "\n"
  printf "vsenv: adding './' to end of PATH for easier CLI execution in _ur directory!\n"
  printf "       (applies only to this shell)\n"
fi

printf "\n"
